{
  "address": "0xBDf6C6f4bB810BC48ECe781ED8377e7692843497",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "other",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "ofdAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "limit_",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "time",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "expiration",
          "type": "uint256"
        }
      ],
      "name": "Expired",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "limit",
          "type": "uint256"
        }
      ],
      "name": "Limit",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "UnsupportedToken",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "burnAndSend",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "horizon",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "limit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "mintTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minted",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ofd",
      "outputs": [
        {
          "internalType": "contract IOracleFreeDollar",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "usd",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xca80e54e95bc2c934aa61068aeae3e1332cd2e2580ee4f8b52669910696206b1",
  "receipt": {
    "to": null,
    "from": "0xb5aE4043027Aa015d0b03C832CB11065716d53b7",
    "contractAddress": "0xBDf6C6f4bB810BC48ECe781ED8377e7692843497",
    "transactionIndex": 2,
    "gasUsed": "393180",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x2feff7385f2a61fd6dd9f2299051e1ebe35d46c3267d479cdf92b865855f49be",
    "transactionHash": "0xca80e54e95bc2c934aa61068aeae3e1332cd2e2580ee4f8b52669910696206b1",
    "logs": [],
    "blockNumber": 46177596,
    "cumulativeGasUsed": "605342",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x4096831dC711C1A20aC011FBf0AA90A6c56dcF55",
    "0xFe00054AF44E24f0B4bd49b1A2d2984C4264aabE",
    "10000000000000000000000000"
  ],
  "numDeployments": 1,
  "solcInputHash": "9d70238f764b0c28341293c17b4cbfd7",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"other\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"ofdAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"limit_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiration\",\"type\":\"uint256\"}],\"name\":\"Expired\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"}],\"name\":\"Limit\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"UnsupportedToken\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnAndSend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"horizon\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mintTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ofd\",\"outputs\":[{\"internalType\":\"contract IOracleFreeDollar\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usd\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"OracleFreeDollar\",\"kind\":\"dev\",\"methods\":{\"mintTo(address,uint256)\":{\"details\":\"This only works if an allowance for the source coins has been set and the caller has enough of them.\"}},\"title\":\"Stable Coin Bridge\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"burn(uint256)\":{\"notice\":\"Convenience method for burnAndSend(msg.sender, amount)\"},\"burnAndSend(address,uint256)\":{\"notice\":\"Burn the indicated amount of OracleFreeDollar and send the same number of source coin to the caller.\"},\"horizon()\":{\"notice\":\"The time horizon after which this bridge expires and needs to be replaced by a new contract.\"},\"limit()\":{\"notice\":\"The maximum amount of outstanding converted source stablecoins.\"},\"mint(uint256)\":{\"notice\":\"Convenience method for mint(msg.sender, amount)\"},\"mintTo(address,uint256)\":{\"notice\":\"Mint the target amount of OracleFreeDollars, taking the equal amount of source coins from the sender.\"}},\"notice\":\"A minting contract for another United States Dollar stablecoin ('source stablecoin') that we trust.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/StablecoinBridge.sol\":\"StablecoinBridge\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/StablecoinBridge.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./interface/IERC20.sol\\\";\\nimport \\\"./interface/IERC677Receiver.sol\\\";\\nimport \\\"./interface/IOracleFreeDollar.sol\\\";\\n\\n/**\\n * @title Stable Coin Bridge\\n * @notice A minting contract for another United States Dollar stablecoin ('source stablecoin') that we trust.\\n * @author OracleFreeDollar\\n */\\ncontract StablecoinBridge {\\n    IERC20 public immutable usd; // the source stablecoin\\n    IOracleFreeDollar public immutable ofd; // the OracleFreeDollar\\n\\n    /**\\n     * @notice The time horizon after which this bridge expires and needs to be replaced by a new contract.\\n     */\\n    uint256 public immutable horizon;\\n\\n    /**\\n     * The maximum amount of outstanding converted source stablecoins.\\n     */\\n    uint256 public immutable limit;\\n    uint256 public minted;\\n\\n    error Limit(uint256 amount, uint256 limit);\\n    error Expired(uint256 time, uint256 expiration);\\n    error UnsupportedToken(address token);\\n\\n    constructor(address other, address ofdAddress, uint256 limit_) {\\n        usd = IERC20(other);\\n        ofd = IOracleFreeDollar(ofdAddress);\\n        horizon = block.timestamp + 52 weeks;\\n        limit = limit_;\\n        minted = 0;\\n    }\\n\\n    /**\\n     * @notice Convenience method for mint(msg.sender, amount)\\n     */\\n    function mint(uint256 amount) external {\\n        mintTo(msg.sender, amount);\\n    }\\n\\n    /**\\n     * @notice Mint the target amount of OracleFreeDollars, taking the equal amount of source coins from the sender.\\n     * @dev This only works if an allowance for the source coins has been set and the caller has enough of them.\\n     */\\n    function mintTo(address target, uint256 amount) public {\\n        usd.transferFrom(msg.sender, address(this), amount);\\n        _mint(target, amount);\\n    }\\n\\n    function _mint(address target, uint256 amount) internal {\\n        if (block.timestamp > horizon) revert Expired(block.timestamp, horizon);\\n        ofd.mint(target, amount);\\n        minted += amount;\\n        if (minted > limit) revert Limit(amount, limit);\\n    }\\n\\n    /**\\n     * @notice Convenience method for burnAndSend(msg.sender, amount)\\n     */\\n    function burn(uint256 amount) external {\\n        _burn(msg.sender, msg.sender, amount);\\n    }\\n\\n    /**\\n     * @notice Burn the indicated amount of OracleFreeDollar and send the same number of source coin to the caller.\\n     */\\n    function burnAndSend(address target, uint256 amount) external {\\n        _burn(msg.sender, target, amount);\\n    }\\n\\n    function _burn(address ofdHolder, address target, uint256 amount) internal {\\n        ofd.burnFrom(ofdHolder, amount);\\n        usd.transfer(target, amount);\\n        minted -= amount;\\n    }\\n}\\n\",\"keccak256\":\"0xb934e9d4f2a44ef09e58f5e345afef77d16e2ecf9a4dfdd0c45f5ed5e9415b64\",\"license\":\"MIT\"},\"contracts/interface/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n/**\\n *\\n * Copyright (c) 2016-2019 zOS Global Limited\\n *\\n */\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\\n * the optional functions; to access them see `ERC20Detailed`.\\n */\\n\\ninterface IERC20 {\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function decimals() external view returns (uint8);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns always true. Throws error on failure.\\n     *\\n     * Emits a `Transfer` event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through `transferFrom`. This is\\n     * zero by default.\\n     *\\n     * This value can change when `approve` or `transferFrom` are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * > Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an `Approval` event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns always true. Throws error on failure.\\n     *\\n     * Emits a `Transfer` event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to `approve`. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x45c30b37d05372b9c67b0008e20f4639185186fa8e8b73d8aa2b83556f9c594d\",\"license\":\"MIT\"},\"contracts/interface/IERC677Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IERC677Receiver {\\n\\n    function onTokenTransfer(address from, uint256 amount, bytes calldata data) external returns (bool);\\n\\n}\\n\",\"keccak256\":\"0x0c28d3192daf5bfdaf838c0938598ef49c98296fba36f05b4b03b804514e7706\",\"license\":\"MIT\"},\"contracts/interface/IOracleFreeDollar.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./IReserve.sol\\\";\\n\\ninterface IOracleFreeDollar is IERC20 {\\n    function suggestMinter(address _minter, uint256 _applicationPeriod, uint256 _applicationFee, string calldata _message) external;\\n\\n    function registerPosition(address position) external;\\n\\n    function denyMinter(address minter, address[] calldata helpers, string calldata message) external;\\n\\n    function reserve() external view returns (IReserve);\\n\\n    function minterReserve() external view returns (uint256);\\n\\n    function calculateAssignedReserve(uint256 mintedAmount, uint32 _reservePPM) external view returns (uint256);\\n\\n    function calculateFreedAmount(uint256 amountExcludingReserve, uint32 reservePPM) external view returns (uint256);\\n\\n    function equity() external view returns (uint256);\\n\\n    function isMinter(address minter) external view returns (bool);\\n\\n    function getPositionParent(address position) external view returns (address);\\n\\n    function mint(address target, uint256 amount) external;\\n\\n    function mintWithReserve(address target, uint256 amount, uint32 reservePPM, uint32 feePPM) external;\\n\\n    function burnFrom(address target, uint256 amount) external;\\n\\n    function burnWithoutReserve(uint256 amountIncludingReserve, uint32 reservePPM) external;\\n\\n    function burnFromWithReserve(address payer, uint256 targetTotalBurnAmount, uint32 _reservePPM) external returns (uint256);\\n\\n    function burnWithReserve(uint256 amountExcludingReserve, uint32 reservePPM) external returns (uint256);\\n\\n    function coverLoss(address source, uint256 amount) external;\\n\\n    function collectProfits(address source, uint256 _amount) external;\\n}\\n\",\"keccak256\":\"0xa905de798dc8a16c4c89590690d1a030d8c6b1eba2ec73bd3fac57f6302d5631\",\"license\":\"MIT\"},\"contracts/interface/IReserve.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\n\\ninterface IReserve is IERC20 {\\n   function invest(uint256 amount, uint256 expected) external returns (uint256);\\n   function checkQualified(address sender, address[] calldata helpers) external view;\\n}\",\"keccak256\":\"0x3b46b47f54a43bf2da382a4e5cc70e72a1aeb7845c75d30a04809ecccf2019dc\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x61010060405234801561001157600080fd5b506040516107653803806107658339810160408190526100309161007e565b6001600160a01b03808416608052821660a052610051426301dfe2006100ba565b60c05260e0525050600080556100e1565b80516001600160a01b038116811461007957600080fd5b919050565b60008060006060848603121561009357600080fd5b61009c84610062565b92506100aa60208501610062565b9150604084015190509250925092565b808201808211156100db57634e487b7160e01b600052601160045260246000fd5b92915050565b60805160a05160c05160e0516106146101516000396000818161012e015281816104bb01526104f6015260008181609d015281816103b201526103ed015260008181610194015281816102a50152610444015260008181610155015281816101e6015261032501526106146000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c80639e41b44d116100665780639e41b44d14610103578063a0712d6814610116578063a4d66daf14610129578063d63a6ccd14610150578063f61d52e61461018f57600080fd5b80631ce832b51461009857806342966c68146100d2578063449a52f8146100e75780634f02c420146100fa575b600080fd5b6100bf7f000000000000000000000000000000000000000000000000000000000000000081565b6040519081526020015b60405180910390f35b6100e56100e0366004610522565b6101b6565b005b6100e56100f536600461053b565b6101c4565b6100bf60005481565b6100e561011136600461053b565b61026a565b6100e5610124366004610522565b610275565b6100bf7f000000000000000000000000000000000000000000000000000000000000000081565b6101777f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016100c9565b6101777f000000000000000000000000000000000000000000000000000000000000000081565b6101c133338361027f565b50565b6040516323b872dd60e01b8152336004820152306024820152604481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906323b872dd906064016020604051808303816000875af1158015610237573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061025b9190610573565b5061026682826103b0565b5050565b61026633838361027f565b6101c133826101c4565b60405163079cc67960e41b81526001600160a01b038481166004830152602482018390527f000000000000000000000000000000000000000000000000000000000000000016906379cc679090604401600060405180830381600087803b1580156102e957600080fd5b505af11580156102fd573d6000803e3d6000fd5b505060405163a9059cbb60e01b81526001600160a01b038581166004830152602482018590527f000000000000000000000000000000000000000000000000000000000000000016925063a9059cbb91506044016020604051808303816000875af1158015610370573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103949190610573565b50806000808282546103a691906105b2565b9091555050505050565b7f000000000000000000000000000000000000000000000000000000000000000042111561041e5760405163aa2fd92560e01b81524260048201527f000000000000000000000000000000000000000000000000000000000000000060248201526044015b60405180910390fd5b6040516340c10f1960e01b81526001600160a01b038381166004830152602482018390527f000000000000000000000000000000000000000000000000000000000000000016906340c10f1990604401600060405180830381600087803b15801561048857600080fd5b505af115801561049c573d6000803e3d6000fd5b50505050806000808282546104b191906105cb565b90915550506000547f0000000000000000000000000000000000000000000000000000000000000000101561026657604051631927a4b960e21b8152600481018290527f00000000000000000000000000000000000000000000000000000000000000006024820152604401610415565b60006020828403121561053457600080fd5b5035919050565b6000806040838503121561054e57600080fd5b82356001600160a01b038116811461056557600080fd5b946020939093013593505050565b60006020828403121561058557600080fd5b8151801515811461059557600080fd5b9392505050565b634e487b7160e01b600052601160045260246000fd5b818103818111156105c5576105c561059c565b92915050565b808201808211156105c5576105c561059c56fea2646970667358221220b6bba3b781d0f8437894c72a504624041ad4b42ff71ab3bf932db5a9b226649964736f6c63430008140033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100935760003560e01c80639e41b44d116100665780639e41b44d14610103578063a0712d6814610116578063a4d66daf14610129578063d63a6ccd14610150578063f61d52e61461018f57600080fd5b80631ce832b51461009857806342966c68146100d2578063449a52f8146100e75780634f02c420146100fa575b600080fd5b6100bf7f000000000000000000000000000000000000000000000000000000000000000081565b6040519081526020015b60405180910390f35b6100e56100e0366004610522565b6101b6565b005b6100e56100f536600461053b565b6101c4565b6100bf60005481565b6100e561011136600461053b565b61026a565b6100e5610124366004610522565b610275565b6100bf7f000000000000000000000000000000000000000000000000000000000000000081565b6101777f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016100c9565b6101777f000000000000000000000000000000000000000000000000000000000000000081565b6101c133338361027f565b50565b6040516323b872dd60e01b8152336004820152306024820152604481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906323b872dd906064016020604051808303816000875af1158015610237573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061025b9190610573565b5061026682826103b0565b5050565b61026633838361027f565b6101c133826101c4565b60405163079cc67960e41b81526001600160a01b038481166004830152602482018390527f000000000000000000000000000000000000000000000000000000000000000016906379cc679090604401600060405180830381600087803b1580156102e957600080fd5b505af11580156102fd573d6000803e3d6000fd5b505060405163a9059cbb60e01b81526001600160a01b038581166004830152602482018590527f000000000000000000000000000000000000000000000000000000000000000016925063a9059cbb91506044016020604051808303816000875af1158015610370573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103949190610573565b50806000808282546103a691906105b2565b9091555050505050565b7f000000000000000000000000000000000000000000000000000000000000000042111561041e5760405163aa2fd92560e01b81524260048201527f000000000000000000000000000000000000000000000000000000000000000060248201526044015b60405180910390fd5b6040516340c10f1960e01b81526001600160a01b038381166004830152602482018390527f000000000000000000000000000000000000000000000000000000000000000016906340c10f1990604401600060405180830381600087803b15801561048857600080fd5b505af115801561049c573d6000803e3d6000fd5b50505050806000808282546104b191906105cb565b90915550506000547f0000000000000000000000000000000000000000000000000000000000000000101561026657604051631927a4b960e21b8152600481018290527f00000000000000000000000000000000000000000000000000000000000000006024820152604401610415565b60006020828403121561053457600080fd5b5035919050565b6000806040838503121561054e57600080fd5b82356001600160a01b038116811461056557600080fd5b946020939093013593505050565b60006020828403121561058557600080fd5b8151801515811461059557600080fd5b9392505050565b634e487b7160e01b600052601160045260246000fd5b818103818111156105c5576105c561059c565b92915050565b808201808211156105c5576105c561059c56fea2646970667358221220b6bba3b781d0f8437894c72a504624041ad4b42ff71ab3bf932db5a9b226649964736f6c63430008140033",
  "devdoc": {
    "author": "OracleFreeDollar",
    "kind": "dev",
    "methods": {
      "mintTo(address,uint256)": {
        "details": "This only works if an allowance for the source coins has been set and the caller has enough of them."
      }
    },
    "title": "Stable Coin Bridge",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "burn(uint256)": {
        "notice": "Convenience method for burnAndSend(msg.sender, amount)"
      },
      "burnAndSend(address,uint256)": {
        "notice": "Burn the indicated amount of OracleFreeDollar and send the same number of source coin to the caller."
      },
      "horizon()": {
        "notice": "The time horizon after which this bridge expires and needs to be replaced by a new contract."
      },
      "limit()": {
        "notice": "The maximum amount of outstanding converted source stablecoins."
      },
      "mint(uint256)": {
        "notice": "Convenience method for mint(msg.sender, amount)"
      },
      "mintTo(address,uint256)": {
        "notice": "Mint the target amount of OracleFreeDollars, taking the equal amount of source coins from the sender."
      }
    },
    "notice": "A minting contract for another United States Dollar stablecoin ('source stablecoin') that we trust.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 6298,
        "contract": "contracts/StablecoinBridge.sol:StablecoinBridge",
        "label": "minted",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}