{
  "address": "0x253fa424a35ab579bE20F878cBcf9ecbeAe23B65",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "ofd_",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "Log",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pos",
          "type": "address"
        }
      ],
      "name": "NotOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pos",
          "type": "address"
        }
      ],
      "name": "NotPosition",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "source",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "collWithdraw",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "repay",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "collDeposit",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "mint",
          "type": "uint256"
        }
      ],
      "name": "Roll",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "contract IPosition",
          "name": "pos",
          "type": "address"
        }
      ],
      "name": "findRepaymentAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IPosition",
          "name": "source",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "repay",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "collWithdraw",
          "type": "uint256"
        },
        {
          "internalType": "contract IPosition",
          "name": "target",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "mint",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "collDeposit",
          "type": "uint256"
        },
        {
          "internalType": "uint40",
          "name": "expiration",
          "type": "uint40"
        }
      ],
      "name": "roll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IPosition",
          "name": "source",
          "type": "address"
        },
        {
          "internalType": "contract IPosition",
          "name": "target",
          "type": "address"
        }
      ],
      "name": "rollFully",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IPosition",
          "name": "source",
          "type": "address"
        },
        {
          "internalType": "contract IPosition",
          "name": "target",
          "type": "address"
        },
        {
          "internalType": "uint40",
          "name": "expiration",
          "type": "uint40"
        }
      ],
      "name": "rollFullyWithExpiration",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x7dda78f488313e5ef46c0170fc1ae576db281fd11d62e3918582cb7695ee59b9",
  "receipt": {
    "to": null,
    "from": "0x22a2Aaa43C8Ecedd91d857B5d0779211aFba1379",
    "contractAddress": "0x253fa424a35ab579bE20F878cBcf9ecbeAe23B65",
    "transactionIndex": 5,
    "gasUsed": "1074275",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x9703a72c54c3fd99d58acf0be687af46e5790fcf366798223cc9aec4f08333e4",
    "transactionHash": "0x7dda78f488313e5ef46c0170fc1ae576db281fd11d62e3918582cb7695ee59b9",
    "logs": [],
    "blockNumber": 25851502,
    "cumulativeGasUsed": "1074275",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xa79bD079986b7D8C9D98021817dCf7085741D991"
  ],
  "numDeployments": 1,
  "solcInputHash": "6eaf3ef7f7a823d8899d101cad9f8e1a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ofd_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"Log\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pos\",\"type\":\"address\"}],\"name\":\"NotOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pos\",\"type\":\"address\"}],\"name\":\"NotPosition\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"collWithdraw\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"repay\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"collDeposit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"mint\",\"type\":\"uint256\"}],\"name\":\"Roll\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"contract IPosition\",\"name\":\"pos\",\"type\":\"address\"}],\"name\":\"findRepaymentAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IPosition\",\"name\":\"source\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"repay\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collWithdraw\",\"type\":\"uint256\"},{\"internalType\":\"contract IPosition\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"mint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collDeposit\",\"type\":\"uint256\"},{\"internalType\":\"uint40\",\"name\":\"expiration\",\"type\":\"uint40\"}],\"name\":\"roll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IPosition\",\"name\":\"source\",\"type\":\"address\"},{\"internalType\":\"contract IPosition\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"rollFully\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IPosition\",\"name\":\"source\",\"type\":\"address\"},{\"internalType\":\"contract IPosition\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"uint40\",\"name\":\"expiration\",\"type\":\"uint40\"}],\"name\":\"rollFullyWithExpiration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"roll(address,uint256,uint256,address,uint256,uint256,uint40)\":{\"params\":{\"collDeposit\":\"The amount of collateral to be send from msg.sender to the target position.\",\"collWithdraw\":\"Collateral to move from the source position to the msg.sender .\",\"expiration\":\"The desired expiration date for the target position.\",\"mint\":\"The amount to be minted from the target position using collateral from msg.sender.\",\"repay\":\"The amount to flash loan in order to repay the source position and free up some or all collateral.\",\"source\":\"The source position, must be owned by the msg.sender .\",\"target\":\"The target position. If not owned by msg.sender or if it does not have the desired expiration,               it is cloned to create a position owned by the msg.sender.\"}}},\"title\":\"PositionRoller Helper to roll over a debt from an old position to a new one. Both positions should have the same collateral. Otherwise, it does not make much sense.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"findRepaymentAmount(address)\":{\"notice\":\"Doing a binary search is not very efficient, but guaranteed to return a valid result without rounding errors. To save gas costs, the frontend can also call this and other methods to calculate the right parameters and then call 'roll' directly.\"},\"roll(address,uint256,uint256,address,uint256,uint256,uint40)\":{\"notice\":\"Rolls the source position into the target position using a flash loan. Both the source and the target position must recognize this roller. It is the responsibility of the caller to ensure that both positions are valid contracts.\"},\"rollFully(address,address)\":{\"notice\":\"Convenience method to roll and old position into a new one. Pre-condition is an allowance for the roller to spend the collateral asset on behalf of the caller, i.e. one should set collateral.approve(roller, collateral.balanceOf(sourcePosition)); The following is assumed: - If the limit of the target position permits, the user wants to roll everything - The user does not want to add additional collateral, but excess collateral is returned - If not enough can be minted in the new position, it is ok for the roller to use OFD from the msg.sender\"},\"rollFullyWithExpiration(address,address,uint40)\":{\"notice\":\"Like rollFully, but with a custom expiration date for the new position.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/PositionRoller.sol\":\"PositionRoller\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/PositionRoller.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport './interface/IERC20.sol';\\r\\nimport './interface/IOracleFreeDollar.sol';\\r\\nimport './interface/IPosition.sol';\\r\\nimport './utils/Ownable.sol';\\r\\nimport './interface/IReserve.sol';\\r\\n\\r\\n/**\\r\\n * @title PositionRoller\\r\\n *\\r\\n * Helper to roll over a debt from an old position to a new one.\\r\\n * Both positions should have the same collateral. Otherwise, it does not make much sense.\\r\\n */\\r\\ncontract PositionRoller {\\r\\n\\r\\n\\tIOracleFreeDollar private ofd;\\r\\n\\r\\n\\terror NotOwner(address pos);\\r\\n\\terror NotPosition(address pos);\\r\\n\\terror Log(uint256, uint256, uint256);\\r\\n\\r\\n\\tevent Roll(address source, uint256 collWithdraw, uint256 repay, address target, uint256 collDeposit, uint256 mint);\\r\\n\\r\\n\\tconstructor(address ofd_) {\\r\\n\\t\\tofd = IOracleFreeDollar(ofd_);\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n     * Convenience method to roll and old position into a new one.\\r\\n     *\\r\\n     * Pre-condition is an allowance for the roller to spend the collateral asset on behalf of the caller,\\r\\n     * i.e. one should set collateral.approve(roller, collateral.balanceOf(sourcePosition));\\r\\n     *\\r\\n     * The following is assumed:\\r\\n     * - If the limit of the target position permits, the user wants to roll everything\\r\\n     * - The user does not want to add additional collateral, but excess collateral is returned\\r\\n     * - If not enough can be minted in the new position, it is ok for the roller to use OFD from the msg.sender\\r\\n     */\\r\\n\\tfunction rollFully(IPosition source, IPosition target) external {\\r\\n\\t\\trollFullyWithExpiration(source, target, target.expiration());\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n     * Like rollFully, but with a custom expiration date for the new position.\\r\\n     */\\r\\n\\tfunction rollFullyWithExpiration(IPosition source, IPosition target, uint40 expiration) public {\\r\\n\\t\\trequire(source.collateral() == target.collateral());\\r\\n\\t\\tuint256 repay = findRepaymentAmount(source);\\r\\n\\t\\tuint256 mintAmount = target.getMintAmount(repay);\\r\\n\\t\\tuint256 collateralToWithdraw = IERC20(source.collateral()).balanceOf(address(source));\\r\\n\\t\\tuint256 targetPrice = target.price();\\r\\n\\t\\tuint256 depositAmount = (mintAmount * 10**18 + targetPrice - 1) / targetPrice; // round up\\r\\n\\t\\tif (depositAmount > collateralToWithdraw){\\r\\n\\t\\t\\t// If we need more collateral than available from the old position, we opt for taking\\r\\n\\t\\t\\t// the missing funds from the caller instead of taking additional collateral from the caller\\r\\n\\t\\t\\tdepositAmount = collateralToWithdraw;\\r\\n\\t\\t\\tmintAmount = depositAmount * target.price() / 10**18; // round down, rest will be taken from caller\\r\\n\\t\\t}\\r\\n\\t\\troll(source, repay, collateralToWithdraw, target, mintAmount, depositAmount, expiration);\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n     * Doing a binary search is not very efficient, but guaranteed to return a valid result without rounding errors.\\r\\n     * To save gas costs, the frontend can also call this and other methods to calculate the right parameters and\\r\\n     * then call 'roll' directly.\\r\\n     */\\r\\n\\tfunction findRepaymentAmount(IPosition pos) public view returns (uint256) {\\r\\n\\t\\tuint256 minted = pos.minted();\\r\\n\\t\\tuint24 reservePPM = pos.reserveContribution();\\r\\n\\t\\tif (minted == 0){\\r\\n\\t\\t\\treturn 0;\\r\\n\\t\\t}\\r\\n\\t\\tuint256 higherResult = ofd.calculateFreedAmount(minted, reservePPM);\\r\\n\\t\\tif (higherResult == minted){\\r\\n\\t\\t\\treturn minted;\\r\\n\\t\\t}\\r\\n\\t\\treturn binarySearch(minted, reservePPM, 0, 0, minted, higherResult);\\r\\n\\t}\\r\\n\\r\\n\\t// max call stack depth is 1024 in solidity. Binary search on 256 bit number takes at most 256 steps, so it should be fine.\\r\\n\\tfunction binarySearch(uint256 target, uint24 reservePPM, uint256 lowerBound, uint256 lowerResult, uint256 higherBound, uint256 higherResult) internal view returns (uint256) {\\r\\n\\t\\tuint256 middle = (lowerBound + higherBound) / 2;\\r\\n\\t\\tif (middle == lowerBound){\\r\\n\\t\\t\\treturn higherBound; // we have reached max precision without exact match, return next higher result to be on the safe side\\r\\n\\t\\t} else {\\r\\n\\t\\t\\tuint256 middleResult = ofd.calculateFreedAmount(middle, reservePPM);\\r\\n\\t\\t\\tif (middleResult == target){\\r\\n\\t\\t\\t\\treturn middle;\\r\\n\\t\\t\\t} else if (middleResult < target){\\r\\n\\t\\t\\t\\treturn binarySearch(target, reservePPM, middle, middleResult, higherBound, higherResult);\\r\\n\\t\\t\\t} else {\\r\\n\\t\\t\\t\\treturn binarySearch(target, reservePPM, lowerBound, lowerResult, middle, middleResult);\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n     * Rolls the source position into the target position using a flash loan.\\r\\n     * Both the source and the target position must recognize this roller.\\r\\n     * It is the responsibility of the caller to ensure that both positions are valid contracts.\\r\\n     *\\r\\n     * @param source The source position, must be owned by the msg.sender .\\r\\n     * @param repay The amount to flash loan in order to repay the source position and free up some or all collateral.\\r\\n     * @param collWithdraw Collateral to move from the source position to the msg.sender .\\r\\n     * @param target The target position. If not owned by msg.sender or if it does not have the desired expiration,\\r\\n     *               it is cloned to create a position owned by the msg.sender.\\r\\n     * @param mint The amount to be minted from the target position using collateral from msg.sender.\\r\\n     * @param collDeposit The amount of collateral to be send from msg.sender to the target position.\\r\\n     * @param expiration The desired expiration date for the target position.\\r\\n     */\\r\\n\\tfunction roll(IPosition source, uint256 repay, uint256 collWithdraw, IPosition target, uint256 mint, uint256 collDeposit, uint40 expiration) public valid(source) valid(target) own(source) {\\r\\n\\t\\tofd.mint(address(this), repay); // take a flash loan\\r\\n\\t\\tsource.repay(repay);\\r\\n\\t\\tsource.withdrawCollateral(msg.sender, collWithdraw);\\r\\n\\t\\tif (mint > 0){\\r\\n\\t\\t\\tIERC20 targetCollateral = IERC20(target.collateral());\\r\\n\\t\\t\\tif (Ownable(address(target)).owner() != msg.sender || expiration != target.expiration()){\\r\\n\\t\\t\\t\\ttargetCollateral.transferFrom(msg.sender, address(this), collDeposit); // get the new collateral\\r\\n\\t\\t\\t\\ttargetCollateral.approve(target.hub(), collDeposit); // approve the new collateral and clone:\\r\\n\\t\\t\\t\\ttarget = IPosition(IMintingHub(target.hub()).clone(msg.sender, address(target), collDeposit, mint, expiration));\\r\\n\\t\\t\\t} else {\\r\\n\\t\\t\\t\\t// We can roll into the provided existing position\\r\\n\\t\\t\\t\\t// We do not verify whether the target position has been created by the known minting hub in order\\r\\n\\t\\t\\t\\t// to allow positions to be rolled into future versions of the minting hub\\r\\n\\t\\t\\t\\ttargetCollateral.transferFrom(msg.sender, address(target), collDeposit);\\r\\n\\t\\t\\t\\ttarget.mint(msg.sender, mint);\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tofd.burnFrom(msg.sender, repay); // repay the flash loan\\r\\n\\t\\temit Roll(address(source), collWithdraw, repay, address(target), collDeposit, mint);\\r\\n\\t}\\r\\n\\r\\n\\tmodifier own(IPosition pos) {\\r\\n\\t\\tif (Ownable(address(pos)).owner() != msg.sender) revert NotOwner(address(pos));\\r\\n\\t\\t_;\\r\\n\\t}\\r\\n\\r\\n\\tmodifier valid(IPosition pos) {\\r\\n\\t\\tif (ofd.getPositionParent(address(pos)) == address(0x0)) revert NotPosition(address(pos));\\r\\n\\t\\t_;\\r\\n\\t}\\r\\n}\\r\\n\\r\\ninterface IMintingHub {\\r\\n\\tfunction clone(address owner, address parent, uint256 _initialCollateral, uint256 _initialMint, uint40 expiration) external returns (address);\\r\\n}\\r\\n\",\"keccak256\":\"0x43f34cbdb41484be2ddda665b1c804dce9522aadc90e8ea30022d59d38db9194\",\"license\":\"MIT\"},\"contracts/interface/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n/**\\r\\n *\\r\\n * Copyright (c) 2016-2019 zOS Global Limited\\r\\n *\\r\\n */\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\\r\\n * the optional functions; to access them see `ERC20Detailed`.\\r\\n */\\r\\n\\r\\ninterface IERC20 {\\r\\n    function name() external view returns (string memory);\\r\\n\\r\\n    function symbol() external view returns (string memory);\\r\\n\\r\\n    function decimals() external view returns (uint8);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens in existence.\\r\\n     */\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens owned by `account`.\\r\\n     */\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\r\\n     *\\r\\n     * Returns always true. Throws error on failure.\\r\\n     *\\r\\n     * Emits a `Transfer` event.\\r\\n     */\\r\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remaining number of tokens that `spender` will be\\r\\n     * allowed to spend on behalf of `owner` through `transferFrom`. This is\\r\\n     * zero by default.\\r\\n     *\\r\\n     * This value can change when `approve` or `transferFrom` are called.\\r\\n     */\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * > Beware that changing an allowance with this method brings the risk\\r\\n     * that someone may use both the old and the new allowance by unfortunate\\r\\n     * transaction ordering. One possible solution to mitigate this race\\r\\n     * condition is to first reduce the spender's allowance to 0 and set the\\r\\n     * desired value afterwards:\\r\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n     *\\r\\n     * Emits an `Approval` event.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\r\\n     * allowance mechanism. `amount` is then deducted from the caller's\\r\\n     * allowance.\\r\\n     *\\r\\n     * Returns always true. Throws error on failure.\\r\\n     *\\r\\n     * Emits a `Transfer` event.\\r\\n     */\\r\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n     * another (`to`).\\r\\n     *\\r\\n     * Note that `value` may be zero.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n     * a call to `approve`. `value` is the new allowance.\\r\\n     */\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n}\\r\\n\",\"keccak256\":\"0x8a0a84b5d4e32903d24aec090ab3f22f12623f5817d5d2b03596637b9e19b03a\",\"license\":\"MIT\"},\"contracts/interface/IOracleFreeDollar.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./IERC20.sol\\\";\\r\\nimport \\\"./IReserve.sol\\\";\\r\\n\\r\\ninterface IOracleFreeDollar is IERC20 {\\r\\n    function suggestMinter(address _minter, uint256 _applicationPeriod, uint256 _applicationFee, string calldata _message) external;\\r\\n\\r\\n    function registerPosition(address position) external;\\r\\n\\r\\n    function denyMinter(address minter, address[] calldata helpers, string calldata message) external;\\r\\n\\r\\n    function reserve() external view returns (IReserve);\\r\\n\\r\\n    function minterReserve() external view returns (uint256);\\r\\n\\r\\n    function calculateAssignedReserve(uint256 mintedAmount, uint32 _reservePPM) external view returns (uint256);\\r\\n\\r\\n    function calculateFreedAmount(uint256 amountExcludingReserve, uint32 reservePPM) external view returns (uint256);\\r\\n\\r\\n    function equity() external view returns (uint256);\\r\\n\\r\\n    function isMinter(address minter) external view returns (bool);\\r\\n\\r\\n    function getPositionParent(address position) external view returns (address);\\r\\n\\r\\n    function mint(address target, uint256 amount) external;\\r\\n\\r\\n    function mintWithReserve(address target, uint256 amount, uint32 reservePPM, uint32 feePPM) external;\\r\\n\\r\\n    function burnFrom(address target, uint256 amount) external;\\r\\n\\r\\n    function burnWithoutReserve(uint256 amountIncludingReserve, uint32 reservePPM) external;\\r\\n\\r\\n    function burnFromWithReserve(address payer, uint256 targetTotalBurnAmount, uint32 _reservePPM) external returns (uint256);\\r\\n\\r\\n    function burnWithReserve(uint256 amountExcludingReserve, uint32 reservePPM) external returns (uint256);\\r\\n\\r\\n    function coverLoss(address source, uint256 amount) external;\\r\\n\\r\\n    function collectProfits(address source, uint256 _amount) external;\\r\\n}\\r\\n\",\"keccak256\":\"0xa03232a309b668853f7a24b261969c370ae237346a389c2546f5009f59654af7\",\"license\":\"MIT\"},\"contracts/interface/IPosition.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./IERC20.sol\\\";\\r\\n\\r\\ninterface IPosition {\\r\\n\\r\\n    function initialize(address parent, uint40 _expiration) external;\\r\\n\\r\\n    function hub() external view returns(address);\\r\\n\\r\\n    function original() external view returns (address);\\r\\n\\r\\n    function collateral() external view returns (IERC20);\\r\\n\\r\\n    function minimumCollateral() external view returns (uint256);\\r\\n\\r\\n    function challengePeriod() external view returns (uint40);\\r\\n\\r\\n    function expiration() external view returns (uint40);\\r\\n\\r\\n    function price() external view returns (uint256);\\r\\n\\r\\n    function deny(address[] calldata helpers, string calldata message) external;\\r\\n\\r\\n    function mint(address target, uint256 amount) external;\\r\\n\\r\\n    function repay(uint256 amount) external returns (uint256);\\r\\n\\r\\n    function adjust(uint256 newMinted, uint256 newCollateral, uint256 newPrice) external;\\r\\n\\r\\n    function minted() external view returns (uint256);\\r\\n\\r\\n    function availableForMinting() external view returns (uint256);\\r\\n\\r\\n    function reserveContribution() external view returns (uint24);\\r\\n\\r\\n    function withdrawCollateral(address target, uint256 amount) external;\\r\\n\\r\\n    function getUsableMint(uint256 totalMint, bool beforeFees) external view returns (uint256);\\r\\n\\r\\n    function getMintAmount(uint256 usableMint) external view returns (uint256);\\r\\n\\r\\n    function challengeData() external view returns (uint256 liqPrice, uint40 phase);\\r\\n\\r\\n    function notifyChallengeStarted(uint256 size) external;\\r\\n\\r\\n    function notifyChallengeAverted(uint256 size) external;\\r\\n\\r\\n    function notifyChallengeSucceeded(address _bidder, uint256 _size) external returns (address, uint256, uint256, uint32);\\r\\n\\r\\n    function forceSale(address buyer, uint256 collAmount, uint256 proceeds) external;\\r\\n\\r\\n}\\r\\n\",\"keccak256\":\"0x5b3603d0fc044697335958a279765f7ef61e4c8e0c102adacc6a10903f2c26ea\",\"license\":\"MIT\"},\"contracts/interface/IReserve.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./IERC20.sol\\\";\\r\\n\\r\\ninterface IReserve is IERC20 {\\r\\n   function invest(uint256 amount, uint256 expected) external returns (uint256);\\r\\n   function checkQualified(address sender, address[] calldata helpers) external view;\\r\\n}\",\"keccak256\":\"0xa0ec8a4b3c8b5320aca82d7a7a8e9910fd31f03cf44653031474821412cdc1cf\",\"license\":\"MIT\"},\"contracts/utils/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n//\\r\\n// From https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol\\r\\n//\\r\\n// Modifications:\\r\\n// - Replaced Context._msgSender() with msg.sender\\r\\n// - Made leaner\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Contract module which provides a basic access control mechanism, where\\r\\n * there is an account (an owner) that can be granted exclusive access to\\r\\n * specific functions.\\r\\n *\\r\\n * By default, the owner account will be the one that deploys the contract. This\\r\\n * can later be changed with {transferOwnership}.\\r\\n */\\r\\ncontract Ownable {\\r\\n    address public owner;\\r\\n\\r\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n    error NotOwner();\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Can only be called by the current owner.\\r\\n     */\\r\\n    function transferOwnership(address newOwner) public onlyOwner {\\r\\n        _setOwner(newOwner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Internal function without access restriction.\\r\\n     */\\r\\n    function _setOwner(address newOwner) internal {\\r\\n        require(newOwner != address(0x0));\\r\\n        address oldOwner = owner;\\r\\n        owner = newOwner;\\r\\n        emit OwnershipTransferred(oldOwner, newOwner);\\r\\n    }\\r\\n\\r\\n    function _requireOwner(address sender) internal view {\\r\\n        if (owner != sender) revert NotOwner();\\r\\n    }\\r\\n\\r\\n    modifier onlyOwner() {\\r\\n        _requireOwner(msg.sender);\\r\\n        _;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xc01cb6af7c008d3649f89fb50b802c994f538c380a36b883d22f8eefa1cfe03f\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5060405161129c38038061129c83398101604081905261002f91610054565b600080546001600160a01b0319166001600160a01b0392909216919091179055610084565b60006020828403121561006657600080fd5b81516001600160a01b038116811461007d57600080fd5b9392505050565b611209806100936000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c8063566dfba8146100515780635e871b541461007657806389523c331461008b578063c2a1c5061461009e575b600080fd5b61006461005f366004610f91565b6100b1565b60405190815260200160405180910390f35b610089610084366004610fc8565b610233565b005b610089610099366004611013565b6105a5565b6100896100ac366004611085565b610e22565b600080826001600160a01b0316634f02c4206040518163ffffffff1660e01b8152600401602060405180830381865afa1580156100f2573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061011691906110be565b90506000836001600160a01b0316633a7c29fb6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610158573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061017c91906110d7565b905081600003610190575060009392505050565b60008054604051633824f22960e21b81526004810185905262ffffff841660248201526001600160a01b039091169063e093c8a490604401602060405180830381865afa1580156101e5573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061020991906110be565b905082810361021b5750909392505050565b61022a83836000808786610e8d565b95945050505050565b816001600160a01b031663d8dfeb456040518163ffffffff1660e01b8152600401602060405180830381865afa158015610271573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061029591906110fc565b6001600160a01b0316836001600160a01b031663d8dfeb456040518163ffffffff1660e01b8152600401602060405180830381865afa1580156102dc573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061030091906110fc565b6001600160a01b03161461031357600080fd5b600061031e846100b1565b604051634ef17bcb60e11b8152600481018290529091506000906001600160a01b03851690639de2f79690602401602060405180830381865afa158015610369573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061038d91906110be565b90506000856001600160a01b031663d8dfeb456040518163ffffffff1660e01b8152600401602060405180830381865afa1580156103cf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103f391906110fc565b6040516370a0823160e01b81526001600160a01b03888116600483015291909116906370a0823190602401602060405180830381865afa15801561043b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061045f91906110be565b90506000856001600160a01b031663a035b1fe6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156104a1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104c591906110be565b90506000816001816104df87670de0b6b3a764000061112f565b6104e9919061114c565b6104f3919061115f565b6104fd9190611172565b90508281111561058c57829050670de0b6b3a7640000876001600160a01b031663a035b1fe6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610551573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061057591906110be565b61057f908361112f565b6105899190611172565b93505b61059b8886858a88868c6105a5565b5050505050505050565b6000805460405163aa5dd7f160e01b81526001600160a01b03808b1660048301528a9392169063aa5dd7f190602401602060405180830381865afa1580156105f1573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061061591906110fc565b6001600160a01b03160361064c57604051631a71b9a760e01b81526001600160a01b03821660048201526024015b60405180910390fd5b6000805460405163aa5dd7f160e01b81526001600160a01b038089166004830152889392169063aa5dd7f190602401602060405180830381865afa158015610698573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106bc91906110fc565b6001600160a01b0316036106ee57604051631a71b9a760e01b81526001600160a01b0382166004820152602401610643565b88336001600160a01b0316816001600160a01b0316638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610737573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061075b91906110fc565b6001600160a01b03161461078d5760405163245aecd360e01b81526001600160a01b0382166004820152602401610643565b6000546040516340c10f1960e01b8152306004820152602481018b90526001600160a01b03909116906340c10f1990604401600060405180830381600087803b1580156107d957600080fd5b505af11580156107ed573d6000803e3d6000fd5b5050604051631b8fec7360e11b8152600481018c90526001600160a01b038d16925063371fd8e691506024016020604051808303816000875af1158015610838573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061085c91906110be565b5060405163350c35e960e01b8152336004820152602481018990526001600160a01b038b169063350c35e990604401600060405180830381600087803b1580156108a557600080fd5b505af11580156108b9573d6000803e3d6000fd5b505050506000861115610d52576000876001600160a01b031663d8dfeb456040518163ffffffff1660e01b8152600401602060405180830381865afa158015610906573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061092a91906110fc565b9050336001600160a01b0316886001600160a01b0316638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610974573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061099891906110fc565b6001600160a01b0316141580610a1d5750876001600160a01b0316634665096d6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156109e7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a0b9190611194565b64ffffffffff168564ffffffffff1614155b15610c75576040516323b872dd60e01b8152336004820152306024820152604481018790526001600160a01b038216906323b872dd906064016020604051808303816000875af1158015610a75573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a9991906111b1565b50806001600160a01b031663095ea7b3896001600160a01b031663365a86fc6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610ae7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b0b91906110fc565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602481018990526044016020604051808303816000875af1158015610b58573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b7c91906111b1565b50876001600160a01b031663365a86fc6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610bbb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bdf91906110fc565b604051634ec7f95360e11b81523360048201526001600160a01b038a8116602483015260448201899052606482018a905264ffffffffff881660848301529190911690639d8ff2a69060a4016020604051808303816000875af1158015610c4a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c6e91906110fc565b9750610d50565b6040516323b872dd60e01b81523360048201526001600160a01b038981166024830152604482018890528216906323b872dd906064016020604051808303816000875af1158015610cca573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cee91906111b1565b506040516340c10f1960e01b8152336004820152602481018890526001600160a01b038916906340c10f1990604401600060405180830381600087803b158015610d3757600080fd5b505af1158015610d4b573d6000803e3d6000fd5b505050505b505b60005460405163079cc67960e41b8152336004820152602481018b90526001600160a01b03909116906379cc679090604401600060405180830381600087803b158015610d9e57600080fd5b505af1158015610db2573d6000803e3d6000fd5b5050604080516001600160a01b038e81168252602082018d90528183018e90528b1660608201526080810189905260a081018a905290517f8ba6e48d27ab46e18ba0971bb468a2e47a7fac577d846de107eb2fe948c2f59593509081900360c0019150a150505050505050505050565b610e898282836001600160a01b0316634665096d6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610e65573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906100849190611194565b5050565b6000806002610e9c858861114c565b610ea69190611172565b9050858103610eb85783915050610f6f565b60008054604051633824f22960e21b81526004810184905262ffffff8a1660248201526001600160a01b039091169063e093c8a490604401602060405180830381865afa158015610f0d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f3191906110be565b9050888103610f4257509050610f6f565b88811015610f6157610f58898984848989610e8d565b92505050610f6f565b610f58898989898686610e8d565b9695505050505050565b6001600160a01b0381168114610f8e57600080fd5b50565b600060208284031215610fa357600080fd5b8135610fae81610f79565b9392505050565b64ffffffffff81168114610f8e57600080fd5b600080600060608486031215610fdd57600080fd5b8335610fe881610f79565b92506020840135610ff881610f79565b9150604084013561100881610fb5565b809150509250925092565b600080600080600080600060e0888a03121561102e57600080fd5b873561103981610f79565b96506020880135955060408801359450606088013561105781610f79565b93506080880135925060a0880135915060c088013561107581610fb5565b8091505092959891949750929550565b6000806040838503121561109857600080fd5b82356110a381610f79565b915060208301356110b381610f79565b809150509250929050565b6000602082840312156110d057600080fd5b5051919050565b6000602082840312156110e957600080fd5b815162ffffff81168114610fae57600080fd5b60006020828403121561110e57600080fd5b8151610fae81610f79565b634e487b7160e01b600052601160045260246000fd5b808202811582820484141761114657611146611119565b92915050565b8082018082111561114657611146611119565b8181038181111561114657611146611119565b60008261118f57634e487b7160e01b600052601260045260246000fd5b500490565b6000602082840312156111a657600080fd5b8151610fae81610fb5565b6000602082840312156111c357600080fd5b81518015158114610fae57600080fdfea26469706673582212205efef3f0f47baa6995ae30fcd893e08737f21715101ed6e6cf4d6892fcf9b38a64736f6c63430008140033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061004c5760003560e01c8063566dfba8146100515780635e871b541461007657806389523c331461008b578063c2a1c5061461009e575b600080fd5b61006461005f366004610f91565b6100b1565b60405190815260200160405180910390f35b610089610084366004610fc8565b610233565b005b610089610099366004611013565b6105a5565b6100896100ac366004611085565b610e22565b600080826001600160a01b0316634f02c4206040518163ffffffff1660e01b8152600401602060405180830381865afa1580156100f2573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061011691906110be565b90506000836001600160a01b0316633a7c29fb6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610158573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061017c91906110d7565b905081600003610190575060009392505050565b60008054604051633824f22960e21b81526004810185905262ffffff841660248201526001600160a01b039091169063e093c8a490604401602060405180830381865afa1580156101e5573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061020991906110be565b905082810361021b5750909392505050565b61022a83836000808786610e8d565b95945050505050565b816001600160a01b031663d8dfeb456040518163ffffffff1660e01b8152600401602060405180830381865afa158015610271573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061029591906110fc565b6001600160a01b0316836001600160a01b031663d8dfeb456040518163ffffffff1660e01b8152600401602060405180830381865afa1580156102dc573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061030091906110fc565b6001600160a01b03161461031357600080fd5b600061031e846100b1565b604051634ef17bcb60e11b8152600481018290529091506000906001600160a01b03851690639de2f79690602401602060405180830381865afa158015610369573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061038d91906110be565b90506000856001600160a01b031663d8dfeb456040518163ffffffff1660e01b8152600401602060405180830381865afa1580156103cf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103f391906110fc565b6040516370a0823160e01b81526001600160a01b03888116600483015291909116906370a0823190602401602060405180830381865afa15801561043b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061045f91906110be565b90506000856001600160a01b031663a035b1fe6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156104a1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104c591906110be565b90506000816001816104df87670de0b6b3a764000061112f565b6104e9919061114c565b6104f3919061115f565b6104fd9190611172565b90508281111561058c57829050670de0b6b3a7640000876001600160a01b031663a035b1fe6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610551573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061057591906110be565b61057f908361112f565b6105899190611172565b93505b61059b8886858a88868c6105a5565b5050505050505050565b6000805460405163aa5dd7f160e01b81526001600160a01b03808b1660048301528a9392169063aa5dd7f190602401602060405180830381865afa1580156105f1573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061061591906110fc565b6001600160a01b03160361064c57604051631a71b9a760e01b81526001600160a01b03821660048201526024015b60405180910390fd5b6000805460405163aa5dd7f160e01b81526001600160a01b038089166004830152889392169063aa5dd7f190602401602060405180830381865afa158015610698573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106bc91906110fc565b6001600160a01b0316036106ee57604051631a71b9a760e01b81526001600160a01b0382166004820152602401610643565b88336001600160a01b0316816001600160a01b0316638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610737573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061075b91906110fc565b6001600160a01b03161461078d5760405163245aecd360e01b81526001600160a01b0382166004820152602401610643565b6000546040516340c10f1960e01b8152306004820152602481018b90526001600160a01b03909116906340c10f1990604401600060405180830381600087803b1580156107d957600080fd5b505af11580156107ed573d6000803e3d6000fd5b5050604051631b8fec7360e11b8152600481018c90526001600160a01b038d16925063371fd8e691506024016020604051808303816000875af1158015610838573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061085c91906110be565b5060405163350c35e960e01b8152336004820152602481018990526001600160a01b038b169063350c35e990604401600060405180830381600087803b1580156108a557600080fd5b505af11580156108b9573d6000803e3d6000fd5b505050506000861115610d52576000876001600160a01b031663d8dfeb456040518163ffffffff1660e01b8152600401602060405180830381865afa158015610906573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061092a91906110fc565b9050336001600160a01b0316886001600160a01b0316638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610974573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061099891906110fc565b6001600160a01b0316141580610a1d5750876001600160a01b0316634665096d6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156109e7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a0b9190611194565b64ffffffffff168564ffffffffff1614155b15610c75576040516323b872dd60e01b8152336004820152306024820152604481018790526001600160a01b038216906323b872dd906064016020604051808303816000875af1158015610a75573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a9991906111b1565b50806001600160a01b031663095ea7b3896001600160a01b031663365a86fc6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610ae7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b0b91906110fc565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602481018990526044016020604051808303816000875af1158015610b58573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b7c91906111b1565b50876001600160a01b031663365a86fc6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610bbb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bdf91906110fc565b604051634ec7f95360e11b81523360048201526001600160a01b038a8116602483015260448201899052606482018a905264ffffffffff881660848301529190911690639d8ff2a69060a4016020604051808303816000875af1158015610c4a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c6e91906110fc565b9750610d50565b6040516323b872dd60e01b81523360048201526001600160a01b038981166024830152604482018890528216906323b872dd906064016020604051808303816000875af1158015610cca573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cee91906111b1565b506040516340c10f1960e01b8152336004820152602481018890526001600160a01b038916906340c10f1990604401600060405180830381600087803b158015610d3757600080fd5b505af1158015610d4b573d6000803e3d6000fd5b505050505b505b60005460405163079cc67960e41b8152336004820152602481018b90526001600160a01b03909116906379cc679090604401600060405180830381600087803b158015610d9e57600080fd5b505af1158015610db2573d6000803e3d6000fd5b5050604080516001600160a01b038e81168252602082018d90528183018e90528b1660608201526080810189905260a081018a905290517f8ba6e48d27ab46e18ba0971bb468a2e47a7fac577d846de107eb2fe948c2f59593509081900360c0019150a150505050505050505050565b610e898282836001600160a01b0316634665096d6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610e65573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906100849190611194565b5050565b6000806002610e9c858861114c565b610ea69190611172565b9050858103610eb85783915050610f6f565b60008054604051633824f22960e21b81526004810184905262ffffff8a1660248201526001600160a01b039091169063e093c8a490604401602060405180830381865afa158015610f0d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f3191906110be565b9050888103610f4257509050610f6f565b88811015610f6157610f58898984848989610e8d565b92505050610f6f565b610f58898989898686610e8d565b9695505050505050565b6001600160a01b0381168114610f8e57600080fd5b50565b600060208284031215610fa357600080fd5b8135610fae81610f79565b9392505050565b64ffffffffff81168114610f8e57600080fd5b600080600060608486031215610fdd57600080fd5b8335610fe881610f79565b92506020840135610ff881610f79565b9150604084013561100881610fb5565b809150509250925092565b600080600080600080600060e0888a03121561102e57600080fd5b873561103981610f79565b96506020880135955060408801359450606088013561105781610f79565b93506080880135925060a0880135915060c088013561107581610fb5565b8091505092959891949750929550565b6000806040838503121561109857600080fd5b82356110a381610f79565b915060208301356110b381610f79565b809150509250929050565b6000602082840312156110d057600080fd5b5051919050565b6000602082840312156110e957600080fd5b815162ffffff81168114610fae57600080fd5b60006020828403121561110e57600080fd5b8151610fae81610f79565b634e487b7160e01b600052601160045260246000fd5b808202811582820484141761114657611146611119565b92915050565b8082018082111561114657611146611119565b8181038181111561114657611146611119565b60008261118f57634e487b7160e01b600052601260045260246000fd5b500490565b6000602082840312156111a657600080fd5b8151610fae81610fb5565b6000602082840312156111c357600080fd5b81518015158114610fae57600080fdfea26469706673582212205efef3f0f47baa6995ae30fcd893e08737f21715101ed6e6cf4d6892fcf9b38a64736f6c63430008140033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "roll(address,uint256,uint256,address,uint256,uint256,uint40)": {
        "params": {
          "collDeposit": "The amount of collateral to be send from msg.sender to the target position.",
          "collWithdraw": "Collateral to move from the source position to the msg.sender .",
          "expiration": "The desired expiration date for the target position.",
          "mint": "The amount to be minted from the target position using collateral from msg.sender.",
          "repay": "The amount to flash loan in order to repay the source position and free up some or all collateral.",
          "source": "The source position, must be owned by the msg.sender .",
          "target": "The target position. If not owned by msg.sender or if it does not have the desired expiration,               it is cloned to create a position owned by the msg.sender."
        }
      }
    },
    "title": "PositionRoller Helper to roll over a debt from an old position to a new one. Both positions should have the same collateral. Otherwise, it does not make much sense.",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "findRepaymentAmount(address)": {
        "notice": "Doing a binary search is not very efficient, but guaranteed to return a valid result without rounding errors. To save gas costs, the frontend can also call this and other methods to calculate the right parameters and then call 'roll' directly."
      },
      "roll(address,uint256,uint256,address,uint256,uint256,uint40)": {
        "notice": "Rolls the source position into the target position using a flash loan. Both the source and the target position must recognize this roller. It is the responsibility of the caller to ensure that both positions are valid contracts."
      },
      "rollFully(address,address)": {
        "notice": "Convenience method to roll and old position into a new one. Pre-condition is an allowance for the roller to spend the collateral asset on behalf of the caller, i.e. one should set collateral.approve(roller, collateral.balanceOf(sourcePosition)); The following is assumed: - If the limit of the target position permits, the user wants to roll everything - The user does not want to add additional collateral, but excess collateral is returned - If not enough can be minted in the new position, it is ok for the roller to use OFD from the msg.sender"
      },
      "rollFullyWithExpiration(address,address,uint40)": {
        "notice": "Like rollFully, but with a custom expiration date for the new position."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 5231,
        "contract": "contracts/PositionRoller.sol:PositionRoller",
        "label": "ofd",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(IOracleFreeDollar)6772"
      }
    ],
    "types": {
      "t_contract(IOracleFreeDollar)6772": {
        "encoding": "inplace",
        "label": "contract IOracleFreeDollar",
        "numberOfBytes": "20"
      }
    }
  }
}