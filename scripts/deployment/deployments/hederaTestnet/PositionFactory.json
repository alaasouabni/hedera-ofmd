{
  "address": "0x7F1Cbf264E60D844f60BdFb22314389cDD50F292",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_parent",
          "type": "address"
        }
      ],
      "name": "clonePosition",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_ofd",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_collateral",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_minCollateral",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_initialLimit",
          "type": "uint256"
        },
        {
          "internalType": "uint40",
          "name": "_initPeriod",
          "type": "uint40"
        },
        {
          "internalType": "uint40",
          "name": "_duration",
          "type": "uint40"
        },
        {
          "internalType": "uint40",
          "name": "_challengePeriod",
          "type": "uint40"
        },
        {
          "internalType": "uint24",
          "name": "_riskPremiumPPM",
          "type": "uint24"
        },
        {
          "internalType": "uint256",
          "name": "_liqPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint24",
          "name": "_reserve",
          "type": "uint24"
        }
      ],
      "name": "createNewPosition",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x634e656576bd68ae355f89346c0688dbf9b755c3640e6ed2421d41399a051a3d",
  "receipt": {
    "to": null,
    "from": "0x22a2Aaa43C8Ecedd91d857B5d0779211aFba1379",
    "contractAddress": "0x7F1Cbf264E60D844f60BdFb22314389cDD50F292",
    "transactionIndex": 15,
    "gasUsed": "3105563",
    "logsBloom": "0x
    "blockHash": "0x35784135a55a870fb2966980f6f213a48a0fcf474ed22f65bc0d102b11c46871",
    "transactionHash": "0x634e656576bd68ae355f89346c0688dbf9b755c3640e6ed2421d41399a051a3d",
    "logs": [],
    "blockNumber": 25851427,
    "cumulativeGasUsed": "3105563",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "6eaf3ef7f7a823d8899d101cad9f8e1a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_parent\",\"type\":\"address\"}],\"name\":\"clonePosition\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_ofd\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_collateral\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_minCollateral\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_initialLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint40\",\"name\":\"_initPeriod\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"_duration\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"_challengePeriod\",\"type\":\"uint40\"},{\"internalType\":\"uint24\",\"name\":\"_riskPremiumPPM\",\"type\":\"uint24\"},{\"internalType\":\"uint256\",\"name\":\"_liqPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint24\",\"name\":\"_reserve\",\"type\":\"uint24\"}],\"name\":\"createNewPosition\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"clonePosition(address)\":{\"params\":{\"_parent\":\"address of the position we want to clone\"},\"returns\":{\"_0\":\"address of the newly created clone position\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"clonePosition(address)\":{\"notice\":\"clone an existing position. This can be a clone of another clone, or an original position.\"},\"createNewPosition(address,address,address,uint256,uint256,uint40,uint40,uint40,uint24,uint256,uint24)\":{\"notice\":\"Create a completely new position in a newly deployed contract. Must be called through minting hub to be recognized as valid position.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/PositionFactory.sol\":\"PositionFactory\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/Position.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport './utils/Ownable.sol';\\r\\nimport './utils/MathUtil.sol';\\r\\n\\r\\nimport './interface/IERC20.sol';\\r\\nimport './interface/ILeadrate.sol';\\r\\nimport './interface/IReserve.sol';\\r\\nimport './interface/IOracleFreeDollar.sol';\\r\\n\\r\\nimport './interface/IPosition.sol';\\r\\n\\r\\n/**\\r\\n * @title Position\\r\\n * @notice A collateralized minting position.\\r\\n */\\r\\ncontract Position is Ownable, IPosition, MathUtil {\\r\\n\\t/**\\r\\n     * @notice Note that this contract is intended to be cloned. All clones will share the same values for\\r\\n     * the constant and immutable fields, but have their own values for the other fields.\\r\\n     */\\r\\n\\r\\n\\t/**\\r\\n     * @notice The ofd price per unit of the collateral below which challenges succeed, (36 - collateral.decimals) decimals\\r\\n     */\\r\\n\\tuint256 public price;\\r\\n\\r\\n\\t/**\\r\\n     * @notice Net minted amount, including reserve.\\r\\n     */\\r\\n\\tuint256 public minted;\\r\\n\\r\\n\\t/**\\r\\n     * @notice How much has been minted in total. This variable is only used in the parent position.\\r\\n     */\\r\\n\\tuint256 private totalMinted;\\r\\n\\r\\n\\tuint256 public immutable limit;\\r\\n\\r\\n\\t/**\\r\\n     * @notice Amount of the collateral that is currently under a challenge.\\r\\n     * Used to figure out whether there are pending challenges.\\r\\n     */\\r\\n\\tuint256 public challengedAmount;\\r\\n\\r\\n\\t/**\\r\\n     * @notice Challenge period in seconds.\\r\\n     */\\r\\n\\tuint40 public immutable challengePeriod;\\r\\n\\r\\n\\t/**\\r\\n     * @notice Timestamp when minting can start and the position no longer denied.\\r\\n     */\\r\\n\\tuint40 public immutable start;\\r\\n\\r\\n\\t/**\\r\\n     * @notice End of the latest cooldown. If this is in the future, minting is suspended.\\r\\n     */\\r\\n\\tuint40 public cooldown;\\r\\n\\r\\n\\t/**\\r\\n     * @notice Timestamp of the expiration of the position. After expiration, challenges cannot be averted\\r\\n     * any more. This is also the basis for fee calculations.\\r\\n     */\\r\\n\\tuint40 public expiration;\\r\\n\\r\\n\\tbool private closed;\\r\\n\\r\\n\\t/**\\r\\n     * @notice The original position to help identifying clones.\\r\\n     */\\r\\n\\taddress public immutable original;\\r\\n\\r\\n\\t/**\\r\\n     * @notice Pointer to the minting hub.\\r\\n     */\\r\\n\\taddress public immutable hub;\\r\\n\\r\\n\\t/**\\r\\n     * @notice The OracleFreeDollar contract.\\r\\n     */\\r\\n\\tIOracleFreeDollar public immutable ofd;\\r\\n\\r\\n\\t/**\\r\\n     * @notice The collateral token.\\r\\n     */\\r\\n\\tIERC20 public immutable override collateral;\\r\\n\\r\\n\\t/**\\r\\n     * @notice Minimum acceptable collateral amount to prevent dust.\\r\\n     */\\r\\n\\tuint256 public immutable override minimumCollateral;\\r\\n\\r\\n\\t/**\\r\\n     * @notice The interest in parts per million per year that is deducted when minting OracleFreeDollars.\\r\\n     * To be paid upfront.\\r\\n     */\\r\\n\\tuint24 public immutable riskPremiumPPM;\\r\\n\\r\\n\\t/**\\r\\n     * @notice The reserve contribution in parts per million of the minted amount.\\r\\n     */\\r\\n\\tuint24 public immutable reserveContribution;\\r\\n\\r\\n\\tevent MintingUpdate(uint256 collateral, uint256 price, uint256 minted);\\r\\n\\tevent PositionDenied(address indexed sender, string message); // emitted if closed by governance\\r\\n\\r\\n\\terror InsufficientCollateral(uint256 needed, uint256 available);\\r\\n\\terror TooLate();\\r\\n\\terror RepaidTooMuch(uint256 excess);\\r\\n\\terror LimitExceeded(uint256 tried, uint256 available);\\r\\n\\terror ChallengeTooSmall();\\r\\n\\terror Expired(uint40 time, uint40 expiration);\\r\\n\\terror Alive();\\r\\n\\terror Closed();\\r\\n\\terror Hot();\\r\\n\\terror Challenged();\\r\\n\\terror NotHub();\\r\\n\\terror NotOriginal();\\r\\n\\terror InvalidExpiration();\\r\\n\\terror AlreadyInitialized();\\r\\n\\r\\n\\tmodifier alive() {\\r\\n\\t\\tif (block.timestamp >= expiration) revert Expired(uint40(block.timestamp), expiration);\\r\\n\\t\\t_;\\r\\n\\t}\\r\\n\\r\\n\\t// requires that the position has always been backed by a minimal amount of collateral\\r\\n\\tmodifier backed() {\\r\\n\\t\\tif (isClosed()) revert Closed();\\r\\n\\t\\t_;\\r\\n\\t}\\r\\n\\r\\n\\tmodifier expired() {\\r\\n\\t\\tif (block.timestamp < expiration) revert Alive();\\r\\n\\t\\t_;\\r\\n\\t}\\r\\n\\r\\n\\tmodifier noCooldown() {\\r\\n\\t\\tif (block.timestamp <= cooldown) revert Hot();\\r\\n\\t\\t_;\\r\\n\\t}\\r\\n\\r\\n\\tmodifier noChallenge() {\\r\\n\\t\\tif (challengedAmount > 0) revert Challenged();\\r\\n\\t\\t_;\\r\\n\\t}\\r\\n\\r\\n\\tmodifier onlyHub() {\\r\\n\\t\\tif (msg.sender != address(hub)) revert NotHub();\\r\\n\\t\\t_;\\r\\n\\t}\\r\\n\\r\\n\\tmodifier ownerOrRoller() {\\r\\n\\t\\tif (msg.sender != address(IHub(hub).roller())) _requireOwner(msg.sender);\\r\\n\\t\\t_;\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n     * @dev See MintingHub.openPosition\\r\\n     */\\r\\n\\tconstructor(address _owner, address _hub, address _ofd, address _collateral,\\r\\n\\t\\tuint256 _minCollateral, uint256 _initialLimit,\\r\\n\\t\\tuint40 _initPeriod, uint40 _duration, uint40 _challengePeriod,\\r\\n\\t\\tuint24 _riskPremiumPPM, uint256 _liqPrice, uint24 _reservePPM) {\\r\\n\\t\\trequire(_initPeriod >= 5 days); // must be at least five days, recommended to use higher values\\r\\n\\t\\t_setOwner(_owner);\\r\\n\\t\\toriginal = address(this);\\r\\n\\t\\thub = _hub;\\r\\n\\t\\tofd = IOracleFreeDollar(_ofd);\\r\\n\\t\\tcollateral = IERC20(_collateral);\\r\\n\\t\\triskPremiumPPM = _riskPremiumPPM;\\r\\n\\t\\treserveContribution = _reservePPM;\\r\\n\\t\\tminimumCollateral = _minCollateral;\\r\\n\\t\\tchallengePeriod = _challengePeriod;\\r\\n\\t\\tstart = uint40(block.timestamp) + _initPeriod; // at least five days time to deny the position\\r\\n\\t\\tcooldown = start;\\r\\n\\t\\texpiration = start + _duration;\\r\\n\\t\\tlimit = _initialLimit;\\r\\n\\t\\t_setPrice(_liqPrice, _initialLimit);\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n     * Initialization method for clones.\\r\\n     * Can only be called once. Should be called immediately after creating the clone.\\r\\n     */\\r\\n\\tfunction initialize(address parent, uint40 _expiration) external onlyHub {\\r\\n\\t\\tif (expiration != 0) revert AlreadyInitialized();\\r\\n\\t\\tif (_expiration < block.timestamp || _expiration > Position(original).expiration()) revert InvalidExpiration(); // expiration must not be later than original\\r\\n\\t\\texpiration = _expiration;\\r\\n\\t\\tprice = Position(parent).price();\\r\\n\\t\\t_setOwner(hub);\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n     * Cloning a position is only allowed if the position is not challenged, not expired and not in cooldown.\\r\\n     */\\r\\n\\tfunction assertCloneable() external noChallenge noCooldown alive backed {}\\r\\n\\r\\n\\t/**\\r\\n     * Notify the original that some amount has been minted.\\r\\n     */\\r\\n\\tfunction notifyMint(uint256 mint_) external {\\r\\n\\t\\tif (ofd.getPositionParent(msg.sender) != hub) revert NotHub();\\r\\n\\t\\ttotalMinted += mint_;\\r\\n\\t}\\r\\n\\r\\n\\tfunction notifyRepaid(uint256 repaid_) external {\\r\\n\\t\\tif (ofd.getPositionParent(msg.sender) != hub) revert NotHub();\\r\\n\\t\\ttotalMinted -= repaid_;\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n     * Should only be called on the original position.\\r\\n     * Better use 'availableForMinting'.\\r\\n     */\\r\\n\\tfunction availableForClones() external view returns (uint256) {\\r\\n\\t\\t// reserve capacity for the original to the extent the owner provided collateral\\r\\n\\t\\tuint256 potential = (_collateralBalance() * price) / ONE_DEC18;\\r\\n\\t\\tuint256 unusedPotential = minted > potential ? 0 : potential - minted;\\r\\n\\t\\tif (totalMinted + unusedPotential >= limit) {\\r\\n\\t\\t\\treturn 0;\\r\\n\\t\\t} else {\\r\\n\\t\\t\\treturn limit - totalMinted - unusedPotential;\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n     * The amount available for minting in this position family.\\r\\n     *\\r\\n     * Does not check if positions are challenged, closed, or under cooldown.\\r\\n     */\\r\\n\\tfunction availableForMinting() public view returns (uint256) {\\r\\n\\t\\tif (address(this) == original) {\\r\\n\\t\\t\\treturn limit - totalMinted;\\r\\n\\t\\t} else {\\r\\n\\t\\t\\treturn Position(original).availableForClones();\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n     * @notice Qualified pool share holders can call this method to immediately expire a freshly proposed position.\\r\\n     */\\r\\n\\tfunction deny(address[] calldata helpers, string calldata message) external {\\r\\n\\t\\tif (block.timestamp >= start) revert TooLate();\\r\\n\\t\\tIReserve(ofd.reserve()).checkQualified(msg.sender, helpers);\\r\\n\\t\\t_close();\\r\\n\\t\\temit PositionDenied(msg.sender, message);\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n     * Closes the position by putting it into eternal cooldown.\\r\\n     * This allows the users to still withdraw the collateral that is left, but never to mint again.\\r\\n     */\\r\\n\\tfunction _close() internal {\\r\\n\\t\\tclosed = true;\\r\\n\\t}\\r\\n\\r\\n\\tfunction isClosed() public view returns (bool) {\\r\\n\\t\\treturn closed;\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n     * @notice This is how much the minter can actually use when minting OFD, with the rest being used\\r\\n     * assigned to the minter reserve or (if applicable) fees.\\r\\n     */\\r\\n\\tfunction getUsableMint(uint256 totalMint, bool afterFees) public view returns (uint256) {\\r\\n\\t\\tif (afterFees) {\\r\\n\\t\\t\\treturn (totalMint * (1000_000 - reserveContribution - calculateCurrentFee())) / 1000_000;\\r\\n\\t\\t} else {\\r\\n\\t\\t\\treturn (totalMint * (1000_000 - reserveContribution)) / 1000_000;\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n     * Returns the corresponding mint amount (disregarding the limit).\\r\\n     */\\r\\n\\tfunction getMintAmount(uint256 usableMint) external view returns (uint256) {\\r\\n\\t\\treturn usableMint == 0 ? 0 :(usableMint * 1000_000 - 1) / (1000_000 - reserveContribution - calculateCurrentFee()) + 1;\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n     * @notice \\\"All in one\\\" function to adjust the outstanding amount of OFD, the collateral amount,\\r\\n     * and the price in one transaction.\\r\\n     */\\r\\n\\tfunction adjust(uint256 newMinted, uint256 newCollateral, uint256 newPrice) external onlyOwner {\\r\\n\\t\\tuint256 colbal = _collateralBalance();\\r\\n\\t\\tif (newCollateral > colbal) {\\r\\n\\t\\t\\tcollateral.transferFrom(msg.sender, address(this), newCollateral - colbal);\\r\\n\\t\\t}\\r\\n\\t\\t// Must be called after collateral deposit, but before withdrawal\\r\\n\\t\\tif (newMinted < minted) {\\r\\n\\t\\t\\tofd.burnFromWithReserve(msg.sender, minted - newMinted, reserveContribution);\\r\\n\\t\\t\\t_notifyRepaid(minted - newMinted);\\r\\n\\t\\t}\\r\\n\\t\\tif (newCollateral < colbal) {\\r\\n\\t\\t\\t_withdrawCollateral(msg.sender, colbal - newCollateral);\\r\\n\\t\\t}\\r\\n\\t\\t// Must be called after collateral withdrawal\\r\\n\\t\\tif (newMinted > minted) {\\r\\n\\t\\t\\t_mint(msg.sender, newMinted - minted, newCollateral);\\r\\n\\t\\t}\\r\\n\\t\\tif (newPrice != price) {\\r\\n\\t\\t\\t_adjustPrice(newPrice);\\r\\n\\t\\t}\\r\\n\\t\\temit MintingUpdate(newCollateral, newPrice, newMinted);\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n     * @notice Allows the position owner to adjust the liquidation price as long as there is no pending challenge.\\r\\n     * Lowering the liquidation price can be done with immediate effect, given that there is enough collateral.\\r\\n     * Increasing the liquidation price triggers a cooldown period of 3 days, during which minting is suspended.\\r\\n     */\\r\\n\\tfunction adjustPrice(uint256 newPrice) public onlyOwner {\\r\\n\\t\\t_adjustPrice(newPrice);\\r\\n\\t\\temit MintingUpdate(_collateralBalance(), price, minted);\\r\\n\\t}\\r\\n\\r\\n\\tfunction _adjustPrice(uint256 newPrice) internal noChallenge alive backed {\\r\\n\\t\\tif (newPrice > price) {\\r\\n\\t\\t\\t_restrictMinting(3 days);\\r\\n\\t\\t} else {\\r\\n\\t\\t\\t_checkCollateral(_collateralBalance(), newPrice);\\r\\n\\t\\t}\\r\\n\\t\\t_setPrice(newPrice, minted + availableForMinting());\\r\\n\\t}\\r\\n\\r\\n\\tfunction _setPrice(uint256 newPrice, uint256 bounds) internal {\\r\\n\\t\\trequire(newPrice * minimumCollateral <= bounds * ONE_DEC18); // sanity check\\r\\n\\t\\tprice = newPrice;\\r\\n\\t}\\r\\n\\r\\n\\tfunction _collateralBalance() internal view returns (uint256) {\\r\\n\\t\\treturn IERC20(collateral).balanceOf(address(this));\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n     * @notice Mint OFD as long as there is no open challenge, the position is not subject to a cooldown,\\r\\n     * and there is sufficient collateral.\\r\\n     */\\r\\n\\tfunction mint(address target, uint256 amount) public ownerOrRoller {\\r\\n\\t\\tuint256 collateralBalance = _collateralBalance();\\r\\n\\t\\t_mint(target, amount, collateralBalance);\\r\\n\\t\\temit MintingUpdate(collateralBalance, price, minted);\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n     * The applicable upfront fee in ppm when minting more OracleFreeDollars based on the annual interest rate and\\r\\n     * the expiration of the position.\\r\\n     */\\r\\n\\tfunction calculateCurrentFee() public view returns (uint24) {\\r\\n\\t\\treturn calculateFee(expiration);\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n     * The applicable interest rate in ppm when minting more OracleFreeDollars.\\r\\n     * It consists on the globally valid interest plus an individual risk premium.\\r\\n     */\\r\\n\\tfunction annualInterestPPM() public view returns (uint24) {\\r\\n\\t\\treturn IHub(hub).rate().currentRatePPM() + riskPremiumPPM;\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n     * The fee in ppm when cloning and minting with the given expiration date.\\r\\n     */\\r\\n\\tfunction calculateFee(uint256 exp) public view returns (uint24) {\\r\\n\\t\\tuint256 time = block.timestamp < start ? start : block.timestamp;\\r\\n\\t\\tuint256 timePassed = exp - time;\\r\\n\\t\\t// Time resolution is in the range of minutes for typical interest rates.\\r\\n\\t\\tuint256 feePPM = (timePassed * annualInterestPPM()) / 365 days;\\r\\n\\t\\treturn uint24(feePPM > 1000000 ? 1000000 : feePPM); // fee cannot exceed 100%\\r\\n\\t}\\r\\n\\r\\n\\tfunction _mint(address target, uint256 amount, uint256 collateral_) internal noChallenge noCooldown alive backed {\\r\\n\\t\\tif (amount > availableForMinting()) revert LimitExceeded(amount, availableForMinting());\\r\\n\\t\\tPosition(original).notifyMint(amount);\\r\\n\\t\\tofd.mintWithReserve(target, amount, reserveContribution, calculateCurrentFee());\\r\\n\\t\\tminted += amount;\\r\\n\\t\\t_checkCollateral(collateral_, price);\\r\\n\\t}\\r\\n\\r\\n\\tfunction _restrictMinting(uint40 period) internal {\\r\\n\\t\\tuint40 horizon = uint40(block.timestamp) + period;\\r\\n\\t\\tif (horizon > cooldown) {\\r\\n\\t\\t\\tcooldown = horizon;\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n     * @notice Repay some OFD. If too much is repaid, the call fails.\\r\\n     * It is possible to repay while there are challenges, but the collateral is locked until all is clear again.\\r\\n     *\\r\\n     * The repaid amount should fulfill the following equation in order to close the position,\\r\\n     * i.e. bring the minted amount to 0:\\r\\n     * minted = amount + ofd.calculateAssignedReserve(amount, reservePPM)\\r\\n     *\\r\\n     * Under normal circumstances, this implies:\\r\\n     * amount = minted * (1000000 - reservePPM)\\r\\n     *\\r\\n     * E.g. if minted is 50 and reservePPM is 200000, it is necessary to repay 40 to be able to close the position.\\r\\n     */\\r\\n\\tfunction repay(uint256 amount) public returns (uint256) {\\r\\n\\t\\tIERC20(ofd).transferFrom(msg.sender, address(this), amount);\\r\\n\\t\\tuint256 actuallyRepaid = IOracleFreeDollar(ofd).burnWithReserve(amount, reserveContribution);\\r\\n\\t\\t_notifyRepaid(actuallyRepaid);\\r\\n\\t\\temit MintingUpdate(_collateralBalance(), price, minted);\\r\\n\\t\\treturn actuallyRepaid;\\r\\n\\t}\\r\\n\\r\\n\\tfunction _notifyRepaid(uint256 amount) internal {\\r\\n\\t\\tif (amount > minted) revert RepaidTooMuch(amount - minted);\\r\\n\\t\\tPosition(original).notifyRepaid(amount);\\r\\n\\t\\tminted -= amount;\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n     * Force the sale of some collateral after the position is expired.\\r\\n     *\\r\\n     * Can only be called by the minting hub and the minting hub is trusted to calculate the price correctly.\\r\\n     * The proceeds from the sale are first used to repay the outstanding balance and then (if anything is left)\\r\\n     * it is sent to the owner of the position.\\r\\n     *\\r\\n     * Do not allow a forced sale as long as there is an open challenge. Otherwise, a forced sale by the owner\\r\\n     * himself could remove any incentive to launch challenges shortly before the expiration. (CS-OFD2-001)\\r\\n     */\\r\\n\\tfunction forceSale(address buyer, uint256 collAmount, uint256 proceeds) external onlyHub expired noChallenge {\\r\\n\\t\\t// send collateral to buyer\\r\\n\\t\\tuint256 remainingCollateral = _sendCollateral(buyer, collAmount);\\r\\n\\t\\tif (minted > 0) {\\r\\n\\t\\t\\tuint256 availableReserve = ofd.calculateAssignedReserve(minted, reserveContribution);\\r\\n\\t\\t\\tif (proceeds + availableReserve >= minted) {\\r\\n\\t\\t\\t\\t// repay everything from the buyer's account\\r\\n\\t\\t\\t\\tuint256 returnedReserve = ofd.burnFromWithReserve(buyer, minted, reserveContribution);\\r\\n\\t\\t\\t\\tassert(returnedReserve == availableReserve);\\r\\n\\t\\t\\t\\t// transfer the remaining purchase price from the buyer to the owner\\r\\n\\t\\t\\t\\tofd.transferFrom(buyer, owner, proceeds + returnedReserve - minted);\\r\\n\\t\\t\\t\\t_notifyRepaid(minted);\\r\\n\\t\\t\\t} else {\\r\\n\\t\\t\\t\\t// we can only repay a part, nothing left to pay to owner\\r\\n\\t\\t\\t\\tofd.transferFrom(buyer, address(this), proceeds);\\r\\n\\t\\t\\t\\tif (remainingCollateral == 0) {\\r\\n\\t\\t\\t\\t\\t// CS-ZCHF2-002, bad debt should be properly handled. In this case, the proceeds from\\r\\n\\t\\t\\t\\t\\t// the forced sale did not suffice to repay the position and there is a loss\\r\\n\\t\\t\\t\\t\\tofd.coverLoss(address(this), minted - proceeds); // more than we need, but returned again on next line\\r\\n\\t\\t\\t\\t\\tofd.burnWithoutReserve(minted, reserveContribution);\\r\\n\\t\\t\\t\\t\\t_notifyRepaid(minted);\\r\\n\\t\\t\\t\\t} else {\\r\\n\\t\\t\\t\\t\\tuint256 repaid = ofd.burnWithReserve(proceeds, reserveContribution);\\r\\n\\t\\t\\t\\t\\t_notifyRepaid(repaid);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t}\\r\\n\\t\\t} else {\\r\\n\\t\\t\\t// wire funds directly to owner\\r\\n\\t\\t\\tofd.transferFrom(buyer, owner, proceeds);\\r\\n\\t\\t}\\r\\n\\t\\temit MintingUpdate(_collateralBalance(), price, minted);\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n     * @notice Withdraw any ERC20 token that might have ended up on this address.\\r\\n     * Withdrawing collateral is subject to the same restrictions as withdrawCollateral(...).\\r\\n     */\\r\\n\\tfunction withdraw(address token, address target, uint256 amount) external onlyOwner {\\r\\n\\t\\tif (token == address(collateral)) {\\r\\n\\t\\t\\twithdrawCollateral(target, amount);\\r\\n\\t\\t} else {\\r\\n\\t\\t\\tuint256 balance = _collateralBalance();\\r\\n\\t\\t\\tIERC20(token).transfer(target, amount);\\r\\n\\t\\t\\trequire(balance == _collateralBalance()); // guard against double-entry-point tokens\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n     * @notice Withdraw collateral from the position up to the extent that it is still well collateralized afterwards.\\r\\n     * Not possible as long as there is an open challenge or the contract is subject to a cooldown.\\r\\n     *\\r\\n     * Withdrawing collateral below the minimum collateral amount formally closes the position.\\r\\n     */\\r\\n\\tfunction withdrawCollateral(address target, uint256 amount) public ownerOrRoller {\\r\\n\\t\\tuint256 balance = _withdrawCollateral(target, amount);\\r\\n\\t\\temit MintingUpdate(balance, price, minted);\\r\\n\\t}\\r\\n\\r\\n\\tfunction _withdrawCollateral(address target, uint256 amount) internal noChallenge returns (uint256) {\\r\\n\\t\\tif (block.timestamp <= cooldown) revert Hot();\\r\\n\\t\\tuint256 balance = _sendCollateral(target, amount);\\r\\n\\t\\t_checkCollateral(balance, price);\\r\\n\\t\\treturn balance;\\r\\n\\t}\\r\\n\\r\\n\\tfunction _sendCollateral(address target, uint256 amount) internal returns (uint256) {\\r\\n\\t\\tif (amount > 0) {\\r\\n\\t\\t\\t// Some weird tokens fail when trying to transfer 0 amounts\\r\\n\\t\\t\\tIERC20(collateral).transfer(target, amount);\\r\\n\\t\\t}\\r\\n\\t\\tuint256 balance = _collateralBalance();\\r\\n\\t\\tif (balance < minimumCollateral) {\\r\\n\\t\\t\\t_close();\\r\\n\\t\\t}\\r\\n\\t\\treturn balance;\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n     * @notice This invariant must always hold and must always be checked when any of the three\\r\\n     * variables change in an adverse way.\\r\\n     */\\r\\n\\tfunction _checkCollateral(uint256 collateralReserve, uint256 atPrice) internal view {\\r\\n\\t\\tuint256 relevantCollateral = collateralReserve < minimumCollateral ? 0 : collateralReserve;\\r\\n\\t\\tif (relevantCollateral * atPrice < minted * ONE_DEC18) revert InsufficientCollateral(relevantCollateral * atPrice, minted * ONE_DEC18);\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n     * @notice Returns the liquidation price and the durations for phase1 and phase2 of the challenge.\\r\\n     * Both phases are usually of equal duration, but near expiration, phase one is adjusted such that\\r\\n     * it cannot last beyond the expiration date of the position.\\r\\n     */\\r\\n\\tfunction challengeData() external view returns (uint256 liqPrice, uint40 phase) {\\r\\n\\t\\treturn (price, challengePeriod);\\r\\n\\t}\\r\\n\\r\\n\\tfunction notifyChallengeStarted(uint256 size) external onlyHub alive {\\r\\n\\t\\t// Require minimum size. Collateral balance can be below minimum if it was partially challenged before.\\r\\n\\t\\tif (size < minimumCollateral && size < _collateralBalance()) revert ChallengeTooSmall();\\r\\n\\t\\tif (size == 0) revert ChallengeTooSmall();\\r\\n\\t\\tchallengedAmount += size;\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n     * @param size   amount of collateral challenged (dec18)\\r\\n     */\\r\\n\\tfunction notifyChallengeAverted(uint256 size) external onlyHub {\\r\\n\\t\\tchallengedAmount -= size;\\r\\n\\r\\n\\t\\t// Don't allow minter to close the position immediately so challenge can be repeated before\\r\\n\\t\\t// the owner has a chance to mint more on an undercollateralized position\\r\\n\\t\\t_restrictMinting(1 days);\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n     * @notice Notifies the position that a challenge was successful.\\r\\n     * Triggers the payout of the challenged part of the collateral.\\r\\n     * Everything else is assumed to be handled by the hub.\\r\\n     *\\r\\n     * @param _bidder   address of the bidder that receives the collateral\\r\\n     * @param _size     amount of the collateral bid for\\r\\n     * @return (position owner, effective challenge size in OFD, amount to be repaid, reserve ppm)\\r\\n     */\\r\\n\\tfunction notifyChallengeSucceeded(\\r\\n\\t\\taddress _bidder,\\r\\n\\t\\tuint256 _size\\r\\n\\t) external onlyHub returns (address, uint256, uint256, uint32) {\\r\\n\\t\\tchallengedAmount -= _size;\\r\\n\\t\\tuint256 colBal = _collateralBalance();\\r\\n\\t\\tif (colBal < _size) {\\r\\n\\t\\t\\t_size = colBal;\\r\\n\\t\\t}\\r\\n\\t\\tuint256 repayment = colBal == 0 ? 0 : (minted * _size) / colBal; // for enormous colBal, this could be rounded to 0, which is ok\\r\\n\\t\\t_notifyRepaid(repayment); // we assume the caller takes care of the actual repayment\\r\\n\\r\\n\\t\\t// Give time for additional challenges before the owner can mint again. In particular,\\r\\n\\t\\t// the owner might have added collateral only seconds before the challenge ended, preventing a close.\\r\\n\\t\\t_restrictMinting(3 days);\\r\\n\\r\\n\\t\\tuint256 newBalance = _sendCollateral(_bidder, _size); // transfer collateral to the bidder and emit update\\r\\n\\r\\n\\t\\temit MintingUpdate(newBalance, price, minted);\\r\\n\\r\\n\\t\\treturn (owner, _size, repayment, reserveContribution);\\r\\n\\t}\\r\\n}\\r\\n\\r\\ninterface IHub {\\r\\n\\tfunction rate() external view returns (ILeadrate);\\r\\n\\tfunction roller() external view returns (address);\\r\\n}\\r\\n\",\"keccak256\":\"0x99e427ec526623a4ac28a211941d105acf5b443ec76c9c3d164b2d486d60cf32\",\"license\":\"MIT\"},\"contracts/PositionFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./Position.sol\\\";\\r\\nimport './interface/IOracleFreeDollar.sol';\\r\\n\\r\\ncontract PositionFactory {\\r\\n\\t/**\\r\\n     * Create a completely new position in a newly deployed contract.\\r\\n     * Must be called through minting hub to be recognized as valid position.\\r\\n     */\\r\\n\\tfunction createNewPosition(\\r\\n\\t\\taddress _owner,\\r\\n\\t\\taddress _ofd,\\r\\n\\t\\taddress _collateral,\\r\\n\\t\\tuint256 _minCollateral,\\r\\n\\t\\tuint256 _initialLimit,\\r\\n\\t\\tuint40 _initPeriod,\\r\\n\\t\\tuint40 _duration,\\r\\n\\t\\tuint40 _challengePeriod,\\r\\n\\t\\tuint24 _riskPremiumPPM,\\r\\n\\t\\tuint256 _liqPrice,\\r\\n\\t\\tuint24 _reserve\\r\\n\\t) external returns (address) {\\r\\n\\t\\treturn\\r\\n\\t\\t\\taddress(\\r\\n\\t\\t\\tnew Position(\\r\\n\\t\\t\\t\\t_owner,\\r\\n\\t\\t\\t\\tmsg.sender,\\r\\n\\t\\t\\t\\t_ofd,\\r\\n\\t\\t\\t\\t_collateral,\\r\\n\\t\\t\\t\\t_minCollateral,\\r\\n\\t\\t\\t\\t_initialLimit,\\r\\n\\t\\t\\t\\t_initPeriod,\\r\\n\\t\\t\\t\\t_duration,\\r\\n\\t\\t\\t\\t_challengePeriod,\\r\\n\\t\\t\\t\\t_riskPremiumPPM,\\r\\n\\t\\t\\t\\t_liqPrice,\\r\\n\\t\\t\\t\\t_reserve\\r\\n\\t\\t\\t)\\r\\n\\t\\t);\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n     * @notice clone an existing position. This can be a clone of another clone,\\r\\n     * or an original position.\\r\\n     * @param _parent address of the position we want to clone\\r\\n     * @return address of the newly created clone position\\r\\n     */\\r\\n\\tfunction clonePosition(address _parent) external returns (address) {\\r\\n\\t\\tPosition parent = Position(_parent);\\r\\n\\t\\tparent.assertCloneable();\\r\\n\\t\\tPosition clone = Position(_createClone(parent.original()));\\r\\n\\t\\treturn address(clone);\\r\\n\\t}\\r\\n\\r\\n\\t// github.com/optionality/clone-factory/blob/32782f82dfc5a00d103a7e61a17a5dedbd1e8e9d/contracts/CloneFactory.sol\\r\\n\\tfunction _createClone(address target) internal returns (address result) {\\r\\n\\t\\tbytes20 targetBytes = bytes20(target);\\r\\n\\t\\tassembly {\\r\\n\\t\\t\\tlet clone := mload(0x40)\\r\\n\\t\\t\\tmstore(clone, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\r\\n\\t\\t\\tmstore(add(clone, 0x14), targetBytes)\\r\\n\\t\\t\\tmstore(add(clone, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\r\\n\\t\\t\\tresult := create(0, clone, 0x37)\\r\\n\\t\\t}\\r\\n\\t\\trequire(result != address(0), \\\"ERC1167: create failed\\\");\\r\\n\\t}\\r\\n}\\r\\n\\r\\n\",\"keccak256\":\"0x68cef59137bfd3dfae37ba909bef93c6141147b3830e7e19d0192318b9c63524\",\"license\":\"MIT\"},\"contracts/interface/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n/**\\r\\n *\\r\\n * Copyright (c) 2016-2019 zOS Global Limited\\r\\n *\\r\\n */\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\\r\\n * the optional functions; to access them see `ERC20Detailed`.\\r\\n */\\r\\n\\r\\ninterface IERC20 {\\r\\n    function name() external view returns (string memory);\\r\\n\\r\\n    function symbol() external view returns (string memory);\\r\\n\\r\\n    function decimals() external view returns (uint8);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens in existence.\\r\\n     */\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens owned by `account`.\\r\\n     */\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\r\\n     *\\r\\n     * Returns always true. Throws error on failure.\\r\\n     *\\r\\n     * Emits a `Transfer` event.\\r\\n     */\\r\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remaining number of tokens that `spender` will be\\r\\n     * allowed to spend on behalf of `owner` through `transferFrom`. This is\\r\\n     * zero by default.\\r\\n     *\\r\\n     * This value can change when `approve` or `transferFrom` are called.\\r\\n     */\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * > Beware that changing an allowance with this method brings the risk\\r\\n     * that someone may use both the old and the new allowance by unfortunate\\r\\n     * transaction ordering. One possible solution to mitigate this race\\r\\n     * condition is to first reduce the spender's allowance to 0 and set the\\r\\n     * desired value afterwards:\\r\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n     *\\r\\n     * Emits an `Approval` event.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\r\\n     * allowance mechanism. `amount` is then deducted from the caller's\\r\\n     * allowance.\\r\\n     *\\r\\n     * Returns always true. Throws error on failure.\\r\\n     *\\r\\n     * Emits a `Transfer` event.\\r\\n     */\\r\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n     * another (`to`).\\r\\n     *\\r\\n     * Note that `value` may be zero.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n     * a call to `approve`. `value` is the new allowance.\\r\\n     */\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n}\\r\\n\",\"keccak256\":\"0x8a0a84b5d4e32903d24aec090ab3f22f12623f5817d5d2b03596637b9e19b03a\",\"license\":\"MIT\"},\"contracts/interface/ILeadrate.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface ILeadrate {\\r\\n   function currentRatePPM() external view returns (uint24);\\r\\n   function currentTicks() external view returns (uint64);\\r\\n}\",\"keccak256\":\"0x675ed6ff3cf2e81f4ce57af05a47876cb48d7e4e4bf2ac9c6f7ec00182bceea1\",\"license\":\"MIT\"},\"contracts/interface/IOracleFreeDollar.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./IERC20.sol\\\";\\r\\nimport \\\"./IReserve.sol\\\";\\r\\n\\r\\ninterface IOracleFreeDollar is IERC20 {\\r\\n    function suggestMinter(address _minter, uint256 _applicationPeriod, uint256 _applicationFee, string calldata _message) external;\\r\\n\\r\\n    function registerPosition(address position) external;\\r\\n\\r\\n    function denyMinter(address minter, address[] calldata helpers, string calldata message) external;\\r\\n\\r\\n    function reserve() external view returns (IReserve);\\r\\n\\r\\n    function minterReserve() external view returns (uint256);\\r\\n\\r\\n    function calculateAssignedReserve(uint256 mintedAmount, uint32 _reservePPM) external view returns (uint256);\\r\\n\\r\\n    function calculateFreedAmount(uint256 amountExcludingReserve, uint32 reservePPM) external view returns (uint256);\\r\\n\\r\\n    function equity() external view returns (uint256);\\r\\n\\r\\n    function isMinter(address minter) external view returns (bool);\\r\\n\\r\\n    function getPositionParent(address position) external view returns (address);\\r\\n\\r\\n    function mint(address target, uint256 amount) external;\\r\\n\\r\\n    function mintWithReserve(address target, uint256 amount, uint32 reservePPM, uint32 feePPM) external;\\r\\n\\r\\n    function burnFrom(address target, uint256 amount) external;\\r\\n\\r\\n    function burnWithoutReserve(uint256 amountIncludingReserve, uint32 reservePPM) external;\\r\\n\\r\\n    function burnFromWithReserve(address payer, uint256 targetTotalBurnAmount, uint32 _reservePPM) external returns (uint256);\\r\\n\\r\\n    function burnWithReserve(uint256 amountExcludingReserve, uint32 reservePPM) external returns (uint256);\\r\\n\\r\\n    function coverLoss(address source, uint256 amount) external;\\r\\n\\r\\n    function collectProfits(address source, uint256 _amount) external;\\r\\n}\\r\\n\",\"keccak256\":\"0xa03232a309b668853f7a24b261969c370ae237346a389c2546f5009f59654af7\",\"license\":\"MIT\"},\"contracts/interface/IPosition.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./IERC20.sol\\\";\\r\\n\\r\\ninterface IPosition {\\r\\n\\r\\n    function initialize(address parent, uint40 _expiration) external;\\r\\n\\r\\n    function hub() external view returns(address);\\r\\n\\r\\n    function original() external view returns (address);\\r\\n\\r\\n    function collateral() external view returns (IERC20);\\r\\n\\r\\n    function minimumCollateral() external view returns (uint256);\\r\\n\\r\\n    function challengePeriod() external view returns (uint40);\\r\\n\\r\\n    function expiration() external view returns (uint40);\\r\\n\\r\\n    function price() external view returns (uint256);\\r\\n\\r\\n    function deny(address[] calldata helpers, string calldata message) external;\\r\\n\\r\\n    function mint(address target, uint256 amount) external;\\r\\n\\r\\n    function repay(uint256 amount) external returns (uint256);\\r\\n\\r\\n    function adjust(uint256 newMinted, uint256 newCollateral, uint256 newPrice) external;\\r\\n\\r\\n    function minted() external view returns (uint256);\\r\\n\\r\\n    function availableForMinting() external view returns (uint256);\\r\\n\\r\\n    function reserveContribution() external view returns (uint24);\\r\\n\\r\\n    function withdrawCollateral(address target, uint256 amount) external;\\r\\n\\r\\n    function getUsableMint(uint256 totalMint, bool beforeFees) external view returns (uint256);\\r\\n\\r\\n    function getMintAmount(uint256 usableMint) external view returns (uint256);\\r\\n\\r\\n    function challengeData() external view returns (uint256 liqPrice, uint40 phase);\\r\\n\\r\\n    function notifyChallengeStarted(uint256 size) external;\\r\\n\\r\\n    function notifyChallengeAverted(uint256 size) external;\\r\\n\\r\\n    function notifyChallengeSucceeded(address _bidder, uint256 _size) external returns (address, uint256, uint256, uint32);\\r\\n\\r\\n    function forceSale(address buyer, uint256 collAmount, uint256 proceeds) external;\\r\\n\\r\\n}\\r\\n\",\"keccak256\":\"0x5b3603d0fc044697335958a279765f7ef61e4c8e0c102adacc6a10903f2c26ea\",\"license\":\"MIT\"},\"contracts/interface/IReserve.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./IERC20.sol\\\";\\r\\n\\r\\ninterface IReserve is IERC20 {\\r\\n   function invest(uint256 amount, uint256 expected) external returns (uint256);\\r\\n   function checkQualified(address sender, address[] calldata helpers) external view;\\r\\n}\",\"keccak256\":\"0xa0ec8a4b3c8b5320aca82d7a7a8e9910fd31f03cf44653031474821412cdc1cf\",\"license\":\"MIT\"},\"contracts/utils/MathUtil.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @title Functions for share valuation\\r\\n */\\r\\ncontract MathUtil {\\r\\n    uint256 internal constant ONE_DEC18 = 10 ** 18;\\r\\n\\r\\n    // Let's go for 12 digits of precision (18-6)\\r\\n    uint256 internal constant THRESH_DEC18 = 10 ** 6;\\r\\n\\r\\n    /**\\r\\n     * @notice Cubic root with Halley approximation\\r\\n     *         Number 1e18 decimal\\r\\n     * @param _v     number for which we calculate x**(1/3)\\r\\n     * @return returns _v**(1/3)\\r\\n     */\\r\\n    function _cubicRoot(uint256 _v) internal pure returns (uint256) {\\r\\n        // Good first guess for _v slightly above 1.0, which is often the case in the OracleFreeDollar system\\r\\n        uint256 x = _v > ONE_DEC18 && _v < 10 ** 19 ? (_v - ONE_DEC18) / 3 + ONE_DEC18 : ONE_DEC18;\\r\\n        uint256 diff;\\r\\n        do {\\r\\n            uint256 powX3 = _mulD18(_mulD18(x, x), x);\\r\\n            uint256 xnew = x * (powX3 + 2 * _v) / (2 * powX3 + _v);\\r\\n            diff = xnew > x ? xnew - x : x - xnew;\\r\\n            x = xnew;\\r\\n        } while (diff > THRESH_DEC18);\\r\\n        return x;\\r\\n    }\\r\\n\\r\\n    function _mulD18(uint256 _a, uint256 _b) internal pure returns (uint256) {\\r\\n        return (_a * _b) / ONE_DEC18;\\r\\n    }\\r\\n\\r\\n    function _divD18(uint256 _a, uint256 _b) internal pure returns (uint256) {\\r\\n        return (_a * ONE_DEC18) / _b;\\r\\n    }\\r\\n\\r\\n    function _power3(uint256 _x) internal pure returns (uint256) {\\r\\n        return _mulD18(_mulD18(_x, _x), _x);\\r\\n    }\\r\\n\\r\\n    function _min(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a < b ? a : b;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x01c56ae198e483572bba52a3a3ce50ec8ac2ace52fbfade6e98eca76cd0fd887\",\"license\":\"MIT\"},\"contracts/utils/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n//\\r\\n// From https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol\\r\\n//\\r\\n// Modifications:\\r\\n// - Replaced Context._msgSender() with msg.sender\\r\\n// - Made leaner\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Contract module which provides a basic access control mechanism, where\\r\\n * there is an account (an owner) that can be granted exclusive access to\\r\\n * specific functions.\\r\\n *\\r\\n * By default, the owner account will be the one that deploys the contract. This\\r\\n * can later be changed with {transferOwnership}.\\r\\n */\\r\\ncontract Ownable {\\r\\n    address public owner;\\r\\n\\r\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n    error NotOwner();\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Can only be called by the current owner.\\r\\n     */\\r\\n    function transferOwnership(address newOwner) public onlyOwner {\\r\\n        _setOwner(newOwner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Internal function without access restriction.\\r\\n     */\\r\\n    function _setOwner(address newOwner) internal {\\r\\n        require(newOwner != address(0x0));\\r\\n        address oldOwner = owner;\\r\\n        owner = newOwner;\\r\\n        emit OwnershipTransferred(oldOwner, newOwner);\\r\\n    }\\r\\n\\r\\n    function _requireOwner(address sender) internal view {\\r\\n        if (owner != sender) revert NotOwner();\\r\\n    }\\r\\n\\r\\n    modifier onlyOwner() {\\r\\n        _requireOwner(msg.sender);\\r\\n        _;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xc01cb6af7c008d3649f89fb50b802c994f538c380a36b883d22f8eefa1cfe03f\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "clonePosition(address)": {
        "params": {
          "_parent": "address of the position we want to clone"
        },
        "returns": {
          "_0": "address of the newly created clone position"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "clonePosition(address)": {
        "notice": "clone an existing position. This can be a clone of another clone, or an original position."
      },
      "createNewPosition(address,address,address,uint256,uint256,uint40,uint40,uint40,uint24,uint256,uint24)": {
        "notice": "Create a completely new position in a newly deployed contract. Must be called through minting hub to be recognized as valid position."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}