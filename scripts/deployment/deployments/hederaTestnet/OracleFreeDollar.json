{
  "address": "0xa79bD079986b7D8C9D98021817dCf7085741D991",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_minApplicationPeriod",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AlreadyRegistered",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "allowance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "needed",
          "type": "uint256"
        }
      ],
      "name": "ERC20InsufficientAllowance",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "needed",
          "type": "uint256"
        }
      ],
      "name": "ERC20InsufficientBalance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FeeTooLow",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotMinter",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PeriodTooShort",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TooLate",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "reportingMinter",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Loss",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "minter",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "applicationPeriod",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "applicationFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "message",
          "type": "string"
        }
      ],
      "name": "MinterApplied",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "minter",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "message",
          "type": "string"
        }
      ],
      "name": "MinterDenied",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "reportingMinter",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Profit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DOMAIN_SEPARATOR",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MIN_APPLICATION_PERIOD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MIN_FEE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "burnFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "payer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "targetTotalBurnAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "reservePPM",
          "type": "uint32"
        }
      ],
      "name": "burnFromWithReserve",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amountExcludingReserve",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "_reservePPM",
          "type": "uint32"
        }
      ],
      "name": "burnWithReserve",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "reservePPM",
          "type": "uint32"
        }
      ],
      "name": "burnWithoutReserve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "mintedAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "_reservePPM",
          "type": "uint32"
        }
      ],
      "name": "calculateAssignedReserve",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountExcludingReserve",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "reservePPM",
          "type": "uint32"
        }
      ],
      "name": "calculateFreedAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "source",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "collectProfits",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "source",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "coverLoss",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_minter",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "_helpers",
          "type": "address[]"
        },
        {
          "internalType": "string",
          "name": "_message",
          "type": "string"
        }
      ],
      "name": "denyMinter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "equity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_position",
          "type": "address"
        }
      ],
      "name": "getPositionParent",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_minter",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_message",
          "type": "string"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_minter",
          "type": "address"
        }
      ],
      "name": "isMinter",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_target",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_target",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "_reservePPM",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "_feesPPM",
          "type": "uint32"
        }
      ],
      "name": "mintWithReserve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minterReserve",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "minter",
          "type": "address"
        }
      ],
      "name": "minters",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "validityStart",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "nonces",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "permit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "position",
          "type": "address"
        }
      ],
      "name": "positions",
      "outputs": [
        {
          "internalType": "address",
          "name": "registeringMinter",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_position",
          "type": "address"
        }
      ],
      "name": "registerPosition",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "reserve",
      "outputs": [
        {
          "internalType": "contract IReserve",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_minter",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_applicationPeriod",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_applicationFee",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_message",
          "type": "string"
        }
      ],
      "name": "suggestMinter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x8927eeaf7bdd9a3dc9678a333b869eab15a3e52100ac7fc6bcd43b5e44e8be84",
  "receipt": {
    "to": null,
    "from": "0x22a2Aaa43C8Ecedd91d857B5d0779211aFba1379",
    "contractAddress": "0xa79bD079986b7D8C9D98021817dCf7085741D991",
    "transactionIndex": 6,
    "gasUsed": "3627833",
    "logsBloom": "0x
    "blockHash": "0x4338b9462b9836fc2bc178b25bec8642be6ed1150108c585df6878ee56744df3",
    "transactionHash": "0x8927eeaf7bdd9a3dc9678a333b869eab15a3e52100ac7fc6bcd43b5e44e8be84",
    "logs": [],
    "blockNumber": 25851422,
    "cumulativeGasUsed": "3627833",
    "status": 1,
    "byzantium": true
  },
  "args": [
    1209600
  ],
  "numDeployments": 1,
  "solcInputHash": "6eaf3ef7f7a823d8899d101cad9f8e1a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minApplicationPeriod\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AlreadyRegistered\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FeeTooLow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotMinter\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PeriodTooShort\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TooLate\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"reportingMinter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Loss\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"applicationPeriod\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"applicationFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"}],\"name\":\"MinterApplied\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"}],\"name\":\"MinterDenied\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"reportingMinter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Profit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_APPLICATION_PERIOD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"payer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"targetTotalBurnAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"reservePPM\",\"type\":\"uint32\"}],\"name\":\"burnFromWithReserve\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountExcludingReserve\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"_reservePPM\",\"type\":\"uint32\"}],\"name\":\"burnWithReserve\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"reservePPM\",\"type\":\"uint32\"}],\"name\":\"burnWithoutReserve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"mintedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"_reservePPM\",\"type\":\"uint32\"}],\"name\":\"calculateAssignedReserve\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountExcludingReserve\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"reservePPM\",\"type\":\"uint32\"}],\"name\":\"calculateFreedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"collectProfits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"coverLoss\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_minter\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_helpers\",\"type\":\"address[]\"},{\"internalType\":\"string\",\"name\":\"_message\",\"type\":\"string\"}],\"name\":\"denyMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"equity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_position\",\"type\":\"address\"}],\"name\":\"getPositionParent\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_minter\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_message\",\"type\":\"string\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_minter\",\"type\":\"address\"}],\"name\":\"isMinter\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_target\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_target\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"_reservePPM\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"_feesPPM\",\"type\":\"uint32\"}],\"name\":\"mintWithReserve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minterReserve\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"}],\"name\":\"minters\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"validityStart\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"position\",\"type\":\"address\"}],\"name\":\"positions\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"registeringMinter\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_position\",\"type\":\"address\"}],\"name\":\"registerPosition\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reserve\",\"outputs\":[{\"internalType\":\"contract IReserve\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_minter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_applicationPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_applicationFee\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_message\",\"type\":\"string\"}],\"name\":\"suggestMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to `approve`. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See `IERC20.allowance`.\"},\"approve(address,uint256)\":{\"details\":\"See `IERC20.approve`. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See `IERC20.balanceOf`.\"},\"denyMinter(address,address[],string)\":{\"details\":\"Calling this function is relatively cheap thanks to the deletion of a storage slot.\"},\"equity()\":{\"details\":\"Note that the equity contract technically holds both the minter reserve as well as the equity, so the minter reserve must be subtracted. All fees and other kind of income is added to the Equity contract and essentially constitutes profits attributable to the pool share holders.\"},\"minterReserve()\":{\"details\":\"The minter reserve can be used to cover losses after the equity holders have been wiped out.\"},\"registerPosition(address)\":{\"details\":\"It is assumed that the responsible minter that registers the position ensures that the position can be trusted.\"},\"suggestMinter(address,uint256,uint256,string)\":{\"details\":\"The caller has to pay an application fee that is irrevocably lost even if the new minter is vetoed. The caller must assume that someone will veto the new minter unless there is broad consensus that the new minter adds value to the OracleFreeDollar system. Complex proposals should have application periods and applications fees above the minimum. It is assumed that over time, informal ways to coordinate on new minters emerge. The message parameter might be useful for initiating further communication. Maybe it contains a link to a website describing the proposed minter.\",\"params\":{\"_applicationFee\":\"The fee paid by the caller, at least MIN_FEE\",\"_applicationPeriod\":\"The time others have to veto the suggestion, at least MIN_APPLICATION_PERIOD\",\"_message\":\"An optional human readable message to everyone watching this contract\",\"_minter\":\"An address that is given the permission to mint OracleFreeDollars\"}},\"totalSupply()\":{\"details\":\"See `IERC20.totalSupply`.\"},\"transfer(address,uint256)\":{\"details\":\"See `IERC20.transfer`. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See `IERC20.transferFrom`. Emits an `Approval` event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of `ERC20`; Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `value`. - the caller must have allowance for `sender`'s tokens of at least `amount`.\"}},\"title\":\"OracleFreeDollar\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"MIN_FEE()\":{\"notice\":\"Minimal fee and application period when suggesting a new minter.\"},\"burn(uint256)\":{\"notice\":\"Anyone is allowed to burn their OFD.\"},\"burnFrom(address,uint256)\":{\"notice\":\"Burn someone elses OFD.\"},\"burnFromWithReserve(address,uint256,uint32)\":{\"notice\":\"Burns the target amount taking the tokens to be burned from the payer and the payer's reserve. Only use this method for tokens also minted by the caller with the same _reservePPM. Example: the calling contract has previously minted 100 OFD with a reserve ratio of 20% (i.e. 200000 ppm). To burn half of that again, the minter calls burnFrom with a target amount of 50 OFD. Assuming that reserves are only 90% covered, this call will deduct 41 OFD from the payer's balance and 9 from the reserve, while reducing the minter reserve by 10.\"},\"burnWithReserve(uint256,uint32)\":{\"notice\":\"Burns the provided number of tokens plus whatever reserves are associated with that amount given the reserve requirement. The caller is only allowed to use this method for tokens also minted through the caller with the same _reservePPM amount. Example: the calling contract has previously minted 100 OFD with a reserve ratio of 20% (i.e. 200000 ppm). Now they have 41 OFD that they do not need so they decide to repay that amount. Assuming the reserves are only 90% covered, the call to burnWithReserve will burn the 41 plus 9 from the reserve, reducing the outstanding 'debt' of the caller by 50 OFD in total. This total is returned by the method so the caller knows how much less they owe.\"},\"burnWithoutReserve(uint256,uint32)\":{\"notice\":\"Burn that amount without reclaiming the reserve, but freeing it up and thereby essentially donating it to the pool share holders. This can make sense in combination with 'coverLoss', i.e. when it is the pool share holders that bear the risk and depending on the outcome they make a profit or a loss. Design rule: Minters calling this method are only allowed to so for tokens amounts they previously minted with the same _reservePPM amount. For example, if someone minted 50 OFD earlier with a 20% reserve requirement (200000 ppm), they got 40 OFD and paid 10 OFD into the reserve. Now they want to repay the debt by burning 50 OFD. When doing so using this method, 50 OFD get burned and on top of that, 10 OFD previously assigned to the minter's reserved are reassigned to the pool share holders.\"},\"calculateAssignedReserve(uint256,uint32)\":{\"notice\":\"Calculates the reserve attributable to someone who minted the given amount with the given reserve requirement. Under normal circumstances, this is just the reserver requirement multiplied by the amount. However, after a severe loss of capital that burned into the minter's reserve, this can also be less than that.\"},\"calculateFreedAmount(uint256,uint32)\":{\"notice\":\"Calculate the amount that is freed when returning amountExcludingReserve given a reserve ratio of reservePPM, taking into account potential losses. Example values in the comments.\"},\"constructor\":{\"notice\":\"Initiates the OracleFreeDollar with the provided minimum application period for new plugins in seconds, for example 10 days, i.e. 3600*24*10 = 864000\"},\"coverLoss(address,uint256)\":{\"notice\":\"Notify the OracleFreeDollar that a minter lost economic access to some coins. This does not mean that the coins are literally lost. It just means that some OFD will likely never be repaid and that in order to bring the system back into balance, the lost amount of OFD must be removed from the reserve instead. For example, if a minter printed 1 million OFD for a mortgage and the mortgage turned out to be unsound with the house only yielding 800'000 in the subsequent auction, there is a loss of 200'000 that needs to be covered by the reserve.\"},\"denyMinter(address,address[],string)\":{\"notice\":\"Qualified pool share holders can deny minters during the application period.\"},\"equity()\":{\"notice\":\"The amount of equity of the OracleFreeDollar system in OFD, owned by the holders of OracleFreeDollar Pool Shares.\"},\"getPositionParent(address)\":{\"notice\":\"Returns the address of the minter that created this position or null if the provided address is unknown.\"},\"isMinter(address)\":{\"notice\":\"Returns true if the address is an approved minter.\"},\"mintWithReserve(address,uint256,uint32,uint32)\":{\"notice\":\"Mints the provided amount of OFD to the target address, automatically forwarding the minting fee and the reserve to the right place.\"},\"minterReserve()\":{\"notice\":\"The reserve provided by the owners of collateralized positions.\"},\"minters(address)\":{\"notice\":\"Map of minters to approval time stamps. If the time stamp is in the past, the minter contract is allowed to mint OracleFreeDollars.\"},\"positions(address)\":{\"notice\":\"List of positions that are allowed to mint and the minter that registered them.\"},\"registerPosition(address)\":{\"notice\":\"Allows minters to register collateralized debt positions, thereby giving them the ability to mint OracleFreeDollars.\"},\"reserve()\":{\"notice\":\"The contract that holds the reserve.\"},\"suggestMinter(address,uint256,uint256,string)\":{\"notice\":\"Publicly accessible method to suggest a new way of minting OracleFreeDollar.\"}},\"notice\":\"The OracleFreeDollar (OFD) is an ERC-20 token that is designed to track the value of the American Dollar. It is not upgradable, but open to arbitrary minting plugins. These are automatically accepted if none of the qualified pool share holders casts a veto, leading to a flexible but conservative governance.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/OracleFreeDollar.sol\":\"OracleFreeDollar\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/Equity.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./utils/MathUtil.sol\\\";\\r\\nimport \\\"./interface/IReserve.sol\\\";\\r\\nimport \\\"./interface/IOracleFreeDollar.sol\\\";\\r\\nimport \\\"./interface/IERC677Receiver.sol\\\";\\r\\nimport \\\"./utils/ERC20PermitLight.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title Equity\\r\\n * @notice If the OracleFreeDollar system was a bank, this contract would represent the equity on its balance sheet.\\r\\n * Like with a corporation, the owners of the equity capital are the shareholders, or in this case the holders\\r\\n * of OracleFreeDollar Pool Shares (OFDPS) tokens. Anyone can mint additional OFDPS tokens by adding OracleFreeDollars to the\\r\\n * reserve pool. Also, OFDPS tokens can be redeemed for OracleFreeDollars again after a minimum holding period.\\r\\n * Furthermore, the OFDPS shares come with some voting power. Anyone that held at least 3% of the holding-period-\\r\\n * weighted reserve pool shares gains veto power and can veto new proposals.\\r\\n */\\r\\ncontract Equity is ERC20PermitLight, MathUtil, IReserve {\\r\\n    /**\\r\\n     * The VALUATION_FACTOR determines the market cap of the reserve pool shares relative to the equity reserves.\\r\\n     * The following always holds: Market Cap = Valuation Factor * Equity Reserve = Price * Supply\\r\\n     *\\r\\n     * In the absence of profits and losses, the variables grow as follows when OFDPS tokens are minted:\\r\\n     *\\r\\n     * |   Reserve     |   Market Cap  |     Price     |     Supply   |\\r\\n     * |          1000 |          3000 |             3 |         1000 |\\r\\n     * |       1000000 |       3000000 |           300 |        10000 |\\r\\n     * |    1000000000 |    3000000000 |         30000 |       100000 |\\r\\n     * | 1000000000000 | 3000000000000 |       3000000 |      1000000 |\\r\\n     *\\r\\n     * I.e., the supply is proporational to the cubic root of the reserve and the price is proportional to the\\r\\n     * squared cubic root. When profits accumulate or losses materialize, the reserve, the market cap,\\r\\n     * and the price are adjusted proportionally, with the supply staying constant. In the absence of an extreme\\r\\n     * inflation of the American Dollar, it is unlikely that there will ever be more than ten million OFDPS.\\r\\n     */\\r\\n    uint32 public constant VALUATION_FACTOR = 3;\\r\\n\\r\\n    uint256 private constant MINIMUM_EQUITY = 1000 * ONE_DEC18;\\r\\n\\r\\n    /**\\r\\n     * @notice The quorum in basis points. 100 is 1%.\\r\\n     */\\r\\n    uint32 private constant QUORUM = 200;\\r\\n\\r\\n    /**\\r\\n     * @notice The number of digits to store the average holding time of share tokens.\\r\\n     */\\r\\n    uint8 private constant TIME_RESOLUTION_BITS = 20;\\r\\n\\r\\n    /**\\r\\n     * @notice The minimum holding duration. You are not allowed to redeem your pool shares if you held them\\r\\n     * for less than the minimum holding duration at average. For example, if you have two pool shares on your\\r\\n     * address, one acquired 5 days ago and one acquired 105 days ago, you cannot redeem them as the average\\r\\n     * holding duration of your shares is only 55 days < 90 days.\\r\\n     */\\r\\n    uint256 public constant MIN_HOLDING_DURATION = 90 days << TIME_RESOLUTION_BITS; // Set to 5 for local testing\\r\\n\\r\\n    IOracleFreeDollar public immutable ofd;\\r\\n\\r\\n    /**\\r\\n     * @dev To track the total number of votes we need to know the number of votes at the anchor time and when the\\r\\n     * anchor time was. This is (hopefully) stored in one 256 bit slot, with the anchor time taking 64 Bits and\\r\\n     * the total vote count 192 Bits. Given the sub-second resolution of 20 Bits, the implicit assumption is\\r\\n     * that the timestamp can always be stored in 44 Bits (i.e. it does not exceed half a million years). Further,\\r\\n     * given 18 decimals (about 60 Bits), this implies that the total supply cannot exceed\\r\\n     *   192 - 60 - 44 - 20 = 68 Bits\\r\\n     * Here, we are also save, as 68 Bits would imply more than a trillion outstanding shares. In fact,\\r\\n     * a limit of about 2**36 shares (that's about 2**96 Bits when taking into account the decimals) is imposed\\r\\n     * when minting. This means that the maximum supply is billions shares, which is could only be reached in\\r\\n     * a scenario with hyper inflation, in which case the stablecoin is worthless anyway.\\r\\n     */\\r\\n    uint192 private totalVotesAtAnchor; // Total number of votes at the anchor time, see comment on the um\\r\\n    uint64 private totalVotesAnchorTime; // 44 Bit for the time stamp, 20 Bit sub-second time resolution\\r\\n\\r\\n    /**\\r\\n     * @notice Keeping track on who delegated votes to whom.\\r\\n     * Note that delegation does not mean you cannot vote / veto any more, it just means that the delegate can\\r\\n     * benefit from your votes when invoking a veto. Circular delegations are valid, do not help when voting.\\r\\n     */\\r\\n    mapping(address owner => address delegate) public delegates;\\r\\n\\r\\n    /**\\r\\n     * @notice A time stamp in the past such that: votes = balance * (time passed since anchor was set)\\r\\n     */\\r\\n    mapping(address owner => uint64 timestamp) private voteAnchor; // 44 bits for time stamp, 20 subsecond resolution\\r\\n\\r\\n    event Delegation(address indexed from, address indexed to); // indicates a delegation\\r\\n    event Trade(address who, int amount, uint totPrice, uint newprice); // amount pos or neg for mint or redemption\\r\\n\\r\\n    constructor(IOracleFreeDollar ofd_) ERC20(18) {\\r\\n        ofd = ofd_;\\r\\n    }\\r\\n\\r\\n    function name() external pure override returns (string memory) {\\r\\n        return \\\"OracleFreeDollar Pool Share\\\";\\r\\n    }\\r\\n\\r\\n    function symbol() external pure override returns (string memory) {\\r\\n        return \\\"OFDPS\\\";\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Returns the price of one OFDPS in OFD with 18 decimals precision.\\r\\n     */\\r\\n    function price() public view returns (uint256) {\\r\\n        uint256 equity = ofd.equity();\\r\\n        if (equity == 0 || totalSupply() == 0) {\\r\\n            return ONE_DEC18; // initial price is 1000 OFD for the first 1000 OFDPS\\r\\n        } else {\\r\\n            return (VALUATION_FACTOR * ofd.equity() * ONE_DEC18) / totalSupply();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal override {\\r\\n        super._beforeTokenTransfer(from, to, amount);\\r\\n        if (amount > 0) {\\r\\n            // No need to adjust the sender votes. When they send out 10% of their shares, they also lose 10% of\\r\\n            // their votes so everything falls nicely into place. Recipient votes should stay the same, but grow\\r\\n            // faster in the future, requiring an adjustment of the anchor.\\r\\n            uint256 roundingLoss = _adjustRecipientVoteAnchor(to, amount);\\r\\n            // The total also must be adjusted and kept accurate by taking into account the rounding error.\\r\\n            _adjustTotalVotes(from, amount, roundingLoss);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Returns whether the given address is allowed to redeem OFDPS, which is the\\r\\n     * case after their average holding duration is larger than the required minimum.\\r\\n     */\\r\\n    function canRedeem(address owner) public view returns (bool) {\\r\\n        return _anchorTime() - voteAnchor[owner] >= MIN_HOLDING_DURATION;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Decrease the total votes anchor when tokens lose their voting power due to being moved\\r\\n     * @param from      sender\\r\\n     * @param amount    amount to be sent\\r\\n     */\\r\\n    function _adjustTotalVotes(address from, uint256 amount, uint256 roundingLoss) internal {\\r\\n        uint64 time = _anchorTime();\\r\\n        uint256 lostVotes = from == address(0x0) ? 0 : (time - voteAnchor[from]) * amount;\\r\\n        totalVotesAtAnchor = uint192(totalVotes() - roundingLoss - lostVotes);\\r\\n        totalVotesAnchorTime = time;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice the vote anchor of the recipient is moved forward such that the number of calculated\\r\\n     * votes does not change despite the higher balance.\\r\\n     * @param to        receiver address\\r\\n     * @param amount    amount to be received\\r\\n     * @return the number of votes lost due to rounding errors\\r\\n     */\\r\\n    function _adjustRecipientVoteAnchor(address to, uint256 amount) internal returns (uint256) {\\r\\n        if (to != address(0x0)) {\\r\\n            uint256 recipientVotes = votes(to); // for example 21 if 7 shares were held for 3 seconds\\r\\n            uint256 newbalance = balanceOf(to) + amount; // for example 11 if 4 shares are added\\r\\n            // new example anchor is only 21 / 11 = 1 second in the past\\r\\n            voteAnchor[to] = uint64(_anchorTime() - recipientVotes / newbalance);\\r\\n            return recipientVotes % newbalance; // we have lost 21 % 11 = 10 votes\\r\\n        } else {\\r\\n            // optimization for burn, vote anchor of null address does not matter\\r\\n            return 0;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Time stamp with some additional bits for higher resolution.\\r\\n     */\\r\\n    function _anchorTime() internal view returns (uint64) {\\r\\n        return uint64(block.timestamp << TIME_RESOLUTION_BITS);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice The relative voting power of the address.\\r\\n     * @return A percentage with 1e18 being 100%\\r\\n     */\\r\\n    function relativeVotes(address holder) external view returns (uint256) {\\r\\n        return (ONE_DEC18 * votes(holder)) / totalVotes();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice The votes of the holder, excluding votes from delegates.\\r\\n     */\\r\\n    function votes(address holder) public view returns (uint256) {\\r\\n        return balanceOf(holder) * (_anchorTime() - voteAnchor[holder]);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice How long the holder already held onto their average OFDPS in seconds.\\r\\n     */\\r\\n    function holdingDuration(address holder) public view returns (uint256) {\\r\\n        return (_anchorTime() - voteAnchor[holder]) >> TIME_RESOLUTION_BITS;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Total number of votes in the system.\\r\\n     */\\r\\n    function totalVotes() public view returns (uint256) {\\r\\n        return totalVotesAtAnchor + totalSupply() * (_anchorTime() - totalVotesAnchorTime);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice The number of votes the sender commands when taking the support of the helpers into account.\\r\\n     * @param sender    The address whose total voting power is of interest\\r\\n     * @param helpers   An incrementally sorted list of helpers without duplicates and without the sender.\\r\\n     *                  The call fails if the list contains an address that does not delegate to sender.\\r\\n     *                  For indirect delegates, i.e. a -> b -> c, both a and b must be included for both to count.\\r\\n     * @return          The total number of votes of sender at the current point in time.\\r\\n     */\\r\\n    function votesDelegated(address sender, address[] calldata helpers) public view returns (uint256) {\\r\\n        uint256 _votes = votes(sender);\\r\\n        require(_checkDuplicatesAndSorted(helpers));\\r\\n        for (uint i = 0; i < helpers.length; i++) {\\r\\n            address current = helpers[i];\\r\\n            require(current != sender);\\r\\n            require(_canVoteFor(sender, current));\\r\\n            _votes += votes(current);\\r\\n        }\\r\\n        return _votes;\\r\\n    }\\r\\n\\r\\n    function _checkDuplicatesAndSorted(address[] calldata helpers) internal pure returns (bool ok) {\\r\\n        if (helpers.length <= 1) {\\r\\n            return true;\\r\\n        } else {\\r\\n            address prevAddress = helpers[0];\\r\\n            for (uint i = 1; i < helpers.length; i++) {\\r\\n                if (helpers[i] <= prevAddress) {\\r\\n                    return false;\\r\\n                }\\r\\n                prevAddress = helpers[i];\\r\\n            }\\r\\n            return true;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Checks whether the sender address is qualified given a list of helpers that delegated their votes\\r\\n     * directly or indirectly to the sender. It is the responsiblity of the caller to figure out whether\\r\\n     * helpes are necessary and to identify them by scanning the blockchain for Delegation events.\\r\\n     */\\r\\n    function checkQualified(address sender, address[] calldata helpers) public view override {\\r\\n        uint256 _votes = votesDelegated(sender, helpers);\\r\\n        if (_votes * 10000 < QUORUM * totalVotes()) revert NotQualified();\\r\\n    }\\r\\n\\r\\n    error NotQualified();\\r\\n\\r\\n    /**\\r\\n     * @notice Increases the voting power of the delegate by your number of votes without taking away any voting power\\r\\n     * from the sender.\\r\\n     */\\r\\n    function delegateVoteTo(address delegate) external {\\r\\n        delegates[msg.sender] = delegate;\\r\\n        emit Delegation(msg.sender, delegate);\\r\\n    }\\r\\n\\r\\n    function _canVoteFor(address delegate, address owner) internal view returns (bool) {\\r\\n        if (owner == delegate) {\\r\\n            return true;\\r\\n        } else if (owner == address(0x0)) {\\r\\n            return false;\\r\\n        } else {\\r\\n            return _canVoteFor(delegate, delegates[owner]);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Since quorum is rather low, it is important to have a way to prevent malicious minority holders\\r\\n     * from blocking the whole system. This method provides a way for the good guys to team up and destroy\\r\\n     * the bad guy's votes (at the cost of also reducing their own votes). This mechanism potentially\\r\\n     * gives full control over the system to whoever has 51% of the votes.\\r\\n     *\\r\\n     * Since this is a rather aggressive measure, delegation is not supported. Every holder must call this\\r\\n     * method on their own.\\r\\n     * @param targets   The target addresses to remove votes from\\r\\n     * @param votesToDestroy    The maximum number of votes the caller is willing to sacrifice\\r\\n     */\\r\\n    function kamikaze(address[] calldata targets, uint256 votesToDestroy) external {\\r\\n        uint256 budget = _reduceVotes(msg.sender, votesToDestroy);\\r\\n        uint256 destroyedVotes = 0;\\r\\n        for (uint256 i = 0; i < targets.length && destroyedVotes < budget; i++) {\\r\\n            destroyedVotes += _reduceVotes(targets[i], budget - destroyedVotes);\\r\\n        }\\r\\n        require(destroyedVotes > 0); // sanity check\\r\\n        totalVotesAtAnchor = uint192(totalVotes() - destroyedVotes - budget);\\r\\n        totalVotesAnchorTime = _anchorTime();\\r\\n    }\\r\\n\\r\\n    function _reduceVotes(address target, uint256 amount) internal returns (uint256) {\\r\\n        uint256 votesBefore = votes(target);\\r\\n        if (amount >= votesBefore) {\\r\\n            amount = votesBefore;\\r\\n            voteAnchor[target] = _anchorTime();\\r\\n            return votesBefore;\\r\\n        } else {\\r\\n            voteAnchor[target] = uint64(_anchorTime() - (votesBefore - amount) / balanceOf(target));\\r\\n            return votesBefore - votes(target);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Call this method to obtain newly minted pool shares in exchange for OracleFreeDollars.\\r\\n     * No allowance required (i.e. it is hardcoded in the OracleFreeDollar token contract).\\r\\n     * Make sure to invest at least 10e-12 * market cap to avoid rounding losses.\\r\\n     *\\r\\n     * @dev If equity is close to zero or negative, you need to send enough OFD to bring equity back to 1000 OFD.\\r\\n     *\\r\\n     * @param amount            OracleFreeDollars to invest\\r\\n     * @param expectedShares    Minimum amount of expected shares for frontrunning protection\\r\\n     */\\r\\n    function invest(uint256 amount, uint256 expectedShares) external returns (uint256) {\\r\\n        ofd.transferFrom(msg.sender, address(this), amount);\\r\\n        uint256 equity = ofd.equity();\\r\\n        require(equity >= MINIMUM_EQUITY, \\\"insuf equity\\\"); // ensures that the initial deposit is at least 1000 OFD\\r\\n\\r\\n        uint256 shares = _calculateShares(equity <= amount ? 0 : equity - amount, amount);\\r\\n        require(shares >= expectedShares);\\r\\n        _mint(msg.sender, shares);\\r\\n        emit Trade(msg.sender, int(shares), amount, price());\\r\\n\\r\\n        // limit the total supply to a reasonable amount to guard against overflows with price and vote calculations\\r\\n        // the 36 bits are 68 bits for magnitude and 60 bits for precision, as calculated in an above comment\\r\\n        require(totalSupply() <= type(uint96).max, \\\"total supply exceeded\\\");\\r\\n        return shares;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Calculate shares received when investing OracleFreeDollars\\r\\n     * @param investment    OFD to be invested\\r\\n     * @return shares to be received in return\\r\\n     */\\r\\n    function calculateShares(uint256 investment) external view returns (uint256) {\\r\\n        return _calculateShares(ofd.equity(), investment);\\r\\n    }\\r\\n\\r\\n    function _calculateShares(uint256 capitalBefore, uint256 investment) internal view returns (uint256) {\\r\\n        uint256 totalShares = totalSupply();\\r\\n        uint256 investmentExFees = (investment * 997) / 1000; // remove 0.3% fee\\r\\n        // Assign 1000 OFDPS for the initial deposit, calculate the amount otherwise\\r\\n        uint256 newTotalShares = capitalBefore < MINIMUM_EQUITY || totalShares == 0\\r\\n            ? totalShares + 1000 * ONE_DEC18\\r\\n            : _mulD18(totalShares, _cubicRoot(_divD18(capitalBefore + investmentExFees, capitalBefore)));\\r\\n        return newTotalShares - totalShares;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Redeem the given amount of shares owned by the sender and transfer the proceeds to the target.\\r\\n     * @return The amount of OFD transferred to the target\\r\\n     */\\r\\n    function redeem(address target, uint256 shares) external returns (uint256) {\\r\\n        return _redeemFrom(msg.sender, target, shares);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Like redeem(...), but with an extra parameter to protect against frontrunning.\\r\\n     * @param expectedProceeds  The minimum acceptable redemption proceeds.\\r\\n     */\\r\\n    function redeemExpected(address target, uint256 shares, uint256 expectedProceeds) external returns (uint256) {\\r\\n        uint256 proceeds = _redeemFrom(msg.sender, target, shares);\\r\\n        require(proceeds >= expectedProceeds);\\r\\n        return proceeds;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Redeem OFDPS based on an allowance from the owner to the caller.\\r\\n     * See also redeemExpected(...).\\r\\n     */\\r\\n    function redeemFrom(\\r\\n        address owner,\\r\\n        address target,\\r\\n        uint256 shares,\\r\\n        uint256 expectedProceeds\\r\\n    ) external returns (uint256) {\\r\\n        _useAllowance(owner, msg.sender, shares);\\r\\n        uint256 proceeds = _redeemFrom(owner, target, shares);\\r\\n        require(proceeds >= expectedProceeds);\\r\\n        return proceeds;\\r\\n    }\\r\\n\\r\\n    function _redeemFrom(address owner, address target, uint256 shares) internal returns (uint256) {\\r\\n        require(canRedeem(owner));\\r\\n        uint256 proceeds = calculateProceeds(shares);\\r\\n        _burn(owner, shares);\\r\\n        ofd.transfer(target, proceeds);\\r\\n        emit Trade(owner, -int(shares), proceeds, price());\\r\\n        return proceeds;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Calculate OFD received when depositing shares\\r\\n     * @param shares number of shares we want to exchange for OFD,\\r\\n     *               in dec18 format\\r\\n     * @return amount of OFD received for the shares\\r\\n     */\\r\\n    function calculateProceeds(uint256 shares) public view returns (uint256) {\\r\\n        uint256 totalShares = totalSupply();\\r\\n        require(shares + ONE_DEC18 < totalShares, \\\"too many shares\\\"); // make sure there is always at least one share\\r\\n        uint256 capital = ofd.equity();\\r\\n        uint256 reductionAfterFees = (shares * 997) / 1000;\\r\\n        uint256 newCapital = _mulD18(capital, _power3(_divD18(totalShares - reductionAfterFees, totalShares)));\\r\\n        return capital - newCapital;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice If there is less than 1000 OFD in equity left (maybe even negative), the system is at risk\\r\\n     * and we should allow qualified OFDPS holders to restructure the system.\\r\\n     *\\r\\n     * Example: there was a devastating loss and equity stands at -1'000'000. Most shareholders have lost hope in the\\r\\n     * OracleFreeDollar system except for a group of small OFDPS holders who still believes in it and is willing to provide\\r\\n     * 2'000'000 OFD to save it. These brave souls are essentially donating 1'000'000 to the minter reserve and it\\r\\n     * would be wrong to force them to share the other million with the passive OFDPS holders. Instead, they will get\\r\\n     * the possibility to bootstrap the system again owning 100% of all OFDPS shares.\\r\\n     *\\r\\n     * @param helpers          A list of addresses that delegate to the caller in incremental order\\r\\n     * @param addressesToWipe  A list of addresses whose OFDPS will be burned to zero\\r\\n     */\\r\\n    function restructureCapTable(address[] calldata helpers, address[] calldata addressesToWipe) external {\\r\\n        require(ofd.equity() < MINIMUM_EQUITY);\\r\\n        checkQualified(msg.sender, helpers);\\r\\n        for (uint256 i = 0; i < addressesToWipe.length; i++) {\\r\\n            address current = addressesToWipe[i];\\r\\n            _burn(current, balanceOf(current));\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x5a125be394fd988a0a7616504fb9d17ad39e57d20346f190153db3fcda73d3ea\",\"license\":\"MIT\"},\"contracts/OracleFreeDollar.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./utils/ERC20PermitLight.sol\\\";\\r\\nimport \\\"./Equity.sol\\\";\\r\\nimport \\\"./interface/IReserve.sol\\\";\\r\\nimport \\\"./interface/IOracleFreeDollar.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title OracleFreeDollar\\r\\n * @notice The OracleFreeDollar (OFD) is an ERC-20 token that is designed to track the value of the American Dollar.\\r\\n * It is not upgradable, but open to arbitrary minting plugins. These are automatically accepted if none of the\\r\\n * qualified pool share holders casts a veto, leading to a flexible but conservative governance.\\r\\n */\\r\\ncontract OracleFreeDollar is ERC20PermitLight, IOracleFreeDollar {\\r\\n    /**\\r\\n     * @notice Minimal fee and application period when suggesting a new minter.\\r\\n     */\\r\\n    uint256 public constant MIN_FEE = 1000 * (10 ** 18);\\r\\n    uint256 public immutable MIN_APPLICATION_PERIOD; // for example 10 days\\r\\n\\r\\n    /**\\r\\n     * @notice The contract that holds the reserve.\\r\\n     */\\r\\n    IReserve public immutable override reserve;\\r\\n\\r\\n    /**\\r\\n     * @notice How much of the reserve belongs to the minters. Everything else belongs to the pool share holders.\\r\\n     * Stored with 6 additional digits of accuracy so no rounding is necessary when dealing with parts per\\r\\n     * million (ppm) in reserve calculations.\\r\\n     */\\r\\n    uint256 private minterReserveE6;\\r\\n\\r\\n    /**\\r\\n     * @notice The address that deployed this contract. Used for safety for first initializations.\\r\\n     */\\r\\n    address private immutable _deployer;\\r\\n\\r\\n    /**\\r\\n     * @notice Map of minters to approval time stamps. If the time stamp is in the past, the minter contract is allowed\\r\\n     * to mint OracleFreeDollars.\\r\\n     */\\r\\n    mapping(address minter => uint256 validityStart) public minters;\\r\\n\\r\\n    /**\\r\\n     * @notice List of positions that are allowed to mint and the minter that registered them.\\r\\n     */\\r\\n    mapping(address position => address registeringMinter) public positions;\\r\\n\\r\\n    event MinterApplied(address indexed minter, uint256 applicationPeriod, uint256 applicationFee, string message);\\r\\n    event MinterDenied(address indexed minter, string message);\\r\\n    event Loss(address indexed reportingMinter, uint256 amount);\\r\\n    event Profit(address indexed reportingMinter, uint256 amount);\\r\\n\\r\\n    error PeriodTooShort();\\r\\n    error FeeTooLow();\\r\\n    error AlreadyRegistered();\\r\\n    error NotMinter();\\r\\n    error TooLate();\\r\\n\\r\\n    modifier minterOnly() {\\r\\n        if (!isMinter(msg.sender) && !isMinter(positions[msg.sender])) revert NotMinter();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Initiates the OracleFreeDollar with the provided minimum application period for new plugins\\r\\n     * in seconds, for example 10 days, i.e. 3600*24*10 = 864000\\r\\n     */\\r\\n    constructor(uint256 _minApplicationPeriod) ERC20(18) {\\r\\n        MIN_APPLICATION_PERIOD = _minApplicationPeriod;\\r\\n        _deployer = msg.sender;\\r\\n        reserve = new Equity(this);\\r\\n    }\\r\\n\\r\\n    function name() external pure override returns (string memory) {\\r\\n        return \\\"OracleFreeDollar\\\";\\r\\n    }\\r\\n\\r\\n    function symbol() external pure override returns (string memory) {\\r\\n        return \\\"OFD\\\";\\r\\n    }\\r\\n\\r\\n    function initialize(address _minter, string calldata _message) external {\\r\\n        require(msg.sender == _deployer, \\\"OracleFreeDollar: Only deployer can initialize\\\");\\r\\n        require(totalSupply() == 0 && reserve.totalSupply() == 0);\\r\\n        minters[_minter] = block.timestamp;\\r\\n        emit MinterApplied(_minter, 0, 0, _message);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Publicly accessible method to suggest a new way of minting OracleFreeDollar.\\r\\n     * @dev The caller has to pay an application fee that is irrevocably lost even if the new minter is vetoed.\\r\\n     * The caller must assume that someone will veto the new minter unless there is broad consensus that the new minter\\r\\n     * adds value to the OracleFreeDollar system. Complex proposals should have application periods and applications fees\\r\\n     * above the minimum. It is assumed that over time, informal ways to coordinate on new minters emerge. The message\\r\\n     * parameter might be useful for initiating further communication. Maybe it contains a link to a website describing\\r\\n     * the proposed minter.\\r\\n     *\\r\\n     * @param _minter              An address that is given the permission to mint OracleFreeDollars\\r\\n     * @param _applicationPeriod   The time others have to veto the suggestion, at least MIN_APPLICATION_PERIOD\\r\\n     * @param _applicationFee      The fee paid by the caller, at least MIN_FEE\\r\\n     * @param _message             An optional human readable message to everyone watching this contract\\r\\n     */\\r\\n    function suggestMinter(\\r\\n        address _minter,\\r\\n        uint256 _applicationPeriod,\\r\\n        uint256 _applicationFee,\\r\\n        string calldata _message\\r\\n    ) external override {\\r\\n        if (_applicationPeriod < MIN_APPLICATION_PERIOD) revert PeriodTooShort();\\r\\n        if (_applicationFee < MIN_FEE) revert FeeTooLow();\\r\\n        if (minters[_minter] != 0) revert AlreadyRegistered();\\r\\n        _collectProfits(address(this), msg.sender, _applicationFee);\\r\\n        minters[_minter] = block.timestamp + _applicationPeriod;\\r\\n        emit MinterApplied(_minter, _applicationPeriod, _applicationFee, _message);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Make the system more user friendly by skipping the allowance in many cases.\\r\\n     * @dev We trust minters and the positions they have created to mint and burn as they please, so\\r\\n     * giving them arbitrary allowances does not pose an additional risk.\\r\\n     */\\r\\n    function _allowance(address owner, address spender) internal view override returns (uint256) {\\r\\n        uint256 explicit = super._allowance(owner, spender);\\r\\n        if (explicit > 0) {\\r\\n            return explicit; // don't waste gas checking minter\\r\\n        } else if (isMinter(spender) || isMinter(getPositionParent(spender)) || spender == address(reserve)) {\\r\\n            return INFINITY;\\r\\n        } else {\\r\\n            return 0;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice The reserve provided by the owners of collateralized positions.\\r\\n     * @dev The minter reserve can be used to cover losses after the equity holders have been wiped out.\\r\\n     */\\r\\n    function minterReserve() public view returns (uint256) {\\r\\n        return minterReserveE6 / 1000000;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Allows minters to register collateralized debt positions, thereby giving them the ability to mint OracleFreeDollars.\\r\\n     * @dev It is assumed that the responsible minter that registers the position ensures that the position can be trusted.\\r\\n     */\\r\\n    function registerPosition(address _position) external override {\\r\\n        if (!isMinter(msg.sender)) revert NotMinter();\\r\\n        positions[_position] = msg.sender;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice The amount of equity of the OracleFreeDollar system in OFD, owned by the holders of OracleFreeDollar Pool Shares.\\r\\n     * @dev Note that the equity contract technically holds both the minter reserve as well as the equity, so the minter\\r\\n     * reserve must be subtracted. All fees and other kind of income is added to the Equity contract and essentially\\r\\n     * constitutes profits attributable to the pool share holders.\\r\\n     */\\r\\n    function equity() public view returns (uint256) {\\r\\n        uint256 balance = balanceOf(address(reserve));\\r\\n        uint256 minReserve = minterReserve();\\r\\n        if (balance <= minReserve) {\\r\\n            return 0;\\r\\n        } else {\\r\\n            return balance - minReserve;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Qualified pool share holders can deny minters during the application period.\\r\\n     * @dev Calling this function is relatively cheap thanks to the deletion of a storage slot.\\r\\n     */\\r\\n    function denyMinter(address _minter, address[] calldata _helpers, string calldata _message) external override {\\r\\n        if (block.timestamp > minters[_minter]) revert TooLate();\\r\\n        reserve.checkQualified(msg.sender, _helpers);\\r\\n        delete minters[_minter];\\r\\n        emit MinterDenied(_minter, _message);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Mints the provided amount of OFD to the target address, automatically forwarding\\r\\n     * the minting fee and the reserve to the right place.\\r\\n     */\\r\\n    function mintWithReserve(\\r\\n        address _target,\\r\\n        uint256 _amount,\\r\\n        uint32 _reservePPM,\\r\\n        uint32 _feesPPM\\r\\n    ) external override minterOnly {\\r\\n        uint256 usableMint = (_amount * (1000_000 - _feesPPM - _reservePPM)) / 1000_000; // rounding down is fine\\r\\n        _mint(_target, usableMint);\\r\\n        _mint(address(reserve), _amount - usableMint); // rest goes to equity as reserves or as fees\\r\\n        minterReserveE6 += _amount * _reservePPM;\\r\\n        emit Profit(msg.sender, (_feesPPM * _amount) / 1000_000);\\r\\n    }\\r\\n\\r\\n    function mint(address _target, uint256 _amount) external override minterOnly {\\r\\n        _mint(_target, _amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Anyone is allowed to burn their OFD.\\r\\n     */\\r\\n    function burn(uint256 _amount) external {\\r\\n        _burn(msg.sender, _amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Burn someone elses OFD.\\r\\n     */\\r\\n    function burnFrom(address _owner, uint256 _amount) external override minterOnly {\\r\\n        _burn(_owner, _amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Burn that amount without reclaiming the reserve, but freeing it up and thereby essentially donating it to the\\r\\n     * pool share holders. This can make sense in combination with 'coverLoss', i.e. when it is the pool share\\r\\n     * holders that bear the risk and depending on the outcome they make a profit or a loss.\\r\\n     *\\r\\n     * Design rule: Minters calling this method are only allowed to so for tokens amounts they previously minted with\\r\\n     * the same _reservePPM amount.\\r\\n     *\\r\\n     * For example, if someone minted 50 OFD earlier with a 20% reserve requirement (200000 ppm), they got 40 OFD\\r\\n     * and paid 10 OFD into the reserve. Now they want to repay the debt by burning 50 OFD. When doing so using this\\r\\n     * method, 50 OFD get burned and on top of that, 10 OFD previously assigned to the minter's reserved are\\r\\n     * reassigned to the pool share holders.\\r\\n     */\\r\\n    function burnWithoutReserve(uint256 amount, uint32 reservePPM) public override minterOnly {\\r\\n        _burn(msg.sender, amount);\\r\\n        uint256 reserveReduction = amount * reservePPM;\\r\\n        if (reserveReduction > minterReserveE6) {\\r\\n            emit Profit(msg.sender, minterReserveE6 / 1000_000);\\r\\n            minterReserveE6 = 0; // should never happen, but we want robust behavior in case it does\\r\\n        } else {\\r\\n            minterReserveE6 -= reserveReduction;\\r\\n            emit Profit(msg.sender, reserveReduction / 1000_000);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Burns the provided number of tokens plus whatever reserves are associated with that amount given the reserve\\r\\n     * requirement. The caller is only allowed to use this method for tokens also minted through the caller with the\\r\\n     * same _reservePPM amount.\\r\\n     *\\r\\n     * Example: the calling contract has previously minted 100 OFD with a reserve ratio of 20% (i.e. 200000 ppm).\\r\\n     * Now they have 41 OFD that they do not need so they decide to repay that amount. Assuming the reserves are\\r\\n     * only 90% covered, the call to burnWithReserve will burn the 41 plus 9 from the reserve, reducing the outstanding\\r\\n     * 'debt' of the caller by 50 OFD in total. This total is returned by the method so the caller knows how much less\\r\\n     * they owe.\\r\\n     */\\r\\n    function burnWithReserve(\\r\\n        uint256 _amountExcludingReserve,\\r\\n        uint32 _reservePPM\\r\\n    ) external override minterOnly returns (uint256) {\\r\\n        uint256 freedAmount = calculateFreedAmount(_amountExcludingReserve, _reservePPM); // 50 in the example\\r\\n        minterReserveE6 -= freedAmount * _reservePPM; // reduce reserve requirements by original ratio\\r\\n        _transfer(address(reserve), msg.sender, freedAmount - _amountExcludingReserve); // collect assigned reserve\\r\\n        _burn(msg.sender, freedAmount); // burn the rest of the freed amount\\r\\n        return freedAmount;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Burns the target amount taking the tokens to be burned from the payer and the payer's reserve.\\r\\n     * Only use this method for tokens also minted by the caller with the same _reservePPM.\\r\\n     *\\r\\n     * Example: the calling contract has previously minted 100 OFD with a reserve ratio of 20% (i.e. 200000 ppm).\\r\\n     * To burn half of that again, the minter calls burnFrom with a target amount of 50 OFD. Assuming that reserves\\r\\n     * are only 90% covered, this call will deduct 41 OFD from the payer's balance and 9 from the reserve, while\\r\\n     * reducing the minter reserve by 10.\\r\\n     */\\r\\n    function burnFromWithReserve(\\r\\n        address payer,\\r\\n        uint256 targetTotalBurnAmount,\\r\\n        uint32 reservePPM\\r\\n    ) external override minterOnly returns (uint256) {\\r\\n        uint256 assigned = calculateAssignedReserve(targetTotalBurnAmount, reservePPM);\\r\\n        _transfer(address(reserve), payer, assigned); // send reserve to owner\\r\\n        _burn(payer, targetTotalBurnAmount); // and burn the full amount from the owner's address\\r\\n        minterReserveE6 -= targetTotalBurnAmount * reservePPM; // reduce reserve requirements by original ratio\\r\\n        return assigned;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Calculates the reserve attributable to someone who minted the given amount with the given reserve requirement.\\r\\n     * Under normal circumstances, this is just the reserver requirement multiplied by the amount. However, after a\\r\\n     * severe loss of capital that burned into the minter's reserve, this can also be less than that.\\r\\n     */\\r\\n    function calculateAssignedReserve(uint256 mintedAmount, uint32 _reservePPM) public view returns (uint256) {\\r\\n        uint256 theoreticalReserve = (_reservePPM * mintedAmount) / 1000000;\\r\\n        uint256 currentReserve = balanceOf(address(reserve));\\r\\n        uint256 minterReserve_ = minterReserve();\\r\\n        if (currentReserve < minterReserve_) {\\r\\n            // not enough reserves, owner has to take a loss\\r\\n            return (theoreticalReserve * currentReserve) / minterReserve_;\\r\\n        } else {\\r\\n            return theoreticalReserve;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Calculate the amount that is freed when returning amountExcludingReserve given a reserve ratio of reservePPM,\\r\\n     * taking into account potential losses. Example values in the comments.\\r\\n     */\\r\\n    function calculateFreedAmount(\\r\\n        uint256 amountExcludingReserve /* 41 */,\\r\\n        uint32 reservePPM /* 20% */\\r\\n    ) public view returns (uint256) {\\r\\n        uint256 currentReserve = balanceOf(address(reserve)); // 18, 10% below what we should have\\r\\n        uint256 minterReserve_ = minterReserve(); // 20\\r\\n        uint256 adjustedReservePPM = currentReserve < minterReserve_\\r\\n            ? (reservePPM * currentReserve) / minterReserve_\\r\\n            : reservePPM; // 18%\\r\\n        return (1000000 * amountExcludingReserve) / (1000000 - adjustedReservePPM); // 41 / (1-18%) = 50\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Notify the OracleFreeDollar that a minter lost economic access to some coins. This does not mean that the coins are\\r\\n     * literally lost. It just means that some OFD will likely never be repaid and that in order to bring the system\\r\\n     * back into balance, the lost amount of OFD must be removed from the reserve instead.\\r\\n     *\\r\\n     * For example, if a minter printed 1 million OFD for a mortgage and the mortgage turned out to be unsound with\\r\\n     * the house only yielding 800'000 in the subsequent auction, there is a loss of 200'000 that needs to be covered\\r\\n     * by the reserve.\\r\\n     */\\r\\n    function coverLoss(address source, uint256 _amount) external override minterOnly {\\r\\n        uint256 reserveLeft = balanceOf(address(reserve));\\r\\n        if (reserveLeft >= _amount) {\\r\\n            _transfer(address(reserve), source, _amount);\\r\\n        } else {\\r\\n            _transfer(address(reserve), source, reserveLeft);\\r\\n            _mint(source, _amount - reserveLeft);\\r\\n        }\\r\\n        emit Loss(source, _amount);\\r\\n    }\\r\\n\\r\\n    function collectProfits(address source, uint256 _amount) external override minterOnly {\\r\\n        _collectProfits(msg.sender, source, _amount);\\r\\n    }\\r\\n\\r\\n    function _collectProfits(address minter, address source, uint256 _amount) internal {\\r\\n        _transfer(source, address(reserve), _amount);\\r\\n        emit Profit(minter, _amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Returns true if the address is an approved minter.\\r\\n     */\\r\\n    function isMinter(address _minter) public view override returns (bool) {\\r\\n        return minters[_minter] != 0 && block.timestamp >= minters[_minter];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Returns the address of the minter that created this position or null if the provided address is unknown.\\r\\n     */\\r\\n    function getPositionParent(address _position) public view override returns (address) {\\r\\n        return positions[_position];\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x0cc16a8efb58050332b4367254d6d506d8dc81a5356d0326845498888f239af2\",\"license\":\"MIT\"},\"contracts/interface/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n/**\\r\\n *\\r\\n * Copyright (c) 2016-2019 zOS Global Limited\\r\\n *\\r\\n */\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\\r\\n * the optional functions; to access them see `ERC20Detailed`.\\r\\n */\\r\\n\\r\\ninterface IERC20 {\\r\\n    function name() external view returns (string memory);\\r\\n\\r\\n    function symbol() external view returns (string memory);\\r\\n\\r\\n    function decimals() external view returns (uint8);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens in existence.\\r\\n     */\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens owned by `account`.\\r\\n     */\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\r\\n     *\\r\\n     * Returns always true. Throws error on failure.\\r\\n     *\\r\\n     * Emits a `Transfer` event.\\r\\n     */\\r\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remaining number of tokens that `spender` will be\\r\\n     * allowed to spend on behalf of `owner` through `transferFrom`. This is\\r\\n     * zero by default.\\r\\n     *\\r\\n     * This value can change when `approve` or `transferFrom` are called.\\r\\n     */\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * > Beware that changing an allowance with this method brings the risk\\r\\n     * that someone may use both the old and the new allowance by unfortunate\\r\\n     * transaction ordering. One possible solution to mitigate this race\\r\\n     * condition is to first reduce the spender's allowance to 0 and set the\\r\\n     * desired value afterwards:\\r\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n     *\\r\\n     * Emits an `Approval` event.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\r\\n     * allowance mechanism. `amount` is then deducted from the caller's\\r\\n     * allowance.\\r\\n     *\\r\\n     * Returns always true. Throws error on failure.\\r\\n     *\\r\\n     * Emits a `Transfer` event.\\r\\n     */\\r\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n     * another (`to`).\\r\\n     *\\r\\n     * Note that `value` may be zero.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n     * a call to `approve`. `value` is the new allowance.\\r\\n     */\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n}\\r\\n\",\"keccak256\":\"0x8a0a84b5d4e32903d24aec090ab3f22f12623f5817d5d2b03596637b9e19b03a\",\"license\":\"MIT\"},\"contracts/interface/IERC677Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface IERC677Receiver {\\r\\n\\r\\n    function onTokenTransfer(address from, uint256 amount, bytes calldata data) external returns (bool);\\r\\n\\r\\n}\\r\\n\",\"keccak256\":\"0x0321de52cd397d5c2e1edba7b17b38b5590a5f42d76792913a440eb33fcc9c68\",\"license\":\"MIT\"},\"contracts/interface/IOracleFreeDollar.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./IERC20.sol\\\";\\r\\nimport \\\"./IReserve.sol\\\";\\r\\n\\r\\ninterface IOracleFreeDollar is IERC20 {\\r\\n    function suggestMinter(address _minter, uint256 _applicationPeriod, uint256 _applicationFee, string calldata _message) external;\\r\\n\\r\\n    function registerPosition(address position) external;\\r\\n\\r\\n    function denyMinter(address minter, address[] calldata helpers, string calldata message) external;\\r\\n\\r\\n    function reserve() external view returns (IReserve);\\r\\n\\r\\n    function minterReserve() external view returns (uint256);\\r\\n\\r\\n    function calculateAssignedReserve(uint256 mintedAmount, uint32 _reservePPM) external view returns (uint256);\\r\\n\\r\\n    function calculateFreedAmount(uint256 amountExcludingReserve, uint32 reservePPM) external view returns (uint256);\\r\\n\\r\\n    function equity() external view returns (uint256);\\r\\n\\r\\n    function isMinter(address minter) external view returns (bool);\\r\\n\\r\\n    function getPositionParent(address position) external view returns (address);\\r\\n\\r\\n    function mint(address target, uint256 amount) external;\\r\\n\\r\\n    function mintWithReserve(address target, uint256 amount, uint32 reservePPM, uint32 feePPM) external;\\r\\n\\r\\n    function burnFrom(address target, uint256 amount) external;\\r\\n\\r\\n    function burnWithoutReserve(uint256 amountIncludingReserve, uint32 reservePPM) external;\\r\\n\\r\\n    function burnFromWithReserve(address payer, uint256 targetTotalBurnAmount, uint32 _reservePPM) external returns (uint256);\\r\\n\\r\\n    function burnWithReserve(uint256 amountExcludingReserve, uint32 reservePPM) external returns (uint256);\\r\\n\\r\\n    function coverLoss(address source, uint256 amount) external;\\r\\n\\r\\n    function collectProfits(address source, uint256 _amount) external;\\r\\n}\\r\\n\",\"keccak256\":\"0xa03232a309b668853f7a24b261969c370ae237346a389c2546f5009f59654af7\",\"license\":\"MIT\"},\"contracts/interface/IReserve.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./IERC20.sol\\\";\\r\\n\\r\\ninterface IReserve is IERC20 {\\r\\n   function invest(uint256 amount, uint256 expected) external returns (uint256);\\r\\n   function checkQualified(address sender, address[] calldata helpers) external view;\\r\\n}\",\"keccak256\":\"0xa0ec8a4b3c8b5320aca82d7a7a8e9910fd31f03cf44653031474821412cdc1cf\",\"license\":\"MIT\"},\"contracts/utils/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// Copied and adjusted from OpenZeppelin\\r\\n// Adjustments:\\r\\n// - modifications to support ERC-677\\r\\n// - removed require messages to save space\\r\\n// - removed unnecessary require statements\\r\\n// - removed GSN Context\\r\\n// - upgraded to 0.8 to drop SafeMath\\r\\n// - let name() and symbol() be implemented by subclass\\r\\n// - infinite allowance support, with 2^255 and above considered infinite\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"../interface/IERC20.sol\\\";\\r\\nimport \\\"../interface/IERC677Receiver.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Implementation of the `IERC20` interface.\\r\\n *\\r\\n * This implementation is agnostic to the way tokens are created. This means\\r\\n * that a supply mechanism has to be added in a derived contract using `_mint`.\\r\\n * For a generic mechanism see `ERC20Mintable`.\\r\\n *\\r\\n * *For a detailed writeup see our guide [How to implement supply\\r\\n * mechanisms](https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226).*\\r\\n *\\r\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\r\\n * of returning `false` on failure. This behavior is nonetheless conventional\\r\\n * and does not conflict with the expectations of ERC20 applications.\\r\\n *\\r\\n * Additionally, an `Approval` event is emitted on calls to `transferFrom`.\\r\\n * This allows applications to reconstruct the allowance for all accounts just\\r\\n * by listening to said events. Other implementations of the EIP may not emit\\r\\n * these events, as it isn't required by the specification.\\r\\n *\\r\\n */\\r\\n\\r\\nabstract contract ERC20 is IERC20 {\\r\\n    mapping(address account => uint256 balance) private _balances;\\r\\n\\r\\n    mapping(address account => mapping(address spender => uint256 allowance)) private _allowances;\\r\\n\\r\\n    uint256 internal constant INFINITY = (1 << 255);\\r\\n\\r\\n    uint256 private _totalSupply;\\r\\n\\r\\n    uint8 public immutable override decimals;\\r\\n\\r\\n    // Copied from https://github.com/OpenZeppelin/openzeppelin-contracts/pull/4139/files#diff-fa792f7d08644eebc519dac2c29b00a54afc4c6a76b9ef3bba56c8401fe674f6\\r\\n    // Indicates an error related to the current balance of a sender. Used in transfers.\\r\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\r\\n    // Indicates a failure with the spender\\u2019s allowance. Used in transfers.\\r\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\r\\n\\r\\n    constructor(uint8 _decimals) {\\r\\n        decimals = _decimals;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See `IERC20.totalSupply`.\\r\\n     */\\r\\n    function totalSupply() public view override returns (uint256) {\\r\\n        return _totalSupply;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See `IERC20.balanceOf`.\\r\\n     */\\r\\n    function balanceOf(address account) public view override returns (uint256) {\\r\\n        return _balances[account];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See `IERC20.transfer`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `recipient` cannot be the zero address.\\r\\n     * - the caller must have a balance of at least `amount`.\\r\\n     */\\r\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\r\\n        _transfer(msg.sender, recipient, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See `IERC20.allowance`.\\r\\n     */\\r\\n    function allowance(address owner, address spender) external view override returns (uint256) {\\r\\n        return _allowance(owner, spender);\\r\\n    }\\r\\n\\r\\n    function _allowance(address owner, address spender) internal view virtual returns (uint256) {\\r\\n        return _allowances[owner][spender];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See `IERC20.approve`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `spender` cannot be the zero address.\\r\\n     */\\r\\n    function approve(address spender, uint256 value) external override returns (bool) {\\r\\n        _approve(msg.sender, spender, value);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See `IERC20.transferFrom`.\\r\\n     *\\r\\n     * Emits an `Approval` event indicating the updated allowance. This is not\\r\\n     * required by the EIP. See the note at the beginning of `ERC20`;\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - `sender` and `recipient` cannot be the zero address.\\r\\n     * - `sender` must have a balance of at least `value`.\\r\\n     * - the caller must have allowance for `sender`'s tokens of at least\\r\\n     * `amount`.\\r\\n     */\\r\\n    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {\\r\\n        _transfer(sender, recipient, amount);\\r\\n        _useAllowance(sender, msg.sender, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function _useAllowance(address owner, address spender, uint256 amount) internal {\\r\\n        uint256 currentAllowance = _allowance(owner, spender);\\r\\n        if (currentAllowance < INFINITY) {\\r\\n            // Only decrease the allowance if it was not set to 'infinite'\\r\\n            // Documented in github.com/aktionariat/contracts/blob/master/doc/infiniteallowance.md\\r\\n            if (currentAllowance < amount) revert ERC20InsufficientAllowance(owner, currentAllowance, amount);\\r\\n            _approve(owner, spender, currentAllowance - amount);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\r\\n     *\\r\\n     * This is internal function is equivalent to `transfer`, and can be used to\\r\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\r\\n     *\\r\\n     * Emits a `Transfer` event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `sender` cannot be the zero address.\\r\\n     * - `recipient` cannot be the zero address.\\r\\n     * - `sender` must have a balance of at least `amount`.\\r\\n     */\\r\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\r\\n        require(recipient != address(0));\\r\\n\\r\\n        _beforeTokenTransfer(sender, recipient, amount);\\r\\n        if (_balances[sender] < amount) revert ERC20InsufficientBalance(sender, _balances[sender], amount);\\r\\n        _balances[sender] -= amount;\\r\\n        _balances[recipient] += amount;\\r\\n        emit Transfer(sender, recipient, amount);\\r\\n    }\\r\\n\\r\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\r\\n     * the total supply.\\r\\n     *\\r\\n     * Emits a `Transfer` event with `from` set to the zero address.\\r\\n     *\\r\\n     * Requirements\\r\\n     *\\r\\n     * - `to` cannot be the zero address.\\r\\n     */\\r\\n    function _mint(address recipient, uint256 amount) internal virtual {\\r\\n        require(recipient != address(0));\\r\\n\\r\\n        _beforeTokenTransfer(address(0), recipient, amount);\\r\\n\\r\\n        _totalSupply += amount;\\r\\n        _balances[recipient] += amount;\\r\\n        emit Transfer(address(0), recipient, amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\r\\n     * total supply.\\r\\n     *\\r\\n     * Emits a `Transfer` event with `to` set to the zero address.\\r\\n     */\\r\\n    function _burn(address account, uint256 amount) internal virtual {\\r\\n        _beforeTokenTransfer(account, address(0), amount);\\r\\n\\r\\n        _totalSupply -= amount;\\r\\n        _balances[account] -= amount;\\r\\n        emit Transfer(account, address(0), amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\\r\\n     *\\r\\n     * This is internal function is equivalent to `approve`, and can be used to\\r\\n     * e.g. set automatic allowances for certain subsystems, etc.\\r\\n     *\\r\\n     * Emits an `Approval` event.\\r\\n     */\\r\\n    function _approve(address owner, address spender, uint256 value) internal {\\r\\n        _allowances[owner][spender] = value;\\r\\n        emit Approval(owner, spender, value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Hook that is called before any transfer of tokens. This includes\\r\\n     * minting and burning.\\r\\n     *\\r\\n     * Calling conditions:\\r\\n     *\\r\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\r\\n     * will be to transferred to `to`.\\r\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\r\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\r\\n     * - `from` and `to` are never both zero.\\r\\n     *\\r\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\r\\n     */\\r\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\r\\n}\\r\\n\",\"keccak256\":\"0x3c7b69b7764c2c61a50a9985955245d806529b702901fef91583413f5a651fc4\",\"license\":\"MIT\"},\"contracts/utils/ERC20PermitLight.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// Copied from https://github.com/transmissions11/solmate/blob/main/src/tokens/ERC20.sol\\r\\n// and modified it.\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./ERC20.sol\\\";\\r\\n\\r\\nabstract contract ERC20PermitLight is ERC20 {\\r\\n    /*//////////////////////////////////////////////////////////////\\r\\n                            EIP-2612 STORAGE\\r\\n    //////////////////////////////////////////////////////////////*/\\r\\n\\r\\n    mapping(address account => uint256 nonce) public nonces;\\r\\n\\r\\n    /*//////////////////////////////////////////////////////////////\\r\\n                             EIP-2612 LOGIC\\r\\n    //////////////////////////////////////////////////////////////*/\\r\\n\\r\\n    function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\r\\n        require(deadline >= block.timestamp, \\\"PERMIT_DEADLINE_EXPIRED\\\");\\r\\n\\r\\n        unchecked {\\r\\n            // unchecked to save a little gas with the nonce increment...\\r\\n            address recoveredAddress = ecrecover(\\r\\n                keccak256(\\r\\n                    abi.encodePacked(\\r\\n                        \\\"\\\\x19\\\\x01\\\",\\r\\n                        DOMAIN_SEPARATOR(),\\r\\n                        keccak256(\\r\\n                            abi.encode(\\r\\n                                // keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\"),\\r\\n                                bytes32(0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9),\\r\\n                                owner,\\r\\n                                spender,\\r\\n                                value,\\r\\n                                nonces[owner]++,\\r\\n                                deadline\\r\\n                            )\\r\\n                        )\\r\\n                    )\\r\\n                ),\\r\\n                v,\\r\\n                r,\\r\\n                s\\r\\n            );\\r\\n\\r\\n            require(recoveredAddress != address(0) && recoveredAddress == owner, \\\"INVALID_SIGNER\\\");\\r\\n            _approve(recoveredAddress, spender, value);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function DOMAIN_SEPARATOR() public view returns (bytes32) {\\r\\n        return\\r\\n            keccak256(\\r\\n                abi.encode(\\r\\n                    //keccak256(\\\"EIP712Domain(uint256 chainId,address verifyingContract)\\\");\\r\\n                    bytes32(0x47e79534a245952e8b16893a336b85a3d9ea9fa8c573f3d803afb92a79469218),\\r\\n                    block.chainid,\\r\\n                    address(this)\\r\\n                )\\r\\n            );\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x5faaf540302e65553a170de68e19e0b385cc1d278fd604069a2ffc26fb534071\",\"license\":\"MIT\"},\"contracts/utils/MathUtil.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @title Functions for share valuation\\r\\n */\\r\\ncontract MathUtil {\\r\\n    uint256 internal constant ONE_DEC18 = 10 ** 18;\\r\\n\\r\\n    // Let's go for 12 digits of precision (18-6)\\r\\n    uint256 internal constant THRESH_DEC18 = 10 ** 6;\\r\\n\\r\\n    /**\\r\\n     * @notice Cubic root with Halley approximation\\r\\n     *         Number 1e18 decimal\\r\\n     * @param _v     number for which we calculate x**(1/3)\\r\\n     * @return returns _v**(1/3)\\r\\n     */\\r\\n    function _cubicRoot(uint256 _v) internal pure returns (uint256) {\\r\\n        // Good first guess for _v slightly above 1.0, which is often the case in the OracleFreeDollar system\\r\\n        uint256 x = _v > ONE_DEC18 && _v < 10 ** 19 ? (_v - ONE_DEC18) / 3 + ONE_DEC18 : ONE_DEC18;\\r\\n        uint256 diff;\\r\\n        do {\\r\\n            uint256 powX3 = _mulD18(_mulD18(x, x), x);\\r\\n            uint256 xnew = x * (powX3 + 2 * _v) / (2 * powX3 + _v);\\r\\n            diff = xnew > x ? xnew - x : x - xnew;\\r\\n            x = xnew;\\r\\n        } while (diff > THRESH_DEC18);\\r\\n        return x;\\r\\n    }\\r\\n\\r\\n    function _mulD18(uint256 _a, uint256 _b) internal pure returns (uint256) {\\r\\n        return (_a * _b) / ONE_DEC18;\\r\\n    }\\r\\n\\r\\n    function _divD18(uint256 _a, uint256 _b) internal pure returns (uint256) {\\r\\n        return (_a * ONE_DEC18) / _b;\\r\\n    }\\r\\n\\r\\n    function _power3(uint256 _x) internal pure returns (uint256) {\\r\\n        return _mulD18(_mulD18(_x, _x), _x);\\r\\n    }\\r\\n\\r\\n    function _min(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a < b ? a : b;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x01c56ae198e483572bba52a3a3ce50ec8ac2ace52fbfade6e98eca76cd0fd887\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101006040523480156200001257600080fd5b5060405162004246380380620042468339810160408190526200003591620000a2565b601260805260a08190523360e0526040513090620000539062000094565b6001600160a01b039091168152602001604051809103906000f08015801562000080573d6000803e3d6000fd5b506001600160a01b031660c05250620000bc565b6122918062001fb583390190565b600060208284031215620000b557600080fd5b5051919050565b60805160a05160c05160e051611e5d6200015860003960006113030152600081816104fe015281816105fb015281816106ff0152818161097901528181610a1f01528181610acb01528181610c1001528181610f5801528181610f9b01528181610fcb0152818161125d015281816113940152818161177901526118370152600081816102b00152610dfb015260006102ea0152611e5d6000f3fe608060405234801561001057600080fd5b506004361061021c5760003560e01c806391a0ac6a11610125578063cd3293de116100ad578063d505accf1161007c578063d505accf1461054e578063dd62ed3e14610561578063e093c8a414610574578063f399e22e14610587578063f46eccc41461059a57600080fd5b8063cd3293de146104f9578063d1a15ff114610520578063d1fa5e9814610533578063d38bb0091461054657600080fd5b8063a9059cbb116100f4578063a9059cbb14610481578063aa271e1a14610494578063aa5dd7f1146104a7578063b52c696d146104d3578063c7641866146104e657600080fd5b806391a0ac6a1461043457806395d89b411461043c5780639b404da61461045b578063a47d75ad1461046e57600080fd5b806340c10f19116101a857806370a082311161017757806370a08231146103b557806376c7a3c7146103de57806379cc6790146103ee5780637ecebe00146104015780638112eb2b1461042157600080fd5b806340c10f191461033957806342966c681461034e57806355f57510146103615780636ebdb8ee146103a257600080fd5b80631a46c7e9116101ef5780631a46c7e9146102ab57806323b872dd146102d2578063313ce567146102e5578063315f3e721461031e5780633644e5151461033157600080fd5b806306fdde0314610221578063095ea7b31461025f57806316e0e5381461028257806318160ddd146102a3575b600080fd5b60408051808201909152601081526f27b930b1b632a33932b2a237b63630b960811b60208201525b604051610256919061188e565b60405180910390f35b61027261026d3660046118f8565b6105ba565b6040519015158152602001610256565b610295610290366004611936565b6105d1565b604051908152602001610256565b600254610295565b6102957f000000000000000000000000000000000000000000000000000000000000000081565b6102726102e0366004611962565b610675565b61030c7f000000000000000000000000000000000000000000000000000000000000000081565b60405160ff9091168152602001610256565b61029561032c36600461199e565b610697565b61029561075e565b61034c6103473660046118f8565b6107b7565b005b61034c61035c3660046119da565b610818565b61038a61036f3660046119f3565b6006602052600090815260409020546001600160a01b031681565b6040516001600160a01b039091168152602001610256565b61034c6103b03660046118f8565b610825565b6102956103c33660046119f3565b6001600160a01b031660009081526020819052604090205490565b610295683635c9adc5dea0000081565b61034c6103fc3660046118f8565b610883565b61029561040f3660046119f3565b60036020526000908152604090205481565b61034c61042f366004611a0e565b6108e0565b610295610a15565b60408051808201909152600381526213d19160ea1b6020820152610249565b61034c610469366004611aa4565b610a7b565b61029561047c366004611936565b610b81565b61027261048f3660046118f8565b610c50565b6102726104a23660046119f3565b610c5d565b61038a6104b53660046119f3565b6001600160a01b039081166000908152600660205260409020541690565b61034c6104e13660046119f3565b610c9e565b61034c6104f4366004611936565b610ced565b61038a7f000000000000000000000000000000000000000000000000000000000000000081565b61034c61052e366004611b56565b610df9565b61034c6105413660046118f8565b610f03565b61029561103a565b61034c61055c366004611bad565b611052565b61029561056f366004611c20565b611247565b610295610582366004611936565b611253565b61034c610595366004611c4a565b6112f8565b6102956105a83660046119f3565b60056020526000908152604090205481565b60006105c733848461146d565b5060015b92915050565b600080620f42406105e88563ffffffff8616611cb3565b6105f29190611cca565b905060006106357f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031660009081526020819052604090205490565b9050600061064161103a565b90508082101561066a57806106568385611cb3565b6106609190611cca565b93505050506105cb565b8293505050506105cb565b60006106828484846114cf565b61068d8433846115e6565b5060019392505050565b60006106a233610c5d565b1580156106ce5750336000908152600660205260409020546106cc906001600160a01b0316610c5d565b155b156106ec57604051633e34a41b60e21b815260040160405180910390fd5b60006106f884846105d1565b90506107257f000000000000000000000000000000000000000000000000000000000000000086836114cf565b61072f8585611654565b61073f63ffffffff841685611cb3565b600460008282546107509190611cec565b909155509095945050505050565b604080517f47e79534a245952e8b16893a336b85a3d9ea9fa8c573f3d803afb92a794692186020820152469181019190915230606082015260009060800160405160208183030381529060405280519060200120905090565b6107c033610c5d565b1580156107ec5750336000908152600660205260409020546107ea906001600160a01b0316610c5d565b155b1561080a57604051633e34a41b60e21b815260040160405180910390fd5b61081482826116de565b5050565b6108223382611654565b50565b61082e33610c5d565b15801561085a575033600090815260066020526040902054610858906001600160a01b0316610c5d565b155b1561087857604051633e34a41b60e21b815260040160405180910390fd5b610814338383611773565b61088c33610c5d565b1580156108b85750336000908152600660205260409020546108b6906001600160a01b0316610c5d565b155b156108d657604051633e34a41b60e21b815260040160405180910390fd5b6108148282611654565b6108e933610c5d565b158015610915575033600090815260066020526040902054610913906001600160a01b0316610c5d565b155b1561093357604051633e34a41b60e21b815260040160405180910390fd5b6000620f4240836109448483611cff565b61094e9190611cff565b61095e9063ffffffff1686611cb3565b6109689190611cca565b905061097485826116de565b6109a77f00000000000000000000000000000000000000000000000000000000000000006109a28387611cec565b6116de565b6109b763ffffffff841685611cb3565b600460008282546109c89190611d1c565b90915550339050600080516020611e08833981519152620f42406109f28763ffffffff8716611cb3565b6109fc9190611cca565b6040519081526020015b60405180910390a25050505050565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000166000908152602081905260408120546000610a5861103a565b9050808211610a6a5760009250505090565b610a748183611cec565b9250505090565b6001600160a01b038516600090815260056020526040902054421115610ab45760405163ecdd1c2960e01b815260040160405180910390fd5b60405163352e3a8360e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063352e3a8390610b0490339088908890600401611d2f565b60006040518083038186803b158015610b1c57600080fd5b505afa158015610b30573d6000803e3d6000fd5b505050506001600160a01b03851660008181526005602052604080822091909155517fd60c86e83346fdbe3124cb7d1cba32973a9f62d05c4ec801bfe6c09d1038038190610a069085908590611db2565b6000610b8c33610c5d565b158015610bb8575033600090815260066020526040902054610bb6906001600160a01b0316610c5d565b155b15610bd657604051633e34a41b60e21b815260040160405180910390fd5b6000610be28484611253565b9050610bf463ffffffff841682611cb3565b60046000828254610c059190611cec565b90915550610c3f90507f000000000000000000000000000000000000000000000000000000000000000033610c3a8785611cec565b6114cf565b610c493382611654565b9392505050565b60006105c73384846114cf565b6001600160a01b038116600090815260056020526040812054158015906105cb5750506001600160a01b031660009081526005602052604090205442101590565b610ca733610c5d565b610cc457604051633e34a41b60e21b815260040160405180910390fd5b6001600160a01b0316600090815260066020526040902080546001600160a01b03191633179055565b610cf633610c5d565b158015610d22575033600090815260066020526040902054610d20906001600160a01b0316610c5d565b155b15610d4057604051633e34a41b60e21b815260040160405180910390fd5b610d4a3383611654565b6000610d5c63ffffffff831684611cb3565b9050600454811115610dad57336001600160a01b0316600080516020611e08833981519152620f4240600454610d929190611cca565b60405190815260200160405180910390a26000600455505050565b8060046000828254610dbf9190611cec565b90915550339050600080516020611e08833981519152610de2620f424084611cca565b6040519081526020015b60405180910390a2505050565b7f0000000000000000000000000000000000000000000000000000000000000000841015610e3a57604051631260d0af60e31b815260040160405180910390fd5b683635c9adc5dea00000831015610e645760405163732f941360e01b815260040160405180910390fd5b6001600160a01b03851660009081526005602052604090205415610e9b57604051630ea075bf60e21b815260040160405180910390fd5b610ea6303385611773565b610eb08442611d1c565b6001600160a01b038616600081815260056020526040908190209290925590517f97326258efdae63280617ca33884e507791c2abeed7b82acd77f1853394ef94b90610a06908790879087908790611dce565b610f0c33610c5d565b158015610f38575033600090815260066020526040902054610f36906001600160a01b0316610c5d565b155b15610f5657604051633e34a41b60e21b815260040160405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316600090815260208190526040902054818110610fc657610fc17f000000000000000000000000000000000000000000000000000000000000000084846114cf565b610fff565b610ff17f000000000000000000000000000000000000000000000000000000000000000084836114cf565b610fff836109a28385611cec565b826001600160a01b03167f72fba0ba07d937c660a3130fca36005c0e476cb97b6f00de413976e37eba950183604051610dec91815260200190565b6000620f424060045461104d9190611cca565b905090565b428410156110a75760405162461bcd60e51b815260206004820152601760248201527f5045524d49545f444541444c494e455f4558504952454400000000000000000060448201526064015b60405180910390fd5b600060016110b361075e565b6001600160a01b038a811660008181526003602090815260409182902080546001810190915582517f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c98184015280840194909452938d166060840152608083018c905260a083019390935260c08083018b90528151808403909101815260e08301909152805192019190912061190160f01b6101008301526101028201929092526101228101919091526101420160408051601f198184030181528282528051602091820120600084529083018083525260ff871690820152606081018590526080810184905260a0016020604051602081039080840390855afa1580156111bf573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116158015906111f55750876001600160a01b0316816001600160a01b0316145b6112325760405162461bcd60e51b815260206004820152600e60248201526d24a72b20a624a22fa9a4a3a722a960911b604482015260640161109e565b61123d81888861146d565b5050505050505050565b6000610c4983836117c7565b6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016600090815260208190526040812054600061129661103a565b905060008183106112ad578463ffffffff166112c8565b816112be8463ffffffff8816611cb3565b6112c89190611cca565b90506112d781620f4240611cec565b6112e487620f4240611cb3565b6112ee9190611cca565b9695505050505050565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146113875760405162461bcd60e51b815260206004820152602e60248201527f4f7261636c6546726565446f6c6c61723a204f6e6c79206465706c6f7965722060448201526d63616e20696e697469616c697a6560901b606482015260840161109e565b60025415801561141657507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156113f0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114149190611dee565b155b61141f57600080fd5b6001600160a01b038316600081815260056020526040808220429055517f97326258efdae63280617ca33884e507791c2abeed7b82acd77f1853394ef94b91610dec91819087908790611dce565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b6001600160a01b0382166114e257600080fd5b6001600160a01b038316600090815260208190526040902054811115611545576001600160a01b0383166000818152602081905260409081902054905163391434e360e21b8152600481019290925260248201526044810182905260640161109e565b6001600160a01b0383166000908152602081905260408120805483929061156d908490611cec565b90915550506001600160a01b0382166000908152602081905260408120805483929061159a908490611d1c565b92505081905550816001600160a01b0316836001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516114c291815260200190565b60006115f284846117c7565b9050600160ff1b81101561164e578181101561163a57604051637dc7a0d960e11b81526001600160a01b0385166004820152602481018290526044810183905260640161109e565b61164e84846116498585611cec565b61146d565b50505050565b80600260008282546116669190611cec565b90915550506001600160a01b03821660009081526020819052604081208054839290611693908490611cec565b90915550506040518181526000906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906020015b60405180910390a35050565b6001600160a01b0382166116f157600080fd5b80600260008282546117039190611d1c565b90915550506001600160a01b03821660009081526020819052604081208054839290611730908490611d1c565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906020016116d2565b61179e827f0000000000000000000000000000000000000000000000000000000000000000836114cf565b826001600160a01b0316600080516020611e0883398151915282604051610dec91815260200190565b6001600160a01b03808316600090815260016020908152604080832093851683529290529081205480156117fc5790506105cb565b61180583610c5d565b8061182f57506001600160a01b0380841660009081526006602052604090205461182f9116610c5d565b8061186b57507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316836001600160a01b0316145b1561187d57600160ff1b9150506105cb565b60009150506105cb565b5092915050565b600060208083528351808285015260005b818110156118bb5785810183015185820160400152820161189f565b506000604082860101526040601f19601f8301168501019250505092915050565b80356001600160a01b03811681146118f357600080fd5b919050565b6000806040838503121561190b57600080fd5b611914836118dc565b946020939093013593505050565b803563ffffffff811681146118f357600080fd5b6000806040838503121561194957600080fd5b8235915061195960208401611922565b90509250929050565b60008060006060848603121561197757600080fd5b611980846118dc565b925061198e602085016118dc565b9150604084013590509250925092565b6000806000606084860312156119b357600080fd5b6119bc846118dc565b9250602084013591506119d160408501611922565b90509250925092565b6000602082840312156119ec57600080fd5b5035919050565b600060208284031215611a0557600080fd5b610c49826118dc565b60008060008060808587031215611a2457600080fd5b611a2d856118dc565b935060208501359250611a4260408601611922565b9150611a5060608601611922565b905092959194509250565b60008083601f840112611a6d57600080fd5b50813567ffffffffffffffff811115611a8557600080fd5b602083019150836020828501011115611a9d57600080fd5b9250929050565b600080600080600060608688031215611abc57600080fd5b611ac5866118dc565b9450602086013567ffffffffffffffff80821115611ae257600080fd5b818801915088601f830112611af657600080fd5b813581811115611b0557600080fd5b8960208260051b8501011115611b1a57600080fd5b602083019650809550506040880135915080821115611b3857600080fd5b50611b4588828901611a5b565b969995985093965092949392505050565b600080600080600060808688031215611b6e57600080fd5b611b77866118dc565b94506020860135935060408601359250606086013567ffffffffffffffff811115611ba157600080fd5b611b4588828901611a5b565b600080600080600080600060e0888a031215611bc857600080fd5b611bd1886118dc565b9650611bdf602089016118dc565b95506040880135945060608801359350608088013560ff81168114611c0357600080fd5b9699959850939692959460a0840135945060c09093013592915050565b60008060408385031215611c3357600080fd5b611c3c836118dc565b9150611959602084016118dc565b600080600060408486031215611c5f57600080fd5b611c68846118dc565b9250602084013567ffffffffffffffff811115611c8457600080fd5b611c9086828701611a5b565b9497909650939450505050565b634e487b7160e01b600052601160045260246000fd5b80820281158282048414176105cb576105cb611c9d565b600082611ce757634e487b7160e01b600052601260045260246000fd5b500490565b818103818111156105cb576105cb611c9d565b63ffffffff82811682821603908082111561188757611887611c9d565b808201808211156105cb576105cb611c9d565b6001600160a01b03848116825260406020808401829052908301849052600091859160608501845b87811015611d7c5783611d69866118dc565b1682529382019390820190600101611d57565b5098975050505050505050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b602081526000611dc6602083018486611d89565b949350505050565b8481528360208201526060604082015260006112ee606083018486611d89565b600060208284031215611e0057600080fd5b505191905056fe5314098314219d6e1ce8e41fc5e6ec1ce2f06a9d583079fb6619af9bf6efdf41a264697066735822122033e639b514734e78a20df7581e68835e95861fce89926aaad48a1d2788563eb264736f6c6343000814003360c060405234801561001057600080fd5b50604051620022913803806200229183398101604081905261003191610047565b60126080526001600160a01b031660a052610077565b60006020828403121561005957600080fd5b81516001600160a01b038116811461007057600080fd5b9392505050565b60805160a0516121bc620000d56000396000818161051a015281816107d30152818161092901528181610af301528181610ba401528181610cbf01528181610ffb01528181611075015261137d0152600061030f01526121bc6000f3fe608060405234801561001057600080fd5b50600436106101fb5760003560e01c806370a082311161011a578063a9059cbb116100ad578063d505accf1161007c578063d505accf146104c9578063d87aa643146104dc578063d8bff5a5146104ef578063dd62ed3e14610502578063f61d52e61461051557600080fd5b8063a9059cbb14610483578063ad08ce5b14610496578063b0c2bf06146104a9578063c9f72b67146104b657600080fd5b806391ac6f99116100e957806391ac6f991461043457806395d89b41146104475780639823004f14610468578063a035b1fe1461047b57600080fd5b806370a08231146103c55780637ecebe00146103ee578063820710af1461040e57806384a7aa0c1461042157600080fd5b806323b872dd116101925780633644e515116101615780633644e515146103565780633ec161941461035e578063587cde1e146103715780635895b773146103b257600080fd5b806323b872dd146102da578063250f25f4146102ed578063313ce5671461030a578063352e3a831461034357600080fd5b8063151535b9116101ce578063151535b91461029757806318160ddd146102aa5780631e9a6950146102b25780632295abea146102c557600080fd5b806306fdde0314610200578063095ea7b31461024b5780630d15fd771461026e5780630e89c37014610284575b600080fd5b60408051808201909152601b81527f4f7261636c6546726565446f6c6c617220506f6f6c205368617265000000000060208201525b6040516102429190611cbb565b60405180910390f35b61025e610259366004611d25565b61053c565b6040519015158152602001610242565b610276610553565b604051908152602001610242565b610276610292366004611d4f565b6105ae565b61025e6102a5366004611d82565b6105d3565b600254610276565b6102766102c0366004611d25565b61061b565b6102d86102d3366004611de8565b61062f565b005b61025e6102e8366004611e33565b6106fe565b6102f5600381565b60405163ffffffff9091168152602001610242565b6103317f000000000000000000000000000000000000000000000000000000000000000081565b60405160ff9091168152602001610242565b6102d8610351366004611e6f565b610720565b610276610773565b61027661036c366004611ec1565b6107cc565b61039a61037f366004611d82565b6005602052600090815260409020546001600160a01b031681565b6040516001600160a01b039091168152602001610242565b6102766103c0366004611e6f565b610859565b6102766103d3366004611d82565b6001600160a01b031660009081526020819052604090205490565b6102766103fc366004611d82565b60036020526000908152604090205481565b6102d861041c366004611eda565b610913565b61027661042f366004611d82565b610a36565b610276610442366004611f45565b610a65565b6040805180820190915260058152644f4644505360d81b6020820152610235565b6102d8610476366004611d82565b610a97565b610276610aee565b61025e610491366004611d25565b610c49565b6102766104a4366004611ec1565b610c56565b61027665076a7000000081565b6102766104c4366004611d82565b610d9a565b6102d86104d7366004611f87565b610de6565b6102766104ea366004611ffa565b610fd6565b6102766104fd366004611d82565b61123c565b61027661051036600461201c565b61129d565b61039a7f000000000000000000000000000000000000000000000000000000000000000081565b60006105493384846112ca565b5060015b92915050565b600454600090600160c01b90046001600160401b03164260141b6105779190612065565b6001600160401b031661058960025490565b6105939190612085565b6004546105a991906001600160c01b031661209c565b905090565b6000806105bc33868661132c565b9050828110156105cb57600080fd5b949350505050565b6001600160a01b03811660009081526006602052604081205465076a700000009061060a906001600160401b03164260141b612065565b6001600160401b0316101592915050565b600061062833848461132c565b9392505050565b600061063b3383611454565b90506000805b848110801561064f57508282105b156106ab5761068d868683818110610669576106696120af565b905060200201602081019061067e9190611d82565b61068884866120c5565b611454565b610697908361209c565b9150806106a3816120d8565b915050610641565b50600081116106b957600080fd5b81816106c3610553565b6106cd91906120c5565b6106d791906120c5565b6001600160c01b0316600160c01b4260141b6001600160401b031602176004555050505050565b600061070b848484611544565b610716843384611666565b5060019392505050565b600061072d848484610859565b9050610737610553565b6107429060c8612085565b61074e82612710612085565b101561076d5760405163bcfcdc1160e01b815260040160405180910390fd5b50505050565b604080517f47e79534a245952e8b16893a336b85a3d9ea9fa8c573f3d803afb92a794692186020820152469181019190915230606082015260009060800160405160208183030381529060405280519060200120905090565b600061054d7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166391a0ac6a6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561082f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061085391906120f1565b836116e6565b6000806108658561123c565b90506108718484611784565b61087a57600080fd5b60005b8381101561090a576000858583818110610899576108996120af565b90506020020160208101906108ae9190611d82565b9050866001600160a01b0316816001600160a01b0316036108ce57600080fd5b6108d8878261185d565b6108e157600080fd5b6108ea8161123c565b6108f4908461209c565b9250508080610902906120d8565b91505061087d565b50949350505050565b610927670de0b6b3a76400006103e8612085565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166391a0ac6a6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610985573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109a991906120f1565b106109b357600080fd5b6109be338585610720565b60005b81811015610a2f5760008383838181106109dd576109dd6120af565b90506020020160208101906109f29190611d82565b9050610a1c81610a17836001600160a01b031660009081526020819052604090205490565b6118c3565b5080610a27816120d8565b9150506109c1565b5050505050565b6000610a40610553565b610a498361123c565b610a5b90670de0b6b3a7640000612085565b61054d9190612120565b6000610a72853385611666565b6000610a7f86868661132c565b905082811015610a8e57600080fd5b95945050505050565b3360008181526005602052604080822080546001600160a01b0319166001600160a01b03861690811790915590519092917fd000f39f92c3ed77f890f16b6ced1555e0ab2cdf470522d2210de67d8c83d45b91a350565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166391a0ac6a6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610b4f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b7391906120f1565b9050801580610b825750600254155b15610b9657670de0b6b3a764000091505090565b600254670de0b6b3a76400007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166391a0ac6a6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610c00573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c2491906120f1565b610c2f906003612085565b610c399190612085565b610c439190612120565b91505090565b6000610549338484611544565b600080610c6260025490565b905080610c77670de0b6b3a76400008561209c565b10610cbb5760405162461bcd60e51b815260206004820152600f60248201526e746f6f206d616e792073686172657360881b60448201526064015b60405180910390fd5b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166391a0ac6a6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610d1b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d3f91906120f1565b905060006103e8610d52866103e5612085565b610d5c9190612120565b90506000610d8483610d7f610d7a610d7486896120c5565b88611959565b611978565b611989565b9050610d9081846120c5565b9695505050505050565b6001600160a01b038116600090815260066020526040812054601490610dcb906001600160401b031642831b612065565b6001600160401b0316901c6001600160401b03169050919050565b42841015610e365760405162461bcd60e51b815260206004820152601760248201527f5045524d49545f444541444c494e455f455850495245440000000000000000006044820152606401610cb2565b60006001610e42610773565b6001600160a01b038a811660008181526003602090815260409182902080546001810190915582517f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c98184015280840194909452938d166060840152608083018c905260a083019390935260c08083018b90528151808403909101815260e08301909152805192019190912061190160f01b6101008301526101028201929092526101228101919091526101420160408051601f198184030181528282528051602091820120600084529083018083525260ff871690820152606081018590526080810184905260a0016020604051602081039080840390855afa158015610f4e573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b03811615801590610f845750876001600160a01b0316816001600160a01b0316145b610fc15760405162461bcd60e51b815260206004820152600e60248201526d24a72b20a624a22fa9a4a3a722a960911b6044820152606401610cb2565b610fcc8188886112ca565b5050505050505050565b6040516323b872dd60e01b8152336004820152306024820152604481018390526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906323b872dd906064016020604051808303816000875af115801561104c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110709190612134565b5060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166391a0ac6a6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156110d1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110f591906120f1565b905061110b670de0b6b3a76400006103e8612085565b8110156111495760405162461bcd60e51b815260206004820152600c60248201526b696e7375662065717569747960a01b6044820152606401610cb2565b600061116e858311156111655761116086846120c5565b611168565b60005b866116e6565b90508381101561117d57600080fd5b611187338261199e565b7fd98fb7c2b7c7b545387da80b92c08bc5d2a4b922fb74851c3d27ee07ca897bdf3382876111b3610aee565b604080516001600160a01b039095168552602085019390935291830152606082015260800160405180910390a16bffffffffffffffffffffffff6111f660025490565b11156105cb5760405162461bcd60e51b81526020600482015260156024820152741d1bdd185b081cdd5c1c1b1e48195e18d959591959605a1b6044820152606401610cb2565b6001600160a01b03811660009081526006602052604081205461126b906001600160401b03164260141b612065565b6001600160401b0316611293836001600160a01b031660009081526020819052604090205490565b61054d9190612085565b6001600160a01b038083166000908152600160209081526040808320938516835292905290812054610628565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b6000611337846105d3565b61134057600080fd5b600061134b83610c56565b905061135785846118c3565b60405163a9059cbb60e01b81526001600160a01b038581166004830152602482018390527f0000000000000000000000000000000000000000000000000000000000000000169063a9059cbb906044016020604051808303816000875af11580156113c6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113ea9190612134565b507fd98fb7c2b7c7b545387da80b92c08bc5d2a4b922fb74851c3d27ee07ca897bdf8561141685612156565b8361141f610aee565b604080516001600160a01b039095168552602085019390935291830152606082015260800160405180910390a1949350505050565b6000806114608461123c565b90508083106114a8576001600160a01b0384166000908152600660205260409020805467ffffffffffffffff19164260141b6001600160401b0316179055915081905061054d565b6001600160a01b0384166000908152602081905260409020546114cb84836120c5565b6114d59190612120565b6114eb906001600160401b034260141b166120c5565b6001600160a01b0385166000908152600660205260409020805467ffffffffffffffff19166001600160401b039290921691909117905561152b8461123c565b61153590826120c5565b91505061054d565b5092915050565b6001600160a01b03821661155757600080fd5b611562838383611a3f565b6001600160a01b0383166000908152602081905260409020548111156115c5576001600160a01b0383166000818152602081905260409081902054905163391434e360e21b81526004810192909252602482015260448101829052606401610cb2565b6001600160a01b038316600090815260208190526040812080548392906115ed9084906120c5565b90915550506001600160a01b0382166000908152602081905260408120805483929061161a90849061209c565b92505081905550816001600160a01b0316836001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8360405161131f91815260200190565b6001600160a01b03838116600090815260016020908152604080832093861683529290522054600160ff1b81101561076d57818110156116d257604051637dc7a0d960e11b81526001600160a01b03851660048201526024810182905260448101839052606401610cb2565b61076d84846116e185856120c5565b6112ca565b6000806116f260025490565b905060006103e8611705856103e5612085565b61170f9190612120565b90506000611727670de0b6b3a76400006103e8612085565b861080611732575082155b61175a5761175583610d7f61175061174a868b61209c565b8a611959565b611a63565b611778565b61176e670de0b6b3a76400006103e8612085565b611778908461209c565b9050610d9083826120c5565b6000600182116117965750600161054d565b6000838360008181106117ab576117ab6120af565b90506020020160208101906117c09190611d82565b905060015b8381101561185257816001600160a01b03168585838181106117e9576117e96120af565b90506020020160208101906117fe9190611d82565b6001600160a01b0316116118175760009250505061054d565b848482818110611829576118296120af565b905060200201602081019061183e9190611d82565b91508061184a816120d8565b9150506117c5565b50600191505061054d565b6000826001600160a01b0316826001600160a01b0316036118805750600161054d565b6001600160a01b0382166118965750600061054d565b6001600160a01b038083166000908152600560205260409020546118bc9185911661185d565b905061054d565b6118cf82600083611a3f565b80600260008282546118e191906120c5565b90915550506001600160a01b0382166000908152602081905260408120805483929061190e9084906120c5565b90915550506040518181526000906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906020015b60405180910390a35050565b60008161196e670de0b6b3a764000085612085565b6106289190612120565b600061054d6119878384611989565b835b6000670de0b6b3a764000061196e8385612085565b6001600160a01b0382166119b157600080fd5b6119bd60008383611a3f565b80600260008282546119cf919061209c565b90915550506001600160a01b038216600090815260208190526040812080548392906119fc90849061209c565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200161194d565b8015611a5e576000611a518383611b55565b905061076d848383611c13565b505050565b600080670de0b6b3a764000083118015611a845750678ac7230489e8000083105b611a9657670de0b6b3a7640000611abf565b670de0b6b3a76400006003611aab82866120c5565b611ab59190612120565b611abf919061209c565b905060005b6000611ad9611ad38485611989565b84611989565b9050600085611ae9836002612085565b611af3919061209c565b611afe876002612085565b611b08908461209c565b611b129086612085565b611b1c9190612120565b9050838111611b3457611b2f81856120c5565b611b3e565b611b3e84826120c5565b909350915050620f42408111611ac4575092915050565b60006001600160a01b03831615611c0b576000611b718461123c565b9050600083611b95866001600160a01b031660009081526020819052604090205490565b611b9f919061209c565b9050611bab8183612120565b611bc1906001600160401b034260141b166120c5565b6001600160a01b0386166000908152600660205260409020805467ffffffffffffffff19166001600160401b0392909216919091179055611c028183612172565b9250505061054d565b50600061054d565b4260141b60006001600160a01b03851615611c6e576001600160a01b0385166000908152600660205260409020548490611c56906001600160401b031684612065565b6001600160401b0316611c699190612085565b611c71565b60005b90508083611c7d610553565b611c8791906120c5565b611c9191906120c5565b6001600160401b03909216600160c01b026001600160c01b03929092169190911760045550505050565b600060208083528351808285015260005b81811015611ce857858101830151858201604001528201611ccc565b506000604082860101526040601f19601f8301168501019250505092915050565b80356001600160a01b0381168114611d2057600080fd5b919050565b60008060408385031215611d3857600080fd5b611d4183611d09565b946020939093013593505050565b600080600060608486031215611d6457600080fd5b611d6d84611d09565b95602085013595506040909401359392505050565b600060208284031215611d9457600080fd5b61062882611d09565b60008083601f840112611daf57600080fd5b5081356001600160401b03811115611dc657600080fd5b6020830191508360208260051b8501011115611de157600080fd5b9250929050565b600080600060408486031215611dfd57600080fd5b83356001600160401b03811115611e1357600080fd5b611e1f86828701611d9d565b909790965060209590950135949350505050565b600080600060608486031215611e4857600080fd5b611e5184611d09565b9250611e5f60208501611d09565b9150604084013590509250925092565b600080600060408486031215611e8457600080fd5b611e8d84611d09565b925060208401356001600160401b03811115611ea857600080fd5b611eb486828701611d9d565b9497909650939450505050565b600060208284031215611ed357600080fd5b5035919050565b60008060008060408587031215611ef057600080fd5b84356001600160401b0380821115611f0757600080fd5b611f1388838901611d9d565b90965094506020870135915080821115611f2c57600080fd5b50611f3987828801611d9d565b95989497509550505050565b60008060008060808587031215611f5b57600080fd5b611f6485611d09565b9350611f7260208601611d09565b93969395505050506040820135916060013590565b600080600080600080600060e0888a031215611fa257600080fd5b611fab88611d09565b9650611fb960208901611d09565b95506040880135945060608801359350608088013560ff81168114611fdd57600080fd5b9699959850939692959460a0840135945060c09093013592915050565b6000806040838503121561200d57600080fd5b50508035926020909101359150565b6000806040838503121561202f57600080fd5b61203883611d09565b915061204660208401611d09565b90509250929050565b634e487b7160e01b600052601160045260246000fd5b6001600160401b0382811682821603908082111561153d5761153d61204f565b808202811582820484141761054d5761054d61204f565b8082018082111561054d5761054d61204f565b634e487b7160e01b600052603260045260246000fd5b8181038181111561054d5761054d61204f565b6000600182016120ea576120ea61204f565b5060010190565b60006020828403121561210357600080fd5b5051919050565b634e487b7160e01b600052601260045260246000fd5b60008261212f5761212f61210a565b500490565b60006020828403121561214657600080fd5b8151801515811461062857600080fd5b6000600160ff1b820161216b5761216b61204f565b5060000390565b6000826121815761218161210a565b50069056fea264697066735822122078ddf8a314f75f2ab1515abc7d63bae0da0cd471024d1c57f460e42b8b18bbd364736f6c63430008140033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061021c5760003560e01c806391a0ac6a11610125578063cd3293de116100ad578063d505accf1161007c578063d505accf1461054e578063dd62ed3e14610561578063e093c8a414610574578063f399e22e14610587578063f46eccc41461059a57600080fd5b8063cd3293de146104f9578063d1a15ff114610520578063d1fa5e9814610533578063d38bb0091461054657600080fd5b8063a9059cbb116100f4578063a9059cbb14610481578063aa271e1a14610494578063aa5dd7f1146104a7578063b52c696d146104d3578063c7641866146104e657600080fd5b806391a0ac6a1461043457806395d89b411461043c5780639b404da61461045b578063a47d75ad1461046e57600080fd5b806340c10f19116101a857806370a082311161017757806370a08231146103b557806376c7a3c7146103de57806379cc6790146103ee5780637ecebe00146104015780638112eb2b1461042157600080fd5b806340c10f191461033957806342966c681461034e57806355f57510146103615780636ebdb8ee146103a257600080fd5b80631a46c7e9116101ef5780631a46c7e9146102ab57806323b872dd146102d2578063313ce567146102e5578063315f3e721461031e5780633644e5151461033157600080fd5b806306fdde0314610221578063095ea7b31461025f57806316e0e5381461028257806318160ddd146102a3575b600080fd5b60408051808201909152601081526f27b930b1b632a33932b2a237b63630b960811b60208201525b604051610256919061188e565b60405180910390f35b61027261026d3660046118f8565b6105ba565b6040519015158152602001610256565b610295610290366004611936565b6105d1565b604051908152602001610256565b600254610295565b6102957f000000000000000000000000000000000000000000000000000000000000000081565b6102726102e0366004611962565b610675565b61030c7f000000000000000000000000000000000000000000000000000000000000000081565b60405160ff9091168152602001610256565b61029561032c36600461199e565b610697565b61029561075e565b61034c6103473660046118f8565b6107b7565b005b61034c61035c3660046119da565b610818565b61038a61036f3660046119f3565b6006602052600090815260409020546001600160a01b031681565b6040516001600160a01b039091168152602001610256565b61034c6103b03660046118f8565b610825565b6102956103c33660046119f3565b6001600160a01b031660009081526020819052604090205490565b610295683635c9adc5dea0000081565b61034c6103fc3660046118f8565b610883565b61029561040f3660046119f3565b60036020526000908152604090205481565b61034c61042f366004611a0e565b6108e0565b610295610a15565b60408051808201909152600381526213d19160ea1b6020820152610249565b61034c610469366004611aa4565b610a7b565b61029561047c366004611936565b610b81565b61027261048f3660046118f8565b610c50565b6102726104a23660046119f3565b610c5d565b61038a6104b53660046119f3565b6001600160a01b039081166000908152600660205260409020541690565b61034c6104e13660046119f3565b610c9e565b61034c6104f4366004611936565b610ced565b61038a7f000000000000000000000000000000000000000000000000000000000000000081565b61034c61052e366004611b56565b610df9565b61034c6105413660046118f8565b610f03565b61029561103a565b61034c61055c366004611bad565b611052565b61029561056f366004611c20565b611247565b610295610582366004611936565b611253565b61034c610595366004611c4a565b6112f8565b6102956105a83660046119f3565b60056020526000908152604090205481565b60006105c733848461146d565b5060015b92915050565b600080620f42406105e88563ffffffff8616611cb3565b6105f29190611cca565b905060006106357f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031660009081526020819052604090205490565b9050600061064161103a565b90508082101561066a57806106568385611cb3565b6106609190611cca565b93505050506105cb565b8293505050506105cb565b60006106828484846114cf565b61068d8433846115e6565b5060019392505050565b60006106a233610c5d565b1580156106ce5750336000908152600660205260409020546106cc906001600160a01b0316610c5d565b155b156106ec57604051633e34a41b60e21b815260040160405180910390fd5b60006106f884846105d1565b90506107257f000000000000000000000000000000000000000000000000000000000000000086836114cf565b61072f8585611654565b61073f63ffffffff841685611cb3565b600460008282546107509190611cec565b909155509095945050505050565b604080517f47e79534a245952e8b16893a336b85a3d9ea9fa8c573f3d803afb92a794692186020820152469181019190915230606082015260009060800160405160208183030381529060405280519060200120905090565b6107c033610c5d565b1580156107ec5750336000908152600660205260409020546107ea906001600160a01b0316610c5d565b155b1561080a57604051633e34a41b60e21b815260040160405180910390fd5b61081482826116de565b5050565b6108223382611654565b50565b61082e33610c5d565b15801561085a575033600090815260066020526040902054610858906001600160a01b0316610c5d565b155b1561087857604051633e34a41b60e21b815260040160405180910390fd5b610814338383611773565b61088c33610c5d565b1580156108b85750336000908152600660205260409020546108b6906001600160a01b0316610c5d565b155b156108d657604051633e34a41b60e21b815260040160405180910390fd5b6108148282611654565b6108e933610c5d565b158015610915575033600090815260066020526040902054610913906001600160a01b0316610c5d565b155b1561093357604051633e34a41b60e21b815260040160405180910390fd5b6000620f4240836109448483611cff565b61094e9190611cff565b61095e9063ffffffff1686611cb3565b6109689190611cca565b905061097485826116de565b6109a77f00000000000000000000000000000000000000000000000000000000000000006109a28387611cec565b6116de565b6109b763ffffffff841685611cb3565b600460008282546109c89190611d1c565b90915550339050600080516020611e08833981519152620f42406109f28763ffffffff8716611cb3565b6109fc9190611cca565b6040519081526020015b60405180910390a25050505050565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000166000908152602081905260408120546000610a5861103a565b9050808211610a6a5760009250505090565b610a748183611cec565b9250505090565b6001600160a01b038516600090815260056020526040902054421115610ab45760405163ecdd1c2960e01b815260040160405180910390fd5b60405163352e3a8360e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063352e3a8390610b0490339088908890600401611d2f565b60006040518083038186803b158015610b1c57600080fd5b505afa158015610b30573d6000803e3d6000fd5b505050506001600160a01b03851660008181526005602052604080822091909155517fd60c86e83346fdbe3124cb7d1cba32973a9f62d05c4ec801bfe6c09d1038038190610a069085908590611db2565b6000610b8c33610c5d565b158015610bb8575033600090815260066020526040902054610bb6906001600160a01b0316610c5d565b155b15610bd657604051633e34a41b60e21b815260040160405180910390fd5b6000610be28484611253565b9050610bf463ffffffff841682611cb3565b60046000828254610c059190611cec565b90915550610c3f90507f000000000000000000000000000000000000000000000000000000000000000033610c3a8785611cec565b6114cf565b610c493382611654565b9392505050565b60006105c73384846114cf565b6001600160a01b038116600090815260056020526040812054158015906105cb5750506001600160a01b031660009081526005602052604090205442101590565b610ca733610c5d565b610cc457604051633e34a41b60e21b815260040160405180910390fd5b6001600160a01b0316600090815260066020526040902080546001600160a01b03191633179055565b610cf633610c5d565b158015610d22575033600090815260066020526040902054610d20906001600160a01b0316610c5d565b155b15610d4057604051633e34a41b60e21b815260040160405180910390fd5b610d4a3383611654565b6000610d5c63ffffffff831684611cb3565b9050600454811115610dad57336001600160a01b0316600080516020611e08833981519152620f4240600454610d929190611cca565b60405190815260200160405180910390a26000600455505050565b8060046000828254610dbf9190611cec565b90915550339050600080516020611e08833981519152610de2620f424084611cca565b6040519081526020015b60405180910390a2505050565b7f0000000000000000000000000000000000000000000000000000000000000000841015610e3a57604051631260d0af60e31b815260040160405180910390fd5b683635c9adc5dea00000831015610e645760405163732f941360e01b815260040160405180910390fd5b6001600160a01b03851660009081526005602052604090205415610e9b57604051630ea075bf60e21b815260040160405180910390fd5b610ea6303385611773565b610eb08442611d1c565b6001600160a01b038616600081815260056020526040908190209290925590517f97326258efdae63280617ca33884e507791c2abeed7b82acd77f1853394ef94b90610a06908790879087908790611dce565b610f0c33610c5d565b158015610f38575033600090815260066020526040902054610f36906001600160a01b0316610c5d565b155b15610f5657604051633e34a41b60e21b815260040160405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316600090815260208190526040902054818110610fc657610fc17f000000000000000000000000000000000000000000000000000000000000000084846114cf565b610fff565b610ff17f000000000000000000000000000000000000000000000000000000000000000084836114cf565b610fff836109a28385611cec565b826001600160a01b03167f72fba0ba07d937c660a3130fca36005c0e476cb97b6f00de413976e37eba950183604051610dec91815260200190565b6000620f424060045461104d9190611cca565b905090565b428410156110a75760405162461bcd60e51b815260206004820152601760248201527f5045524d49545f444541444c494e455f4558504952454400000000000000000060448201526064015b60405180910390fd5b600060016110b361075e565b6001600160a01b038a811660008181526003602090815260409182902080546001810190915582517f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c98184015280840194909452938d166060840152608083018c905260a083019390935260c08083018b90528151808403909101815260e08301909152805192019190912061190160f01b6101008301526101028201929092526101228101919091526101420160408051601f198184030181528282528051602091820120600084529083018083525260ff871690820152606081018590526080810184905260a0016020604051602081039080840390855afa1580156111bf573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116158015906111f55750876001600160a01b0316816001600160a01b0316145b6112325760405162461bcd60e51b815260206004820152600e60248201526d24a72b20a624a22fa9a4a3a722a960911b604482015260640161109e565b61123d81888861146d565b5050505050505050565b6000610c4983836117c7565b6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016600090815260208190526040812054600061129661103a565b905060008183106112ad578463ffffffff166112c8565b816112be8463ffffffff8816611cb3565b6112c89190611cca565b90506112d781620f4240611cec565b6112e487620f4240611cb3565b6112ee9190611cca565b9695505050505050565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146113875760405162461bcd60e51b815260206004820152602e60248201527f4f7261636c6546726565446f6c6c61723a204f6e6c79206465706c6f7965722060448201526d63616e20696e697469616c697a6560901b606482015260840161109e565b60025415801561141657507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156113f0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114149190611dee565b155b61141f57600080fd5b6001600160a01b038316600081815260056020526040808220429055517f97326258efdae63280617ca33884e507791c2abeed7b82acd77f1853394ef94b91610dec91819087908790611dce565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b6001600160a01b0382166114e257600080fd5b6001600160a01b038316600090815260208190526040902054811115611545576001600160a01b0383166000818152602081905260409081902054905163391434e360e21b8152600481019290925260248201526044810182905260640161109e565b6001600160a01b0383166000908152602081905260408120805483929061156d908490611cec565b90915550506001600160a01b0382166000908152602081905260408120805483929061159a908490611d1c565b92505081905550816001600160a01b0316836001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516114c291815260200190565b60006115f284846117c7565b9050600160ff1b81101561164e578181101561163a57604051637dc7a0d960e11b81526001600160a01b0385166004820152602481018290526044810183905260640161109e565b61164e84846116498585611cec565b61146d565b50505050565b80600260008282546116669190611cec565b90915550506001600160a01b03821660009081526020819052604081208054839290611693908490611cec565b90915550506040518181526000906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906020015b60405180910390a35050565b6001600160a01b0382166116f157600080fd5b80600260008282546117039190611d1c565b90915550506001600160a01b03821660009081526020819052604081208054839290611730908490611d1c565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906020016116d2565b61179e827f0000000000000000000000000000000000000000000000000000000000000000836114cf565b826001600160a01b0316600080516020611e0883398151915282604051610dec91815260200190565b6001600160a01b03808316600090815260016020908152604080832093851683529290529081205480156117fc5790506105cb565b61180583610c5d565b8061182f57506001600160a01b0380841660009081526006602052604090205461182f9116610c5d565b8061186b57507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316836001600160a01b0316145b1561187d57600160ff1b9150506105cb565b60009150506105cb565b5092915050565b600060208083528351808285015260005b818110156118bb5785810183015185820160400152820161189f565b506000604082860101526040601f19601f8301168501019250505092915050565b80356001600160a01b03811681146118f357600080fd5b919050565b6000806040838503121561190b57600080fd5b611914836118dc565b946020939093013593505050565b803563ffffffff811681146118f357600080fd5b6000806040838503121561194957600080fd5b8235915061195960208401611922565b90509250929050565b60008060006060848603121561197757600080fd5b611980846118dc565b925061198e602085016118dc565b9150604084013590509250925092565b6000806000606084860312156119b357600080fd5b6119bc846118dc565b9250602084013591506119d160408501611922565b90509250925092565b6000602082840312156119ec57600080fd5b5035919050565b600060208284031215611a0557600080fd5b610c49826118dc565b60008060008060808587031215611a2457600080fd5b611a2d856118dc565b935060208501359250611a4260408601611922565b9150611a5060608601611922565b905092959194509250565b60008083601f840112611a6d57600080fd5b50813567ffffffffffffffff811115611a8557600080fd5b602083019150836020828501011115611a9d57600080fd5b9250929050565b600080600080600060608688031215611abc57600080fd5b611ac5866118dc565b9450602086013567ffffffffffffffff80821115611ae257600080fd5b818801915088601f830112611af657600080fd5b813581811115611b0557600080fd5b8960208260051b8501011115611b1a57600080fd5b602083019650809550506040880135915080821115611b3857600080fd5b50611b4588828901611a5b565b969995985093965092949392505050565b600080600080600060808688031215611b6e57600080fd5b611b77866118dc565b94506020860135935060408601359250606086013567ffffffffffffffff811115611ba157600080fd5b611b4588828901611a5b565b600080600080600080600060e0888a031215611bc857600080fd5b611bd1886118dc565b9650611bdf602089016118dc565b95506040880135945060608801359350608088013560ff81168114611c0357600080fd5b9699959850939692959460a0840135945060c09093013592915050565b60008060408385031215611c3357600080fd5b611c3c836118dc565b9150611959602084016118dc565b600080600060408486031215611c5f57600080fd5b611c68846118dc565b9250602084013567ffffffffffffffff811115611c8457600080fd5b611c9086828701611a5b565b9497909650939450505050565b634e487b7160e01b600052601160045260246000fd5b80820281158282048414176105cb576105cb611c9d565b600082611ce757634e487b7160e01b600052601260045260246000fd5b500490565b818103818111156105cb576105cb611c9d565b63ffffffff82811682821603908082111561188757611887611c9d565b808201808211156105cb576105cb611c9d565b6001600160a01b03848116825260406020808401829052908301849052600091859160608501845b87811015611d7c5783611d69866118dc565b1682529382019390820190600101611d57565b5098975050505050505050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b602081526000611dc6602083018486611d89565b949350505050565b8481528360208201526060604082015260006112ee606083018486611d89565b600060208284031215611e0057600080fd5b505191905056fe5314098314219d6e1ce8e41fc5e6ec1ce2f06a9d583079fb6619af9bf6efdf41a264697066735822122033e639b514734e78a20df7581e68835e95861fce89926aaad48a1d2788563eb264736f6c63430008140033",
  "devdoc": {
    "events": {
      "Approval(address,address,uint256)": {
        "details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to `approve`. `value` is the new allowance."
      },
      "Transfer(address,address,uint256)": {
        "details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
      }
    },
    "kind": "dev",
    "methods": {
      "allowance(address,address)": {
        "details": "See `IERC20.allowance`."
      },
      "approve(address,uint256)": {
        "details": "See `IERC20.approve`. Requirements: - `spender` cannot be the zero address."
      },
      "balanceOf(address)": {
        "details": "See `IERC20.balanceOf`."
      },
      "denyMinter(address,address[],string)": {
        "details": "Calling this function is relatively cheap thanks to the deletion of a storage slot."
      },
      "equity()": {
        "details": "Note that the equity contract technically holds both the minter reserve as well as the equity, so the minter reserve must be subtracted. All fees and other kind of income is added to the Equity contract and essentially constitutes profits attributable to the pool share holders."
      },
      "minterReserve()": {
        "details": "The minter reserve can be used to cover losses after the equity holders have been wiped out."
      },
      "registerPosition(address)": {
        "details": "It is assumed that the responsible minter that registers the position ensures that the position can be trusted."
      },
      "suggestMinter(address,uint256,uint256,string)": {
        "details": "The caller has to pay an application fee that is irrevocably lost even if the new minter is vetoed. The caller must assume that someone will veto the new minter unless there is broad consensus that the new minter adds value to the OracleFreeDollar system. Complex proposals should have application periods and applications fees above the minimum. It is assumed that over time, informal ways to coordinate on new minters emerge. The message parameter might be useful for initiating further communication. Maybe it contains a link to a website describing the proposed minter.",
        "params": {
          "_applicationFee": "The fee paid by the caller, at least MIN_FEE",
          "_applicationPeriod": "The time others have to veto the suggestion, at least MIN_APPLICATION_PERIOD",
          "_message": "An optional human readable message to everyone watching this contract",
          "_minter": "An address that is given the permission to mint OracleFreeDollars"
        }
      },
      "totalSupply()": {
        "details": "See `IERC20.totalSupply`."
      },
      "transfer(address,uint256)": {
        "details": "See `IERC20.transfer`. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See `IERC20.transferFrom`. Emits an `Approval` event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of `ERC20`; Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `value`. - the caller must have allowance for `sender`'s tokens of at least `amount`."
      }
    },
    "title": "OracleFreeDollar",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "MIN_FEE()": {
        "notice": "Minimal fee and application period when suggesting a new minter."
      },
      "burn(uint256)": {
        "notice": "Anyone is allowed to burn their OFD."
      },
      "burnFrom(address,uint256)": {
        "notice": "Burn someone elses OFD."
      },
      "burnFromWithReserve(address,uint256,uint32)": {
        "notice": "Burns the target amount taking the tokens to be burned from the payer and the payer's reserve. Only use this method for tokens also minted by the caller with the same _reservePPM. Example: the calling contract has previously minted 100 OFD with a reserve ratio of 20% (i.e. 200000 ppm). To burn half of that again, the minter calls burnFrom with a target amount of 50 OFD. Assuming that reserves are only 90% covered, this call will deduct 41 OFD from the payer's balance and 9 from the reserve, while reducing the minter reserve by 10."
      },
      "burnWithReserve(uint256,uint32)": {
        "notice": "Burns the provided number of tokens plus whatever reserves are associated with that amount given the reserve requirement. The caller is only allowed to use this method for tokens also minted through the caller with the same _reservePPM amount. Example: the calling contract has previously minted 100 OFD with a reserve ratio of 20% (i.e. 200000 ppm). Now they have 41 OFD that they do not need so they decide to repay that amount. Assuming the reserves are only 90% covered, the call to burnWithReserve will burn the 41 plus 9 from the reserve, reducing the outstanding 'debt' of the caller by 50 OFD in total. This total is returned by the method so the caller knows how much less they owe."
      },
      "burnWithoutReserve(uint256,uint32)": {
        "notice": "Burn that amount without reclaiming the reserve, but freeing it up and thereby essentially donating it to the pool share holders. This can make sense in combination with 'coverLoss', i.e. when it is the pool share holders that bear the risk and depending on the outcome they make a profit or a loss. Design rule: Minters calling this method are only allowed to so for tokens amounts they previously minted with the same _reservePPM amount. For example, if someone minted 50 OFD earlier with a 20% reserve requirement (200000 ppm), they got 40 OFD and paid 10 OFD into the reserve. Now they want to repay the debt by burning 50 OFD. When doing so using this method, 50 OFD get burned and on top of that, 10 OFD previously assigned to the minter's reserved are reassigned to the pool share holders."
      },
      "calculateAssignedReserve(uint256,uint32)": {
        "notice": "Calculates the reserve attributable to someone who minted the given amount with the given reserve requirement. Under normal circumstances, this is just the reserver requirement multiplied by the amount. However, after a severe loss of capital that burned into the minter's reserve, this can also be less than that."
      },
      "calculateFreedAmount(uint256,uint32)": {
        "notice": "Calculate the amount that is freed when returning amountExcludingReserve given a reserve ratio of reservePPM, taking into account potential losses. Example values in the comments."
      },
      "constructor": {
        "notice": "Initiates the OracleFreeDollar with the provided minimum application period for new plugins in seconds, for example 10 days, i.e. 3600*24*10 = 864000"
      },
      "coverLoss(address,uint256)": {
        "notice": "Notify the OracleFreeDollar that a minter lost economic access to some coins. This does not mean that the coins are literally lost. It just means that some OFD will likely never be repaid and that in order to bring the system back into balance, the lost amount of OFD must be removed from the reserve instead. For example, if a minter printed 1 million OFD for a mortgage and the mortgage turned out to be unsound with the house only yielding 800'000 in the subsequent auction, there is a loss of 200'000 that needs to be covered by the reserve."
      },
      "denyMinter(address,address[],string)": {
        "notice": "Qualified pool share holders can deny minters during the application period."
      },
      "equity()": {
        "notice": "The amount of equity of the OracleFreeDollar system in OFD, owned by the holders of OracleFreeDollar Pool Shares."
      },
      "getPositionParent(address)": {
        "notice": "Returns the address of the minter that created this position or null if the provided address is unknown."
      },
      "isMinter(address)": {
        "notice": "Returns true if the address is an approved minter."
      },
      "mintWithReserve(address,uint256,uint32,uint32)": {
        "notice": "Mints the provided amount of OFD to the target address, automatically forwarding the minting fee and the reserve to the right place."
      },
      "minterReserve()": {
        "notice": "The reserve provided by the owners of collateralized positions."
      },
      "minters(address)": {
        "notice": "Map of minters to approval time stamps. If the time stamp is in the past, the minter contract is allowed to mint OracleFreeDollars."
      },
      "positions(address)": {
        "notice": "List of positions that are allowed to mint and the minter that registered them."
      },
      "registerPosition(address)": {
        "notice": "Allows minters to register collateralized debt positions, thereby giving them the ability to mint OracleFreeDollars."
      },
      "reserve()": {
        "notice": "The contract that holds the reserve."
      },
      "suggestMinter(address,uint256,uint256,string)": {
        "notice": "Publicly accessible method to suggest a new way of minting OracleFreeDollar."
      }
    },
    "notice": "The OracleFreeDollar (OFD) is an ERC-20 token that is designed to track the value of the American Dollar. It is not upgradable, but open to arbitrary minting plugins. These are automatically accepted if none of the qualified pool share holders casts a veto, leading to a flexible but conservative governance.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 10964,
        "contract": "contracts/OracleFreeDollar.sol:OracleFreeDollar",
        "label": "_balances",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 10970,
        "contract": "contracts/OracleFreeDollar.sol:OracleFreeDollar",
        "label": "_allowances",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 10978,
        "contract": "contracts/OracleFreeDollar.sol:OracleFreeDollar",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 11362,
        "contract": "contracts/OracleFreeDollar.sol:OracleFreeDollar",
        "label": "nonces",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 2675,
        "contract": "contracts/OracleFreeDollar.sol:OracleFreeDollar",
        "label": "minterReserveE6",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 2683,
        "contract": "contracts/OracleFreeDollar.sol:OracleFreeDollar",
        "label": "minters",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 2688,
        "contract": "contracts/OracleFreeDollar.sol:OracleFreeDollar",
        "label": "positions",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_address)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}