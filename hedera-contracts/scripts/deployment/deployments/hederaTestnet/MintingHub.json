{
  "address": "0xDb322914648dc65d06f7b6A14691e41f0A4414eB",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_ofd",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_leadrate",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_roller",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_factory",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "IncompatibleCollateral",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InsufficientCollateral",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidPos",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UnexpectedPrice",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "position",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "number",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "size",
          "type": "uint256"
        }
      ],
      "name": "ChallengeAverted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "challenger",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "position",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "size",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "number",
          "type": "uint256"
        }
      ],
      "name": "ChallengeStarted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "position",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "number",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "bid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "acquiredCollateral",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "challengeSize",
          "type": "uint256"
        }
      ],
      "name": "ChallengeSucceeded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "pos",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "priceE36MinusDecimals",
          "type": "uint256"
        }
      ],
      "name": "ForcedSale",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "position",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "original",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "collateral",
          "type": "address"
        }
      ],
      "name": "PositionOpened",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "collateral",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "beneficiary",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "PostPonedReturn",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "CHALLENGER_REWARD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "EXPIRED_PRICE_FACTOR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "OPENING_FEE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_challengeNumber",
          "type": "uint32"
        },
        {
          "internalType": "uint256",
          "name": "size",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "postponeCollateralReturn",
          "type": "bool"
        }
      ],
      "name": "bid",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IPosition",
          "name": "pos",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "upToAmount",
          "type": "uint256"
        }
      ],
      "name": "buyExpiredCollateral",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_positionAddr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_collateralAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minimumPrice",
          "type": "uint256"
        }
      ],
      "name": "challenge",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "challenges",
      "outputs": [
        {
          "internalType": "address",
          "name": "challenger",
          "type": "address"
        },
        {
          "internalType": "uint40",
          "name": "start",
          "type": "uint40"
        },
        {
          "internalType": "contract IPosition",
          "name": "position",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "size",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "parent",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_initialCollateral",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_initialMint",
          "type": "uint256"
        },
        {
          "internalType": "uint40",
          "name": "expiration",
          "type": "uint40"
        }
      ],
      "name": "clone",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "parent",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_initialCollateral",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_initialMint",
          "type": "uint256"
        },
        {
          "internalType": "uint40",
          "name": "expiration",
          "type": "uint40"
        }
      ],
      "name": "clone",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IPosition",
          "name": "pos",
          "type": "address"
        }
      ],
      "name": "expiredPurchasePrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ofd",
      "outputs": [
        {
          "internalType": "contract IOracleFreeDollar",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_collateralAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_minCollateral",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_initialCollateral",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_mintingMaximum",
          "type": "uint256"
        },
        {
          "internalType": "uint40",
          "name": "_initPeriodSeconds",
          "type": "uint40"
        },
        {
          "internalType": "uint40",
          "name": "_expirationSeconds",
          "type": "uint40"
        },
        {
          "internalType": "uint40",
          "name": "_challengeSeconds",
          "type": "uint40"
        },
        {
          "internalType": "uint24",
          "name": "_riskPremium",
          "type": "uint24"
        },
        {
          "internalType": "uint256",
          "name": "_liqPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint24",
          "name": "_reservePPM",
          "type": "uint24"
        }
      ],
      "name": "openPosition",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "collateral",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "pendingReturns",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "challengeNumber",
          "type": "uint32"
        }
      ],
      "name": "price",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rate",
      "outputs": [
        {
          "internalType": "contract ILeadrate",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "collateral",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        }
      ],
      "name": "returnPostponedCollateral",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "roller",
      "outputs": [
        {
          "internalType": "contract PositionRoller",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xd552d8c5c261fd854ae21e51acbbccfdb35a054aefc847179487068c90682d7d",
  "receipt": {
    "to": null,
    "from": "0x22a2Aaa43C8Ecedd91d857B5d0779211aFba1379",
    "contractAddress": "0xDb322914648dc65d06f7b6A14691e41f0A4414eB",
    "transactionIndex": 9,
    "gasUsed": "2305825",
    "logsBloom": "0x
    "blockHash": "0xffaa6debb08b090a3dfd324918e62c3c092dbe6cecffba060d04f29fdf5e9c94",
    "transactionHash": "0xd552d8c5c261fd854ae21e51acbbccfdb35a054aefc847179487068c90682d7d",
    "logs": [],
    "blockNumber": 25851530,
    "cumulativeGasUsed": "2305825",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xa79bD079986b7D8C9D98021817dCf7085741D991",
    "0xd5183DD54aBE2dc040213516d19c5532405762D6",
    "0x253fa424a35ab579bE20F878cBcf9ecbeAe23B65",
    "0x7F1Cbf264E60D844f60BdFb22314389cDD50F292"
  ],
  "numDeployments": 1,
  "solcInputHash": "6eaf3ef7f7a823d8899d101cad9f8e1a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ofd\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_leadrate\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_roller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"IncompatibleCollateral\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientCollateral\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidPos\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnexpectedPrice\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"position\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"number\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"size\",\"type\":\"uint256\"}],\"name\":\"ChallengeAverted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"challenger\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"position\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"size\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"number\",\"type\":\"uint256\"}],\"name\":\"ChallengeStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"position\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"number\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"acquiredCollateral\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"challengeSize\",\"type\":\"uint256\"}],\"name\":\"ChallengeSucceeded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pos\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"priceE36MinusDecimals\",\"type\":\"uint256\"}],\"name\":\"ForcedSale\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"position\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"original\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"collateral\",\"type\":\"address\"}],\"name\":\"PositionOpened\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"collateral\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PostPonedReturn\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CHALLENGER_REWARD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"EXPIRED_PRICE_FACTOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OPENING_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_challengeNumber\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"size\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"postponeCollateralReturn\",\"type\":\"bool\"}],\"name\":\"bid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IPosition\",\"name\":\"pos\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"upToAmount\",\"type\":\"uint256\"}],\"name\":\"buyExpiredCollateral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_positionAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_collateralAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minimumPrice\",\"type\":\"uint256\"}],\"name\":\"challenge\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"challenges\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"challenger\",\"type\":\"address\"},{\"internalType\":\"uint40\",\"name\":\"start\",\"type\":\"uint40\"},{\"internalType\":\"contract IPosition\",\"name\":\"position\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"size\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"parent\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_initialCollateral\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_initialMint\",\"type\":\"uint256\"},{\"internalType\":\"uint40\",\"name\":\"expiration\",\"type\":\"uint40\"}],\"name\":\"clone\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"parent\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_initialCollateral\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_initialMint\",\"type\":\"uint256\"},{\"internalType\":\"uint40\",\"name\":\"expiration\",\"type\":\"uint40\"}],\"name\":\"clone\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IPosition\",\"name\":\"pos\",\"type\":\"address\"}],\"name\":\"expiredPurchasePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ofd\",\"outputs\":[{\"internalType\":\"contract IOracleFreeDollar\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_collateralAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_minCollateral\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_initialCollateral\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_mintingMaximum\",\"type\":\"uint256\"},{\"internalType\":\"uint40\",\"name\":\"_initPeriodSeconds\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"_expirationSeconds\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"_challengeSeconds\",\"type\":\"uint40\"},{\"internalType\":\"uint24\",\"name\":\"_riskPremium\",\"type\":\"uint24\"},{\"internalType\":\"uint256\",\"name\":\"_liqPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint24\",\"name\":\"_reservePPM\",\"type\":\"uint24\"}],\"name\":\"openPosition\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collateral\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"pendingReturns\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"challengeNumber\",\"type\":\"uint32\"}],\"name\":\"price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"internalType\":\"contract ILeadrate\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collateral\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"returnPostponedCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"roller\",\"outputs\":[{\"internalType\":\"contract PositionRoller\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Only one instance of this contract is required, whereas every new position comes with a new position contract. Pending challenges are stored as structs in an array.\",\"kind\":\"dev\",\"methods\":{\"bid(uint32,uint256,bool)\":{\"details\":\"In case that the collateral cannot be transfered back to the challenger (i.e. because the collateral token has a blacklist and the challenger is on it), it is possible to postpone the return of the collateral.\",\"params\":{\"_challengeNumber\":\"index of the challenge as broadcast in the event\",\"postponeCollateralReturn\":\"To postpone the return of the collateral to the challenger. Usually false.\",\"size\":\"how much of the collateral the caller wants to bid for at most                          (automatically reduced to the available amount)\"}},\"challenge(address,uint256,uint256)\":{\"params\":{\"_collateralAmount\":\"amount of the collateral we want to challenge\",\"_positionAddr\":\"address of the position we want to challenge\",\"minimumPrice\":\"position.price() to guard against the minter fruntrunning with a price change\"},\"returns\":{\"_0\":\"index of the challenge in challenge-array\"}},\"clone(address,address,uint256,uint256,uint40)\":{\"details\":\"This needs an allowance to be set on the collateral contract such that the minting hub can get the collateral.\"},\"openPosition(address,uint256,uint256,uint256,uint40,uint40,uint40,uint24,uint256,uint24)\":{\"details\":\"For a successful call, you must set an allowance for the collateral token, allowing the minting hub to transfer the initial collateral amount to the newly created position and to withdraw the fees.\",\"params\":{\"_challengeSeconds\":\"challenge period. Longer for less liquid collateral.\",\"_collateralAddress\":\"address of collateral token\",\"_expirationSeconds\":\"position tenor in unit of timestamp (seconds) from 'now'\",\"_initialCollateral\":\"amount of initial collateral to be deposited\",\"_liqPrice\":\"Liquidation price with (36 - token decimals) decimals,                           e.g. 18 decimals for an 18 dec collateral, 36 decs for a 0 dec collateral.\",\"_minCollateral\":\"minimum collateral required to prevent dust amounts\",\"_mintingMaximum\":\"maximal amount of OFD that can be minted by the position owner\",\"_reservePPM\":\"ppm of minted amount that is locked as borrower's reserve, e.g. 20%\",\"_riskPremium\":\"ppm of minted amount that is added to the applicible minting fee as a risk premium\"},\"returns\":{\"_0\":\"address           address of created position\"}},\"price(uint32)\":{\"details\":\"The price comes with (36-collateral.decimals()) digits, such that multiplying it with the raw collateral amount always yields a price with 36 digits, or 18 digits after dividing by 10**18 again.\"}},\"stateVariables\":{\"pendingReturns\":{\"details\":\"It maps collateral => beneficiary => amount.\"}},\"title\":\"Minting Hub\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"CHALLENGER_REWARD()\":{\"notice\":\"The challenger reward in parts per million (ppm) relative to the challenged amount, whereas challenged amount if defined as the challenged collateral amount times the liquidation price.\"},\"OPENING_FEE()\":{\"notice\":\"Irrevocable fee in OFD when proposing a new position (but not when cloning an existing one).\"},\"bid(uint32,uint256,bool)\":{\"notice\":\"Post a bid in OFD given an open challenge.\"},\"buyExpiredCollateral(address,uint256)\":{\"notice\":\"Buys up to the desired amount of the collateral asset from the given expired position using the applicable 'expiredPurchasePrice' in that instant.\"},\"challenge(address,uint256,uint256)\":{\"notice\":\"Launch a challenge (Dutch auction) on a position\"},\"clone(address,address,uint256,uint256,uint40)\":{\"notice\":\"Clones an existing position and immediately tries to mint the specified amount using the given collateral.\"},\"expiredPurchasePrice(address)\":{\"notice\":\"The applicable purchase price when forcing the sale of collateral of an expired position. The price starts at 10x the liquidation price at the expiration time, linearly declines to 1x liquidation price over the course of one challenge period, and then linearly declines less steeply to 0 over the course of another challenge period.\"},\"openPosition(address,uint256,uint256,uint256,uint40,uint40,uint40,uint24,uint256,uint24)\":{\"notice\":\"Open a collateralized loan position. See also https://oracle-free-dollar.gitbook.io/ofd/collateralised-minting/opening-new-position .\"},\"pendingReturns(address,address)\":{\"notice\":\"Map to remember pending postponed collateral returns.\"},\"price(uint32)\":{\"notice\":\"Get the price per unit of the collateral for the given challenge.\"},\"returnPostponedCollateral(address,address)\":{\"notice\":\"Challengers can call this method to withdraw collateral whose return was postponed.\"}},\"notice\":\"The central hub for creating, cloning and challenging collateralized OracleFreeDollar positions.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/MintingHub.sol\":\"MintingHub\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/MintingHub.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport './interface/IERC20.sol';\\r\\nimport './interface/ILeadrate.sol';\\r\\nimport './interface/IOracleFreeDollar.sol';\\r\\nimport './interface/IPosition.sol';\\r\\nimport './interface/IPositionFactory.sol';\\r\\nimport './interface/IReserve.sol';\\r\\n\\r\\nimport './PositionRoller.sol';\\r\\nimport './utils/Ownable.sol';\\r\\n\\r\\n/**\\r\\n * @title Minting Hub\\r\\n * @notice The central hub for creating, cloning and challenging collateralized OracleFreeDollar positions.\\r\\n * @dev Only one instance of this contract is required, whereas every new position comes with a new position\\r\\n * contract. Pending challenges are stored as structs in an array.\\r\\n */\\r\\ncontract MintingHub {\\r\\n\\t/**\\r\\n     * @notice Irrevocable fee in OFD when proposing a new position (but not when cloning an existing one).\\r\\n     */\\r\\n\\tuint256 public constant OPENING_FEE = 1000 * 10 ** 18;\\r\\n\\r\\n\\t/**\\r\\n     * @notice The challenger reward in parts per million (ppm) relative to the challenged amount, whereas\\r\\n     * challenged amount if defined as the challenged collateral amount times the liquidation price.\\r\\n     */\\r\\n\\tuint256 public constant CHALLENGER_REWARD = 20000; // 2%\\r\\n\\tuint256 public constant EXPIRED_PRICE_FACTOR = 10;\\r\\n\\r\\n\\tIPositionFactory private immutable POSITION_FACTORY; // position contract to clone\\r\\n\\r\\n\\tIOracleFreeDollar public immutable ofd; // currency\\r\\n\\tPositionRoller public immutable roller; // helper to roll positions\\r\\n\\tILeadrate public immutable rate; // to determine the interest rate\\r\\n\\r\\n\\tChallenge[] public challenges; // list of open challenges\\r\\n\\r\\n\\t/**\\r\\n     * @notice Map to remember pending postponed collateral returns.\\r\\n     * @dev It maps collateral => beneficiary => amount.\\r\\n     */\\r\\n\\tmapping(address collateral => mapping(address owner => uint256 amount)) public pendingReturns;\\r\\n\\r\\n\\tstruct Challenge {\\r\\n\\t\\taddress challenger; // the address from which the challenge was initiated\\r\\n\\t\\tuint40 start; // the start of the challenge\\r\\n\\t\\tIPosition position; // the position that was challenged\\r\\n\\t\\tuint256 size; // how much collateral the challenger provided\\r\\n\\t}\\r\\n\\r\\n\\tevent PositionOpened(address indexed owner, address indexed position, address original, address collateral);\\r\\n\\tevent ChallengeStarted(address indexed challenger, address indexed position, uint256 size, uint256 number);\\r\\n\\tevent ChallengeAverted(address indexed position, uint256 number, uint256 size);\\r\\n\\tevent ChallengeSucceeded(\\r\\n\\t\\taddress indexed position,\\r\\n\\t\\tuint256 number,\\r\\n\\t\\tuint256 bid,\\r\\n\\t\\tuint256 acquiredCollateral,\\r\\n\\t\\tuint256 challengeSize\\r\\n\\t);\\r\\n\\tevent PostPonedReturn(address collateral, address indexed beneficiary, uint256 amount);\\r\\n\\tevent ForcedSale(address pos, uint256 amount, uint256 priceE36MinusDecimals);\\r\\n\\r\\n\\terror UnexpectedPrice();\\r\\n\\terror InvalidPos();\\r\\n\\terror IncompatibleCollateral();\\r\\n\\terror InsufficientCollateral();\\r\\n\\r\\n\\tmodifier validPos(address position) {\\r\\n\\t\\tif (ofd.getPositionParent(position) != address(this)) revert InvalidPos();\\r\\n\\t\\t_;\\r\\n\\t}\\r\\n\\r\\n\\tconstructor(address _ofd, address _leadrate, address _roller, address _factory) {\\r\\n\\t\\tofd = IOracleFreeDollar(_ofd);\\r\\n\\t\\trate = ILeadrate(_leadrate);\\r\\n\\t\\tPOSITION_FACTORY = IPositionFactory(_factory);\\r\\n\\t\\troller = PositionRoller(_roller);\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n     * @notice Open a collateralized loan position. See also https://oracle-free-dollar.gitbook.io/ofd/collateralised-minting/opening-new-position .\\r\\n     * @dev For a successful call, you must set an allowance for the collateral token, allowing\\r\\n     * the minting hub to transfer the initial collateral amount to the newly created position and to\\r\\n     * withdraw the fees.\\r\\n     *\\r\\n     * @param _collateralAddress        address of collateral token\\r\\n     * @param _minCollateral     minimum collateral required to prevent dust amounts\\r\\n     * @param _initialCollateral amount of initial collateral to be deposited\\r\\n     * @param _mintingMaximum    maximal amount of OFD that can be minted by the position owner\\r\\n     * @param _expirationSeconds position tenor in unit of timestamp (seconds) from 'now'\\r\\n     * @param _challengeSeconds  challenge period. Longer for less liquid collateral.\\r\\n     * @param _riskPremium       ppm of minted amount that is added to the applicible minting fee as a risk premium\\r\\n     * @param _liqPrice          Liquidation price with (36 - token decimals) decimals,\\r\\n     *                           e.g. 18 decimals for an 18 dec collateral, 36 decs for a 0 dec collateral.\\r\\n     * @param _reservePPM        ppm of minted amount that is locked as borrower's reserve, e.g. 20%\\r\\n     * @return address           address of created position\\r\\n     */\\r\\n\\tfunction openPosition(\\r\\n\\t\\taddress _collateralAddress,\\r\\n\\t\\tuint256 _minCollateral,\\r\\n\\t\\tuint256 _initialCollateral,\\r\\n\\t\\tuint256 _mintingMaximum,\\r\\n\\t\\tuint40 _initPeriodSeconds,\\r\\n\\t\\tuint40 _expirationSeconds,\\r\\n\\t\\tuint40 _challengeSeconds,\\r\\n\\t\\tuint24 _riskPremium,\\r\\n\\t\\tuint256 _liqPrice,\\r\\n\\t\\tuint24 _reservePPM\\r\\n\\t) public returns (address) {\\r\\n\\t\\t{\\r\\n\\t\\t\\trequire(_riskPremium <= 1000000);\\r\\n\\t\\t\\trequire(CHALLENGER_REWARD <= _reservePPM && _reservePPM <= 1000000);\\r\\n\\t\\t\\trequire(IERC20(_collateralAddress).decimals() <= 24); // leaves 12 digits for price\\r\\n\\t\\t\\tuint256 invalidAmount = IERC20(_collateralAddress).totalSupply() + 1;\\r\\n\\t\\t\\ttry IERC20(_collateralAddress).transfer(address(0x123), invalidAmount) {\\r\\n\\t\\t\\t\\trevert IncompatibleCollateral(); // we need a collateral that reverts on failed transfers\\r\\n\\t\\t\\t} catch Error(string memory /*reason*/) {\\r\\n\\t\\t\\t} catch Panic(uint /*errorCode*/) {\\r\\n\\t\\t\\t} catch (bytes memory /*lowLevelData*/) {\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (_initialCollateral < _minCollateral) revert InsufficientCollateral();\\r\\n\\t\\t\\tif (_minCollateral * _liqPrice < 3500 ether * 10 ** 18) revert InsufficientCollateral(); // must start with at least 3500 OFD worth of collateral\\r\\n\\t\\t}\\r\\n\\t\\tIPosition pos = IPosition(\\r\\n\\t\\t\\tPOSITION_FACTORY.createNewPosition(\\r\\n\\t\\t\\t\\tmsg.sender,\\r\\n\\t\\t\\t\\taddress(ofd),\\r\\n\\t\\t\\t\\t_collateralAddress,\\r\\n\\t\\t\\t\\t_minCollateral,\\r\\n\\t\\t\\t\\t_mintingMaximum,\\r\\n\\t\\t\\t\\t_initPeriodSeconds,\\r\\n\\t\\t\\t\\t_expirationSeconds,\\r\\n\\t\\t\\t\\t_challengeSeconds,\\r\\n\\t\\t\\t\\t_riskPremium,\\r\\n\\t\\t\\t\\t_liqPrice,\\r\\n\\t\\t\\t\\t_reservePPM\\r\\n\\t\\t\\t)\\r\\n\\t\\t);\\r\\n\\t\\tofd.registerPosition(address(pos));\\r\\n\\t\\tofd.collectProfits(msg.sender, OPENING_FEE);\\r\\n\\t\\tIERC20(_collateralAddress).transferFrom(msg.sender, address(pos), _initialCollateral);\\r\\n\\r\\n\\t\\temit PositionOpened(msg.sender, address(pos), address(pos), _collateralAddress);\\r\\n\\t\\treturn address(pos);\\r\\n\\t}\\r\\n\\r\\n\\tfunction clone(address parent, uint256 _initialCollateral, uint256 _initialMint, uint40 expiration) public returns (address) {\\r\\n\\t\\treturn clone(msg.sender, parent, _initialCollateral, _initialMint, expiration);\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n     * @notice Clones an existing position and immediately tries to mint the specified amount using the given collateral.\\r\\n     * @dev This needs an allowance to be set on the collateral contract such that the minting hub can get the collateral.\\r\\n     */\\r\\n\\tfunction clone(address owner, address parent, uint256 _initialCollateral, uint256 _initialMint, uint40 expiration) public validPos(parent) returns (address) {\\r\\n\\t\\taddress pos = POSITION_FACTORY.clonePosition(parent);\\r\\n\\t\\tIPosition child = IPosition(pos);\\r\\n\\t\\tchild.initialize(parent, expiration);\\r\\n\\t\\tofd.registerPosition(pos);\\r\\n\\t\\tIERC20 collateral = child.collateral();\\r\\n\\t\\tif (_initialCollateral < child.minimumCollateral()) revert InsufficientCollateral();\\r\\n\\t\\tcollateral.transferFrom(msg.sender, pos, _initialCollateral); // collateral must still come from sender for security\\r\\n\\t\\temit PositionOpened(owner, address(pos), parent, address(collateral));\\r\\n\\t\\tchild.mint(owner, _initialMint);\\r\\n\\t\\tOwnable(address(child)).transferOwnership(owner);\\r\\n\\t\\treturn address(pos);\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n     * @notice Launch a challenge (Dutch auction) on a position\\r\\n     * @param _positionAddr      address of the position we want to challenge\\r\\n     * @param _collateralAmount  amount of the collateral we want to challenge\\r\\n     * @param minimumPrice       position.price() to guard against the minter fruntrunning with a price change\\r\\n     * @return index of the challenge in challenge-array\\r\\n     */\\r\\n\\tfunction challenge(\\r\\n\\t\\taddress _positionAddr,\\r\\n\\t\\tuint256 _collateralAmount,\\r\\n\\t\\tuint256 minimumPrice\\r\\n\\t) external validPos(_positionAddr) returns (uint256) {\\r\\n\\t\\tIPosition position = IPosition(_positionAddr);\\r\\n\\t\\t// challenger should be ok if frontrun by owner with a higher price\\r\\n\\t\\t// in case owner fruntruns challenger with small price decrease to prevent challenge,\\r\\n\\t\\t// the challenger should set minimumPrice to market price\\r\\n\\t\\tif (position.price() < minimumPrice) revert UnexpectedPrice();\\r\\n\\t\\tIERC20(position.collateral()).transferFrom(msg.sender, address(this), _collateralAmount);\\r\\n\\t\\tuint256 pos = challenges.length;\\r\\n\\t\\tchallenges.push(Challenge(msg.sender, uint40(block.timestamp), position, _collateralAmount));\\r\\n\\t\\tposition.notifyChallengeStarted(_collateralAmount);\\r\\n\\t\\temit ChallengeStarted(msg.sender, address(position), _collateralAmount, pos);\\r\\n\\t\\treturn pos;\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n     * @notice Post a bid in OFD given an open challenge.\\r\\n     *\\r\\n     * @dev In case that the collateral cannot be transfered back to the challenger (i.e. because the collateral token\\r\\n     * has a blacklist and the challenger is on it), it is possible to postpone the return of the collateral.\\r\\n     *\\r\\n     * @param _challengeNumber  index of the challenge as broadcast in the event\\r\\n     * @param size              how much of the collateral the caller wants to bid for at most\\r\\n     *                          (automatically reduced to the available amount)\\r\\n     * @param postponeCollateralReturn To postpone the return of the collateral to the challenger. Usually false.\\r\\n     */\\r\\n\\tfunction bid(uint32 _challengeNumber, uint256 size, bool postponeCollateralReturn) external {\\r\\n\\t\\tChallenge memory _challenge = challenges[_challengeNumber];\\r\\n\\t\\t(uint256 liqPrice, uint40 phase) = _challenge.position.challengeData();\\r\\n\\t\\tsize = _challenge.size < size ? _challenge.size : size; // cannot bid for more than the size of the challenge\\r\\n\\r\\n\\t\\tif (block.timestamp <= _challenge.start + phase) {\\r\\n\\t\\t\\t_avertChallenge(_challenge, _challengeNumber, liqPrice, size);\\r\\n\\t\\t\\temit ChallengeAverted(address(_challenge.position), _challengeNumber, size);\\r\\n\\t\\t} else {\\r\\n\\t\\t\\t_returnChallengerCollateral(_challenge, _challengeNumber, size, postponeCollateralReturn);\\r\\n\\t\\t\\t(uint256 transferredCollateral, uint256 offer) = _finishChallenge(_challenge, liqPrice, phase, size);\\r\\n\\t\\t\\temit ChallengeSucceeded(address(_challenge.position), _challengeNumber, offer, transferredCollateral, size);\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\tfunction _finishChallenge(Challenge memory _challenge, uint256 liqPrice, uint40 phase, uint256 size) internal returns (uint256, uint256) {\\r\\n\\t\\t// Repayments depend on what was actually minted, whereas bids depend on the available collateral\\r\\n\\t\\t(address owner, uint256 collateral, uint256 repayment, uint32 reservePPM) = _challenge.position.notifyChallengeSucceeded(msg.sender, size);\\r\\n\\r\\n\\t\\t// No overflow possible thanks to invariant (col * price <= limit * 10**18)\\r\\n\\t\\t// enforced in Position.setPrice and knowing that collateral <= col.\\r\\n\\t\\tuint256 offer = (_calculatePrice(_challenge.start + phase, phase, liqPrice) * collateral) / 10 ** 18;\\r\\n\\t\\tofd.transferFrom(msg.sender, address(this), offer); // get money from bidder\\r\\n\\t\\tuint256 reward = (offer * CHALLENGER_REWARD) / 1000_000;\\r\\n\\t\\tofd.transfer(_challenge.challenger, reward); // pay out the challenger reward\\r\\n\\t\\tuint256 fundsAvailable = offer - reward; // funds available after reward\\r\\n\\r\\n\\t\\t// Example: available funds are 90, repayment is 50, reserve 20%. Then 20%*(90-50)=16 are collected as profits\\r\\n\\t\\t// and the remaining 34 are sent to the position owner. If the position owner maxed out debt before the challenge\\r\\n\\t\\t// started and the liquidation price was 100, they would be slightly better off as they would get away with 80\\r\\n\\t\\t// instead of 40+36 = 76 in this example.\\r\\n\\t\\tif (fundsAvailable > repayment) {\\r\\n\\t\\t\\t// The excess amount is distributed between the system and the owner using the reserve ratio\\r\\n\\t\\t\\t// At this point, we cannot rely on the liquidation price because the challenge might have been started as a\\r\\n\\t\\t\\t// response to an unreasonable increase of the liquidation price, such that we have to use this heuristic\\r\\n\\t\\t\\t// for excess fund distribution, which make position owners that maxed out their positions slightly better\\r\\n\\t\\t\\t// off in comparison to those who did not.\\r\\n\\t\\t\\tuint256 profits = (reservePPM * (fundsAvailable - repayment)) / 1000_000;\\r\\n\\t\\t\\tofd.collectProfits(address(this), profits);\\r\\n\\t\\t\\tofd.transfer(owner, fundsAvailable - repayment - profits);\\r\\n\\t\\t} else if (fundsAvailable < repayment) {\\r\\n\\t\\t\\tofd.coverLoss(address(this), repayment - fundsAvailable); // ensure we have enough to pay everything\\r\\n\\t\\t}\\r\\n\\t\\tofd.burnWithoutReserve(repayment, reservePPM); // Repay the challenged part, example: 50 OFD leading to 10 OFD in implicit profits\\r\\n\\t\\treturn (collateral, offer);\\r\\n\\t}\\r\\n\\r\\n\\tfunction _avertChallenge(Challenge memory _challenge, uint32 number, uint256 liqPrice, uint256 size) internal {\\r\\n\\t\\trequire(block.timestamp != _challenge.start); // do not allow to avert the challenge in the same transaction\\r\\n\\t\\tif (msg.sender == _challenge.challenger) {\\r\\n\\t\\t\\t// allow challenger to cancel challenge without paying themselves\\r\\n\\t\\t} else {\\r\\n\\t\\t\\tofd.transferFrom(msg.sender, _challenge.challenger, (size * liqPrice) / (10 ** 18));\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t_challenge.position.notifyChallengeAverted(size);\\r\\n\\t\\t_challenge.position.collateral().transfer(msg.sender, size);\\r\\n\\t\\tif (size < _challenge.size) {\\r\\n\\t\\t\\tchallenges[number].size = _challenge.size - size;\\r\\n\\t\\t} else {\\r\\n\\t\\t\\trequire(size == _challenge.size);\\r\\n\\t\\t\\tdelete challenges[number];\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n     * @notice Returns 'amount' of the collateral to the challenger and reduces or deletes the relevant challenge.\\r\\n     */\\r\\n\\tfunction _returnChallengerCollateral(\\r\\n\\t\\tChallenge memory _challenge,\\r\\n\\t\\tuint32 number,\\r\\n\\t\\tuint256 amount,\\r\\n\\t\\tbool postpone\\r\\n\\t) internal {\\r\\n\\t\\t_returnCollateral(_challenge.position.collateral(), _challenge.challenger, amount, postpone);\\r\\n\\t\\tif (_challenge.size == amount) {\\r\\n\\t\\t\\t// bid on full amount\\r\\n\\t\\t\\tdelete challenges[number];\\r\\n\\t\\t} else {\\r\\n\\t\\t\\t// bid on partial amount\\r\\n\\t\\t\\tchallenges[number].size -= amount;\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n     * @notice Calculates the current Dutch auction price.\\r\\n     * @dev Starts at the full price at time 'start' and linearly goes to 0 as 'phase2' passes.\\r\\n     */\\r\\n\\tfunction _calculatePrice(uint40 start, uint40 phase2, uint256 liqPrice) internal view returns (uint256) {\\r\\n\\t\\tuint40 timeNow = uint40(block.timestamp);\\r\\n\\t\\tif (timeNow <= start) {\\r\\n\\t\\t\\treturn liqPrice;\\r\\n\\t\\t} else if (timeNow >= start + phase2) {\\r\\n\\t\\t\\treturn 0;\\r\\n\\t\\t} else {\\r\\n\\t\\t\\tuint256 timeLeft = phase2 - (timeNow - start);\\r\\n\\t\\t\\treturn (liqPrice / phase2) * timeLeft;\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n     * @notice Get the price per unit of the collateral for the given challenge.\\r\\n     * @dev The price comes with (36-collateral.decimals()) digits, such that multiplying it with the\\r\\n     * raw collateral amount always yields a price with 36 digits, or 18 digits after dividing by 10**18 again.\\r\\n     */\\r\\n\\tfunction price(uint32 challengeNumber) public view returns (uint256) {\\r\\n\\t\\tChallenge memory _challenge = challenges[challengeNumber];\\r\\n\\t\\tif (_challenge.challenger == address(0x0)) {\\r\\n\\t\\t\\treturn 0;\\r\\n\\t\\t} else {\\r\\n\\t\\t\\t(uint256 liqPrice, uint40 phase) = _challenge.position.challengeData();\\r\\n\\t\\t\\treturn _calculatePrice(_challenge.start + phase, phase, liqPrice);\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n     * @notice Challengers can call this method to withdraw collateral whose return was postponed.\\r\\n     */\\r\\n\\tfunction returnPostponedCollateral(address collateral, address target) external {\\r\\n\\t\\tuint256 amount = pendingReturns[collateral][msg.sender];\\r\\n\\t\\tdelete pendingReturns[collateral][msg.sender];\\r\\n\\t\\tIERC20(collateral).transfer(target, amount);\\r\\n\\t}\\r\\n\\r\\n\\tfunction _returnCollateral(IERC20 collateral, address recipient, uint256 amount, bool postpone) internal {\\r\\n\\t\\tif (postpone) {\\r\\n\\t\\t\\t// Postponing helps in case the challenger was blacklisted or otherwise cannot receive at the moment.\\r\\n\\t\\t\\tpendingReturns[address(collateral)][recipient] += amount;\\r\\n\\t\\t\\temit PostPonedReturn(address(collateral), recipient, amount);\\r\\n\\t\\t} else {\\r\\n\\t\\t\\tcollateral.transfer(recipient, amount); // return the challenger's collateral\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n     * The applicable purchase price when forcing the sale of collateral of an expired position.\\r\\n     *\\r\\n     * The price starts at 10x the liquidation price at the expiration time, linearly declines to\\r\\n     * 1x liquidation price over the course of one challenge period, and then linearly declines\\r\\n     * less steeply to 0 over the course of another challenge period.\\r\\n     */\\r\\n\\tfunction expiredPurchasePrice(IPosition pos) public view returns (uint256) {\\r\\n\\t\\tuint256 liqprice = pos.price();\\r\\n\\t\\tuint256 expiration = pos.expiration();\\r\\n\\t\\tif (block.timestamp <= expiration) {\\r\\n\\t\\t\\treturn EXPIRED_PRICE_FACTOR * liqprice;\\r\\n\\t\\t} else {\\r\\n\\t\\t\\tuint256 challengePeriod = pos.challengePeriod();\\r\\n\\t\\t\\tuint256 timePassed = block.timestamp - expiration;\\r\\n\\t\\t\\tif (timePassed <= challengePeriod) {\\r\\n\\t\\t\\t\\t// from 10x liquidation price to 1x in first phase\\r\\n\\t\\t\\t\\tuint256 timeLeft = challengePeriod - timePassed;\\r\\n\\t\\t\\t\\treturn liqprice + (((EXPIRED_PRICE_FACTOR - 1) * liqprice) / challengePeriod) * timeLeft;\\r\\n\\t\\t\\t} else if (timePassed < 2 * challengePeriod) {\\r\\n\\t\\t\\t\\t// from 1x liquidation price to 0 in second phase\\r\\n\\t\\t\\t\\tuint256 timeLeft = 2 * challengePeriod - timePassed;\\r\\n\\t\\t\\t\\treturn (liqprice / challengePeriod) * timeLeft;\\r\\n\\t\\t\\t} else {\\r\\n\\t\\t\\t\\t// get collateral for free after both phases passed\\r\\n\\t\\t\\t\\treturn 0;\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n     * Buys up to the desired amount of the collateral asset from the given expired position using\\r\\n     * the applicable 'expiredPurchasePrice' in that instant.\\r\\n     */\\r\\n\\tfunction buyExpiredCollateral(IPosition pos, uint256 upToAmount) external returns (uint256) {\\r\\n\\t\\tuint256 max = pos.collateral().balanceOf(address(pos));\\r\\n\\t\\tuint256 amount = upToAmount > max ? max : upToAmount;\\r\\n\\t\\tuint256 forceSalePrice = expiredPurchasePrice(pos);\\r\\n\\t\\tuint256 costs = (forceSalePrice * amount) / 10 ** 18;\\r\\n\\t\\tpos.forceSale(msg.sender, amount, costs);\\r\\n\\t\\temit ForcedSale(address(pos), amount, forceSalePrice);\\r\\n\\t\\treturn amount;\\r\\n\\t}\\r\\n}\\r\\n\",\"keccak256\":\"0x9e77f93d436dcd39e2e705118ddab4bbe3f48aae4c55a9aaedeeac98fa683ce8\",\"license\":\"MIT\"},\"contracts/PositionRoller.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport './interface/IERC20.sol';\\r\\nimport './interface/IOracleFreeDollar.sol';\\r\\nimport './interface/IPosition.sol';\\r\\nimport './utils/Ownable.sol';\\r\\nimport './interface/IReserve.sol';\\r\\n\\r\\n/**\\r\\n * @title PositionRoller\\r\\n *\\r\\n * Helper to roll over a debt from an old position to a new one.\\r\\n * Both positions should have the same collateral. Otherwise, it does not make much sense.\\r\\n */\\r\\ncontract PositionRoller {\\r\\n\\r\\n\\tIOracleFreeDollar private ofd;\\r\\n\\r\\n\\terror NotOwner(address pos);\\r\\n\\terror NotPosition(address pos);\\r\\n\\terror Log(uint256, uint256, uint256);\\r\\n\\r\\n\\tevent Roll(address source, uint256 collWithdraw, uint256 repay, address target, uint256 collDeposit, uint256 mint);\\r\\n\\r\\n\\tconstructor(address ofd_) {\\r\\n\\t\\tofd = IOracleFreeDollar(ofd_);\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n     * Convenience method to roll and old position into a new one.\\r\\n     *\\r\\n     * Pre-condition is an allowance for the roller to spend the collateral asset on behalf of the caller,\\r\\n     * i.e. one should set collateral.approve(roller, collateral.balanceOf(sourcePosition));\\r\\n     *\\r\\n     * The following is assumed:\\r\\n     * - If the limit of the target position permits, the user wants to roll everything\\r\\n     * - The user does not want to add additional collateral, but excess collateral is returned\\r\\n     * - If not enough can be minted in the new position, it is ok for the roller to use OFD from the msg.sender\\r\\n     */\\r\\n\\tfunction rollFully(IPosition source, IPosition target) external {\\r\\n\\t\\trollFullyWithExpiration(source, target, target.expiration());\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n     * Like rollFully, but with a custom expiration date for the new position.\\r\\n     */\\r\\n\\tfunction rollFullyWithExpiration(IPosition source, IPosition target, uint40 expiration) public {\\r\\n\\t\\trequire(source.collateral() == target.collateral());\\r\\n\\t\\tuint256 repay = findRepaymentAmount(source);\\r\\n\\t\\tuint256 mintAmount = target.getMintAmount(repay);\\r\\n\\t\\tuint256 collateralToWithdraw = IERC20(source.collateral()).balanceOf(address(source));\\r\\n\\t\\tuint256 targetPrice = target.price();\\r\\n\\t\\tuint256 depositAmount = (mintAmount * 10**18 + targetPrice - 1) / targetPrice; // round up\\r\\n\\t\\tif (depositAmount > collateralToWithdraw){\\r\\n\\t\\t\\t// If we need more collateral than available from the old position, we opt for taking\\r\\n\\t\\t\\t// the missing funds from the caller instead of taking additional collateral from the caller\\r\\n\\t\\t\\tdepositAmount = collateralToWithdraw;\\r\\n\\t\\t\\tmintAmount = depositAmount * target.price() / 10**18; // round down, rest will be taken from caller\\r\\n\\t\\t}\\r\\n\\t\\troll(source, repay, collateralToWithdraw, target, mintAmount, depositAmount, expiration);\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n     * Doing a binary search is not very efficient, but guaranteed to return a valid result without rounding errors.\\r\\n     * To save gas costs, the frontend can also call this and other methods to calculate the right parameters and\\r\\n     * then call 'roll' directly.\\r\\n     */\\r\\n\\tfunction findRepaymentAmount(IPosition pos) public view returns (uint256) {\\r\\n\\t\\tuint256 minted = pos.minted();\\r\\n\\t\\tuint24 reservePPM = pos.reserveContribution();\\r\\n\\t\\tif (minted == 0){\\r\\n\\t\\t\\treturn 0;\\r\\n\\t\\t}\\r\\n\\t\\tuint256 higherResult = ofd.calculateFreedAmount(minted, reservePPM);\\r\\n\\t\\tif (higherResult == minted){\\r\\n\\t\\t\\treturn minted;\\r\\n\\t\\t}\\r\\n\\t\\treturn binarySearch(minted, reservePPM, 0, 0, minted, higherResult);\\r\\n\\t}\\r\\n\\r\\n\\t// max call stack depth is 1024 in solidity. Binary search on 256 bit number takes at most 256 steps, so it should be fine.\\r\\n\\tfunction binarySearch(uint256 target, uint24 reservePPM, uint256 lowerBound, uint256 lowerResult, uint256 higherBound, uint256 higherResult) internal view returns (uint256) {\\r\\n\\t\\tuint256 middle = (lowerBound + higherBound) / 2;\\r\\n\\t\\tif (middle == lowerBound){\\r\\n\\t\\t\\treturn higherBound; // we have reached max precision without exact match, return next higher result to be on the safe side\\r\\n\\t\\t} else {\\r\\n\\t\\t\\tuint256 middleResult = ofd.calculateFreedAmount(middle, reservePPM);\\r\\n\\t\\t\\tif (middleResult == target){\\r\\n\\t\\t\\t\\treturn middle;\\r\\n\\t\\t\\t} else if (middleResult < target){\\r\\n\\t\\t\\t\\treturn binarySearch(target, reservePPM, middle, middleResult, higherBound, higherResult);\\r\\n\\t\\t\\t} else {\\r\\n\\t\\t\\t\\treturn binarySearch(target, reservePPM, lowerBound, lowerResult, middle, middleResult);\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n     * Rolls the source position into the target position using a flash loan.\\r\\n     * Both the source and the target position must recognize this roller.\\r\\n     * It is the responsibility of the caller to ensure that both positions are valid contracts.\\r\\n     *\\r\\n     * @param source The source position, must be owned by the msg.sender .\\r\\n     * @param repay The amount to flash loan in order to repay the source position and free up some or all collateral.\\r\\n     * @param collWithdraw Collateral to move from the source position to the msg.sender .\\r\\n     * @param target The target position. If not owned by msg.sender or if it does not have the desired expiration,\\r\\n     *               it is cloned to create a position owned by the msg.sender.\\r\\n     * @param mint The amount to be minted from the target position using collateral from msg.sender.\\r\\n     * @param collDeposit The amount of collateral to be send from msg.sender to the target position.\\r\\n     * @param expiration The desired expiration date for the target position.\\r\\n     */\\r\\n\\tfunction roll(IPosition source, uint256 repay, uint256 collWithdraw, IPosition target, uint256 mint, uint256 collDeposit, uint40 expiration) public valid(source) valid(target) own(source) {\\r\\n\\t\\tofd.mint(address(this), repay); // take a flash loan\\r\\n\\t\\tsource.repay(repay);\\r\\n\\t\\tsource.withdrawCollateral(msg.sender, collWithdraw);\\r\\n\\t\\tif (mint > 0){\\r\\n\\t\\t\\tIERC20 targetCollateral = IERC20(target.collateral());\\r\\n\\t\\t\\tif (Ownable(address(target)).owner() != msg.sender || expiration != target.expiration()){\\r\\n\\t\\t\\t\\ttargetCollateral.transferFrom(msg.sender, address(this), collDeposit); // get the new collateral\\r\\n\\t\\t\\t\\ttargetCollateral.approve(target.hub(), collDeposit); // approve the new collateral and clone:\\r\\n\\t\\t\\t\\ttarget = IPosition(IMintingHub(target.hub()).clone(msg.sender, address(target), collDeposit, mint, expiration));\\r\\n\\t\\t\\t} else {\\r\\n\\t\\t\\t\\t// We can roll into the provided existing position\\r\\n\\t\\t\\t\\t// We do not verify whether the target position has been created by the known minting hub in order\\r\\n\\t\\t\\t\\t// to allow positions to be rolled into future versions of the minting hub\\r\\n\\t\\t\\t\\ttargetCollateral.transferFrom(msg.sender, address(target), collDeposit);\\r\\n\\t\\t\\t\\ttarget.mint(msg.sender, mint);\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tofd.burnFrom(msg.sender, repay); // repay the flash loan\\r\\n\\t\\temit Roll(address(source), collWithdraw, repay, address(target), collDeposit, mint);\\r\\n\\t}\\r\\n\\r\\n\\tmodifier own(IPosition pos) {\\r\\n\\t\\tif (Ownable(address(pos)).owner() != msg.sender) revert NotOwner(address(pos));\\r\\n\\t\\t_;\\r\\n\\t}\\r\\n\\r\\n\\tmodifier valid(IPosition pos) {\\r\\n\\t\\tif (ofd.getPositionParent(address(pos)) == address(0x0)) revert NotPosition(address(pos));\\r\\n\\t\\t_;\\r\\n\\t}\\r\\n}\\r\\n\\r\\ninterface IMintingHub {\\r\\n\\tfunction clone(address owner, address parent, uint256 _initialCollateral, uint256 _initialMint, uint40 expiration) external returns (address);\\r\\n}\\r\\n\",\"keccak256\":\"0x43f34cbdb41484be2ddda665b1c804dce9522aadc90e8ea30022d59d38db9194\",\"license\":\"MIT\"},\"contracts/interface/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n/**\\r\\n *\\r\\n * Copyright (c) 2016-2019 zOS Global Limited\\r\\n *\\r\\n */\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\\r\\n * the optional functions; to access them see `ERC20Detailed`.\\r\\n */\\r\\n\\r\\ninterface IERC20 {\\r\\n    function name() external view returns (string memory);\\r\\n\\r\\n    function symbol() external view returns (string memory);\\r\\n\\r\\n    function decimals() external view returns (uint8);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens in existence.\\r\\n     */\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens owned by `account`.\\r\\n     */\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\r\\n     *\\r\\n     * Returns always true. Throws error on failure.\\r\\n     *\\r\\n     * Emits a `Transfer` event.\\r\\n     */\\r\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remaining number of tokens that `spender` will be\\r\\n     * allowed to spend on behalf of `owner` through `transferFrom`. This is\\r\\n     * zero by default.\\r\\n     *\\r\\n     * This value can change when `approve` or `transferFrom` are called.\\r\\n     */\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * > Beware that changing an allowance with this method brings the risk\\r\\n     * that someone may use both the old and the new allowance by unfortunate\\r\\n     * transaction ordering. One possible solution to mitigate this race\\r\\n     * condition is to first reduce the spender's allowance to 0 and set the\\r\\n     * desired value afterwards:\\r\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n     *\\r\\n     * Emits an `Approval` event.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\r\\n     * allowance mechanism. `amount` is then deducted from the caller's\\r\\n     * allowance.\\r\\n     *\\r\\n     * Returns always true. Throws error on failure.\\r\\n     *\\r\\n     * Emits a `Transfer` event.\\r\\n     */\\r\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n     * another (`to`).\\r\\n     *\\r\\n     * Note that `value` may be zero.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n     * a call to `approve`. `value` is the new allowance.\\r\\n     */\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n}\\r\\n\",\"keccak256\":\"0x8a0a84b5d4e32903d24aec090ab3f22f12623f5817d5d2b03596637b9e19b03a\",\"license\":\"MIT\"},\"contracts/interface/ILeadrate.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface ILeadrate {\\r\\n   function currentRatePPM() external view returns (uint24);\\r\\n   function currentTicks() external view returns (uint64);\\r\\n}\",\"keccak256\":\"0x675ed6ff3cf2e81f4ce57af05a47876cb48d7e4e4bf2ac9c6f7ec00182bceea1\",\"license\":\"MIT\"},\"contracts/interface/IOracleFreeDollar.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./IERC20.sol\\\";\\r\\nimport \\\"./IReserve.sol\\\";\\r\\n\\r\\ninterface IOracleFreeDollar is IERC20 {\\r\\n    function suggestMinter(address _minter, uint256 _applicationPeriod, uint256 _applicationFee, string calldata _message) external;\\r\\n\\r\\n    function registerPosition(address position) external;\\r\\n\\r\\n    function denyMinter(address minter, address[] calldata helpers, string calldata message) external;\\r\\n\\r\\n    function reserve() external view returns (IReserve);\\r\\n\\r\\n    function minterReserve() external view returns (uint256);\\r\\n\\r\\n    function calculateAssignedReserve(uint256 mintedAmount, uint32 _reservePPM) external view returns (uint256);\\r\\n\\r\\n    function calculateFreedAmount(uint256 amountExcludingReserve, uint32 reservePPM) external view returns (uint256);\\r\\n\\r\\n    function equity() external view returns (uint256);\\r\\n\\r\\n    function isMinter(address minter) external view returns (bool);\\r\\n\\r\\n    function getPositionParent(address position) external view returns (address);\\r\\n\\r\\n    function mint(address target, uint256 amount) external;\\r\\n\\r\\n    function mintWithReserve(address target, uint256 amount, uint32 reservePPM, uint32 feePPM) external;\\r\\n\\r\\n    function burnFrom(address target, uint256 amount) external;\\r\\n\\r\\n    function burnWithoutReserve(uint256 amountIncludingReserve, uint32 reservePPM) external;\\r\\n\\r\\n    function burnFromWithReserve(address payer, uint256 targetTotalBurnAmount, uint32 _reservePPM) external returns (uint256);\\r\\n\\r\\n    function burnWithReserve(uint256 amountExcludingReserve, uint32 reservePPM) external returns (uint256);\\r\\n\\r\\n    function coverLoss(address source, uint256 amount) external;\\r\\n\\r\\n    function collectProfits(address source, uint256 _amount) external;\\r\\n}\\r\\n\",\"keccak256\":\"0xa03232a309b668853f7a24b261969c370ae237346a389c2546f5009f59654af7\",\"license\":\"MIT\"},\"contracts/interface/IPosition.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./IERC20.sol\\\";\\r\\n\\r\\ninterface IPosition {\\r\\n\\r\\n    function initialize(address parent, uint40 _expiration) external;\\r\\n\\r\\n    function hub() external view returns(address);\\r\\n\\r\\n    function original() external view returns (address);\\r\\n\\r\\n    function collateral() external view returns (IERC20);\\r\\n\\r\\n    function minimumCollateral() external view returns (uint256);\\r\\n\\r\\n    function challengePeriod() external view returns (uint40);\\r\\n\\r\\n    function expiration() external view returns (uint40);\\r\\n\\r\\n    function price() external view returns (uint256);\\r\\n\\r\\n    function deny(address[] calldata helpers, string calldata message) external;\\r\\n\\r\\n    function mint(address target, uint256 amount) external;\\r\\n\\r\\n    function repay(uint256 amount) external returns (uint256);\\r\\n\\r\\n    function adjust(uint256 newMinted, uint256 newCollateral, uint256 newPrice) external;\\r\\n\\r\\n    function minted() external view returns (uint256);\\r\\n\\r\\n    function availableForMinting() external view returns (uint256);\\r\\n\\r\\n    function reserveContribution() external view returns (uint24);\\r\\n\\r\\n    function withdrawCollateral(address target, uint256 amount) external;\\r\\n\\r\\n    function getUsableMint(uint256 totalMint, bool beforeFees) external view returns (uint256);\\r\\n\\r\\n    function getMintAmount(uint256 usableMint) external view returns (uint256);\\r\\n\\r\\n    function challengeData() external view returns (uint256 liqPrice, uint40 phase);\\r\\n\\r\\n    function notifyChallengeStarted(uint256 size) external;\\r\\n\\r\\n    function notifyChallengeAverted(uint256 size) external;\\r\\n\\r\\n    function notifyChallengeSucceeded(address _bidder, uint256 _size) external returns (address, uint256, uint256, uint32);\\r\\n\\r\\n    function forceSale(address buyer, uint256 collAmount, uint256 proceeds) external;\\r\\n\\r\\n}\\r\\n\",\"keccak256\":\"0x5b3603d0fc044697335958a279765f7ef61e4c8e0c102adacc6a10903f2c26ea\",\"license\":\"MIT\"},\"contracts/interface/IPositionFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface IPositionFactory {\\r\\n    function createNewPosition(\\r\\n        address _owner,\\r\\n        address _ofd,\\r\\n        address _collateral,\\r\\n        uint256 _minCollateral,\\r\\n        uint256 _initialLimit,\\r\\n        uint40 _initPeriod,\\r\\n        uint40 _duration,\\r\\n        uint40 _challengePeriod,\\r\\n        uint24 _riskPremiumPPM,\\r\\n        uint256 _liqPrice,\\r\\n        uint24 _reserve\\r\\n    ) external returns (address);\\r\\n\\r\\n    function clonePosition(address _parent) external returns (address);\\r\\n}\\r\\n\",\"keccak256\":\"0xa6548dbc0a286bedac10bb96b9e98c63a8432392ac211aea047135cf77d22e54\",\"license\":\"MIT\"},\"contracts/interface/IReserve.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./IERC20.sol\\\";\\r\\n\\r\\ninterface IReserve is IERC20 {\\r\\n   function invest(uint256 amount, uint256 expected) external returns (uint256);\\r\\n   function checkQualified(address sender, address[] calldata helpers) external view;\\r\\n}\",\"keccak256\":\"0xa0ec8a4b3c8b5320aca82d7a7a8e9910fd31f03cf44653031474821412cdc1cf\",\"license\":\"MIT\"},\"contracts/utils/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n//\\r\\n// From https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol\\r\\n//\\r\\n// Modifications:\\r\\n// - Replaced Context._msgSender() with msg.sender\\r\\n// - Made leaner\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Contract module which provides a basic access control mechanism, where\\r\\n * there is an account (an owner) that can be granted exclusive access to\\r\\n * specific functions.\\r\\n *\\r\\n * By default, the owner account will be the one that deploys the contract. This\\r\\n * can later be changed with {transferOwnership}.\\r\\n */\\r\\ncontract Ownable {\\r\\n    address public owner;\\r\\n\\r\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n    error NotOwner();\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Can only be called by the current owner.\\r\\n     */\\r\\n    function transferOwnership(address newOwner) public onlyOwner {\\r\\n        _setOwner(newOwner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Internal function without access restriction.\\r\\n     */\\r\\n    function _setOwner(address newOwner) internal {\\r\\n        require(newOwner != address(0x0));\\r\\n        address oldOwner = owner;\\r\\n        owner = newOwner;\\r\\n        emit OwnershipTransferred(oldOwner, newOwner);\\r\\n    }\\r\\n\\r\\n    function _requireOwner(address sender) internal view {\\r\\n        if (owner != sender) revert NotOwner();\\r\\n    }\\r\\n\\r\\n    modifier onlyOwner() {\\r\\n        _requireOwner(msg.sender);\\r\\n        _;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xc01cb6af7c008d3649f89fb50b802c994f538c380a36b883d22f8eefa1cfe03f\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101006040523480156200001257600080fd5b5060405162002a2f38038062002a2f833981016040819052620000359162000076565b6001600160a01b0393841660a05291831660e0529082166080521660c052620000d3565b80516001600160a01b03811681146200007157600080fd5b919050565b600080600080608085870312156200008d57600080fd5b620000988562000059565b9350620000a86020860162000059565b9250620000b86040860162000059565b9150620000c86060860162000059565b905092959194509250565b60805160a05160c05160e0516128c06200016f6000396000610153015260006101a50152600081816102d2015281816107820152818161088f0152818161090201528181610cb101528181610e6001528181611155015281816118c601528181611d4801528181611dfd01528181611ed001528181611f3b01528181611ff9015261209b0152600081816107fd0152610d6701526128c06000f3fe608060405234801561001057600080fd5b506004361061010b5760003560e01c80637eb81bb3116100a2578063c14a9f0511610071578063c14a9f0514610281578063e6ac5ea414610294578063e6ca1df2146102a7578063e85cde6f146102ba578063f61d52e6146102cd57600080fd5b80637eb81bb3146102055780638f1d37761461021a5780639d8ff2a614610265578063af5806b61461027857600080fd5b80632e2c6314116100de5780632e2c63141461018d5780632f09177d146101a057806335a4b349146101c7578063643745fb146101da57600080fd5b80630f2f8e861461011057806325e281241461012b5780632bf78dd81461013e5780632c4e722e1461014e575b600080fd5b610118600a81565b6040519081526020015b60405180910390f35b6101186101393660046122bc565b6102f4565b610118683635c9adc5dea0000081565b6101757f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610122565b61017561019b3660046122fb565b6104c8565b6101757f000000000000000000000000000000000000000000000000000000000000000081565b6101756101d536600461235d565b6104e0565b6101186101e8366004612403565b600160209081526000928352604080842090915290825290205481565b61021861021336600461245c565b610a41565b005b61022d61022836600461249e565b610c39565b604080516001600160a01b03958616815264ffffffffff94909416602085015291909316908201526060810191909152608001610122565b6101756102733660046124b7565b610c8b565b610118614e2081565b61011861028f366004612516565b61112f565b6101186102a236600461254b565b6114e2565b6101186102b5366004612568565b6116ef565b6102186102c8366004612403565b6117fc565b6101757f000000000000000000000000000000000000000000000000000000000000000081565b600080836001600160a01b031663d8dfeb456040518163ffffffff1660e01b8152600401602060405180830381865afa158015610335573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103599190612585565b6040516370a0823160e01b81526001600160a01b03868116600483015291909116906370a0823190602401602060405180830381865afa1580156103a1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103c591906125a2565b905060008184116103d657836103d8565b815b905060006103e5866114e2565b90506000670de0b6b3a76400006103fc84846125d1565b61040691906125e8565b60405163211d798360e01b815233600482015260248101859052604481018290529091506001600160a01b0388169063211d798390606401600060405180830381600087803b15801561045857600080fd5b505af115801561046c573d6000803e3d6000fd5b5050604080516001600160a01b038b168152602081018790529081018590527f67a660133c1fb4c0bb0480a5e4a9919216684052f13f0713e88fa2fbbc81d0829250606001905060405180910390a15090925050505b92915050565b60006104d73386868686610c8b565b95945050505050565b6000620f42408462ffffff1611156104f757600080fd5b8162ffffff16614e20111580156105165750620f42408262ffffff1611155b61051f57600080fd5b60188b6001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa15801561055f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610583919061260a565b60ff16111561059157600080fd5b60008b6001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156105d1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105f591906125a2565b61060090600161262d565b60405163a9059cbb60e01b81529091506001600160a01b038d169063a9059cbb9061063390610123908590600401612640565b6020604051808303816000875af192505050801561066e575060408051601f3d908101601f1916820190925261066b91810190612659565b60015b6106ee5761067a612676565b806308c379a00361069f575061068e6126cd565b8061069957506106b8565b50610708565b634e487b71036106b8576106b1612757565b9061069957505b3d8080156106e2576040519150601f19603f3d011682016040523d82523d6000602084013e6106e7565b606091505b5050610708565b506040516343befb6960e11b815260040160405180910390fd5b8a8a101561072957604051633a23d82560e01b815260040160405180910390fd5b700a491b7b04606cdcaf4de2aec000000000610745858d6125d1565b101561076457604051633a23d82560e01b815260040160405180910390fd5b50604051632ec127bb60e11b81523360048201526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660248301528c81166044830152606482018c9052608482018a905264ffffffffff89811660a484015288811660c4840152871660e483015262ffffff868116610104840152610124830186905284166101448301526000917f000000000000000000000000000000000000000000000000000000000000000090911690635d824f7690610164016020604051808303816000875af1158015610849573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061086d9190612585565b60405163b52c696d60e01b81526001600160a01b0380831660048301529192507f00000000000000000000000000000000000000000000000000000000000000009091169063b52c696d90602401600060405180830381600087803b1580156108d557600080fd5b505af11580156108e9573d6000803e3d6000fd5b505060405163375edc7760e11b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169250636ebdb8ee9150610944903390683635c9adc5dea0000090600401612640565b600060405180830381600087803b15801561095e57600080fd5b505af1158015610972573d6000803e3d6000fd5b50506040516323b872dd60e01b81526001600160a01b038f1692506323b872dd91506109a690339085908f90600401612777565b6020604051808303816000875af11580156109c5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109e99190612659565b50604080516001600160a01b03808416808352908f1660208301529133917fc9b570ab9d98bdf3e38a40fd71b20edafca42449f23ca51f0bdcbf40e8ffe175910160405180910390a39b9a5050505050505050505050565b6000808463ffffffff1681548110610a5b57610a5b61279b565b600091825260208083206040805160808101825260039490940290910180546001600160a01b038082168652600160a01b90910464ffffffffff169385019390935260018101549092168382018190526002909201546060840152805163194c325560e11b81528151939550849363329864aa926004808401939192918290030181865afa158015610af1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b1591906127b1565b9150915084836060015110610b2a5784610b30565b82606001515b9450808360200151610b4291906127d6565b64ffffffffff164211610baf57610b5b83878488611892565b604080840151815163ffffffff89168152602081018890526001600160a01b03909116917f1eee30d91b773ac47d7485a3acb6bcd8c7c9cd8d95301b1af361baf5f0991d2e910160405180910390a2610c31565b610bbb83878787611b5b565b600080610bca8585858a611c6e565b604080880151815163ffffffff8d16815260208101849052918201849052606082018b90529294509092506001600160a01b03909116907f7d3a26e8d43c5b70f86266bfa26c212e3c097716ff7240ccb6a9034e48754e239060800160405180910390a250505b505050505050565b60008181548110610c4957600080fd5b60009182526020909120600390910201805460018201546002909201546001600160a01b038083169450600160a01b90920464ffffffffff1692919091169084565b60405163aa5dd7f160e01b81526001600160a01b038581166004830152600091869130917f00000000000000000000000000000000000000000000000000000000000000009091169063aa5dd7f190602401602060405180830381865afa158015610cfa573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d1e9190612585565b6001600160a01b031614610d45576040516369229ba760e01b815260040160405180910390fd5b604051630167d12360e71b81526001600160a01b0387811660048301526000917f00000000000000000000000000000000000000000000000000000000000000009091169063b3e89180906024016020604051808303816000875af1158015610db2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dd69190612585565b6040516336a3a4fd60e11b81526001600160a01b03898116600483015264ffffffffff871660248301529192508291821690636d4749fa90604401600060405180830381600087803b158015610e2b57600080fd5b505af1158015610e3f573d6000803e3d6000fd5b505060405163b52c696d60e01b81526001600160a01b0385811660048301527f000000000000000000000000000000000000000000000000000000000000000016925063b52c696d9150602401600060405180830381600087803b158015610ea657600080fd5b505af1158015610eba573d6000803e3d6000fd5b505050506000816001600160a01b031663d8dfeb456040518163ffffffff1660e01b8152600401602060405180830381865afa158015610efe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f229190612585565b9050816001600160a01b031663babe7c746040518163ffffffff1660e01b8152600401602060405180830381865afa158015610f62573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f8691906125a2565b881015610fa657604051633a23d82560e01b815260040160405180910390fd5b6040516323b872dd60e01b81526001600160a01b038216906323b872dd90610fd690339087908d90600401612777565b6020604051808303816000875af1158015610ff5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110199190612659565b50604080516001600160a01b038b81168252838116602083015280861692908d16917fc9b570ab9d98bdf3e38a40fd71b20edafca42449f23ca51f0bdcbf40e8ffe175910160405180910390a36040516340c10f1960e01b81526001600160a01b038316906340c10f1990611094908d908b90600401612640565b600060405180830381600087803b1580156110ae57600080fd5b505af11580156110c2573d6000803e3d6000fd5b505060405163f2fde38b60e01b81526001600160a01b038d811660048301528516925063f2fde38b9150602401600060405180830381600087803b15801561110957600080fd5b505af115801561111d573d6000803e3d6000fd5b50949c9b505050505050505050505050565b60405163aa5dd7f160e01b81526001600160a01b038481166004830152600091859130917f00000000000000000000000000000000000000000000000000000000000000009091169063aa5dd7f190602401602060405180830381865afa15801561119e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111c29190612585565b6001600160a01b0316146111e9576040516369229ba760e01b815260040160405180910390fd5b600085905083816001600160a01b031663a035b1fe6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561122d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061125191906125a2565b101561127057604051630d57523160e11b815260040160405180910390fd5b806001600160a01b031663d8dfeb456040518163ffffffff1660e01b8152600401602060405180830381865afa1580156112ae573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112d29190612585565b6001600160a01b03166323b872dd3330886040518463ffffffff1660e01b815260040161130193929190612777565b6020604051808303816000875af1158015611320573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113449190612659565b50600080546040805160808101825233815264ffffffffff428116602083019081526001600160a01b03878116848601818152606086018e8152600189018a559880529451600388027f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563810180549551909616600160a01b026001600160c81b0319909516918416919091179390931790935592517f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e56482018054919094166001600160a01b0319919091161790925593517f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e56590910155516342d0204160e01b81529091906342d020419061146090899060040190815260200190565b600060405180830381600087803b15801561147a57600080fd5b505af115801561148e573d6000803e3d6000fd5b505060408051898152602081018590526001600160a01b03861693503392507fc4b384b2c5ca32c8e77081f4083be594a1ea9ba34f208a9f9a458f70608585f5910160405180910390a39695505050505050565b600080826001600160a01b031663a035b1fe6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611523573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061154791906125a2565b90506000836001600160a01b0316634665096d6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611589573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115ad91906127fb565b64ffffffffff1690508042116115d0576115c882600a6125d1565b949350505050565b6000846001600160a01b031663f3f480d96040518163ffffffff1660e01b8152600401602060405180830381865afa158015611610573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061163491906127fb565b64ffffffffff16905060006116498342612818565b90508181116116a257600061165e8284612818565b905080838661166f6001600a612818565b61167991906125d1565b61168391906125e8565b61168d91906125d1565b611697908661262d565b979650505050505050565b6116ad8260026125d1565b8110156116e3576000816116c28460026125d1565b6116cc9190612818565b9050806116d984876125e8565b61169791906125d1565b50600095945050505050565b60008060008363ffffffff168154811061170b5761170b61279b565b60009182526020918290206040805160808101825260039390930290910180546001600160a01b03808216808652600160a01b90920464ffffffffff169585019590955260018201549094169183019190915260020154606082015291506117765750600092915050565b60008082604001516001600160a01b031663329864aa6040518163ffffffff1660e01b81526004016040805180830381865afa1580156117ba573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117de91906127b1565b915091506104d78184602001516117f591906127d6565b8284612112565b6001600160a01b038216600081815260016020908152604080832033845290915280822080549290555163a9059cbb60e01b815290919063a9059cbb906118499085908590600401612640565b6020604051808303816000875af1158015611868573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061188c9190612659565b50505050565b836020015164ffffffffff1642036118a957600080fd5b83516001600160a01b0316331461196f5783516001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906323b872dd903390670de0b6b3a764000061190287876125d1565b61190c91906125e8565b6040518463ffffffff1660e01b815260040161192a93929190612777565b6020604051808303816000875af1158015611949573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061196d9190612659565b505b83604001516001600160a01b03166349746f10826040518263ffffffff1660e01b81526004016119a191815260200190565b600060405180830381600087803b1580156119bb57600080fd5b505af11580156119cf573d6000803e3d6000fd5b5050505083604001516001600160a01b031663d8dfeb456040518163ffffffff1660e01b8152600401602060405180830381865afa158015611a15573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a399190612585565b6001600160a01b031663a9059cbb33836040518363ffffffff1660e01b8152600401611a66929190612640565b6020604051808303816000875af1158015611a85573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611aa99190612659565b508360600151811015611af957808460600151611ac69190612818565b60008463ffffffff1681548110611adf57611adf61279b565b90600052602060002090600302016002018190555061188c565b83606001518114611b0957600080fd5b60008363ffffffff1681548110611b2257611b2261279b565b60009182526020822060039091020180546001600160c81b03191681556001810180546001600160a01b03191690556002015550505050565b611bcd84604001516001600160a01b031663d8dfeb456040518163ffffffff1660e01b8152600401602060405180830381865afa158015611ba0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bc49190612585565b855184846121a0565b81846060015103611c295760008363ffffffff1681548110611bf157611bf161279b565b60009182526020822060039091020180546001600160c81b03191681556001810180546001600160a01b03191690556002015561188c565b8160008463ffffffff1681548110611c4357611c4361279b565b90600052602060002090600302016002016000828254611c639190612818565b909155505050505050565b60008060008060008089604001516001600160a01b03166320aa9e7233896040518363ffffffff1660e01b8152600401611ca9929190612640565b6080604051808303816000875af1158015611cc8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cec919061282b565b93509350935093506000670de0b6b3a764000084611d1a8b8e60200151611d1391906127d6565b8c8e612112565b611d2491906125d1565b611d2e91906125e8565b6040516323b872dd60e01b81529091506001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906323b872dd90611d8190339030908690600401612777565b6020604051808303816000875af1158015611da0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dc49190612659565b506000620f4240611dd7614e20846125d1565b611de191906125e8565b8c5160405163a9059cbb60e01b81529192506001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169163a9059cbb91611e32918590600401612640565b6020604051808303816000875af1158015611e51573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e759190612659565b506000611e828284612818565b905084811115611fe7576000620f4240611e9c8784612818565b611eac9063ffffffff88166125d1565b611eb691906125e8565b60405163375edc7760e11b81529091506001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690636ebdb8ee90611f079030908590600401612640565b600060405180830381600087803b158015611f2157600080fd5b505af1158015611f35573d6000803e3d6000fd5b505050507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663a9059cbb89838986611f769190612818565b611f809190612818565b6040518363ffffffff1660e01b8152600401611f9d929190612640565b6020604051808303816000875af1158015611fbc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fe09190612659565b5050612079565b84811015612079576001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001663d1fa5e98306120298489612818565b6040518363ffffffff1660e01b8152600401612046929190612640565b600060405180830381600087803b15801561206057600080fd5b505af1158015612074573d6000803e3d6000fd5b505050505b6040516363b20c3360e11b81526004810186905263ffffffff851660248201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063c764186690604401600060405180830381600087803b1580156120e757600080fd5b505af11580156120fb573d6000803e3d6000fd5b50979f949e50939c50505050505050505050505050565b60004264ffffffffff8086169082161161212f5782915050612199565b61213984866127d6565b64ffffffffff168164ffffffffff1610612157576000915050612199565b6000612163868361286c565b61216d908661286c565b64ffffffffff169050808564ffffffffff168561218a91906125e8565b61219491906125d1565b925050505b9392505050565b801561222c576001600160a01b038085166000908152600160209081526040808320938716835292905290812080548492906121dd90849061262d565b92505081905550826001600160a01b03167f8ab298b78a235f73eee230f82012c0cf4db76003eaabd16a0195f112e7d625c8858460405161221f929190612640565b60405180910390a261188c565b60405163a9059cbb60e01b81526001600160a01b0385169063a9059cbb9061225a9086908690600401612640565b6020604051808303816000875af1158015612279573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061229d9190612659565b5050505050565b6001600160a01b03811681146122b957600080fd5b50565b600080604083850312156122cf57600080fd5b82356122da816122a4565b946020939093013593505050565b64ffffffffff811681146122b957600080fd5b6000806000806080858703121561231157600080fd5b843561231c816122a4565b93506020850135925060408501359150606085013561233a816122e8565b939692955090935050565b803562ffffff8116811461235857600080fd5b919050565b6000806000806000806000806000806101408b8d03121561237d57600080fd5b8a35612388816122a4565b995060208b0135985060408b0135975060608b0135965060808b01356123ad816122e8565b955060a08b01356123bd816122e8565b945060c08b01356123cd816122e8565b93506123db60e08c01612345565b92506101008b013591506123f26101208c01612345565b90509295989b9194979a5092959850565b6000806040838503121561241657600080fd5b8235612421816122a4565b91506020830135612431816122a4565b809150509250929050565b63ffffffff811681146122b957600080fd5b80151581146122b957600080fd5b60008060006060848603121561247157600080fd5b833561247c8161243c565b92506020840135915060408401356124938161244e565b809150509250925092565b6000602082840312156124b057600080fd5b5035919050565b600080600080600060a086880312156124cf57600080fd5b85356124da816122a4565b945060208601356124ea816122a4565b935060408601359250606086013591506080860135612508816122e8565b809150509295509295909350565b60008060006060848603121561252b57600080fd5b8335612536816122a4565b95602085013595506040909401359392505050565b60006020828403121561255d57600080fd5b8135612199816122a4565b60006020828403121561257a57600080fd5b81356121998161243c565b60006020828403121561259757600080fd5b8151612199816122a4565b6000602082840312156125b457600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b80820281158282048414176104c2576104c26125bb565b60008261260557634e487b7160e01b600052601260045260246000fd5b500490565b60006020828403121561261c57600080fd5b815160ff8116811461219957600080fd5b808201808211156104c2576104c26125bb565b6001600160a01b03929092168252602082015260400190565b60006020828403121561266b57600080fd5b81516121998161244e565b600060033d111561268f5760046000803e5060005160e01c5b90565b601f8201601f1916810167ffffffffffffffff811182821017156126c657634e487b7160e01b600052604160045260246000fd5b6040525050565b600060443d10156126db5790565b6040516003193d81016004833e81513d67ffffffffffffffff816024840111818411171561270b57505050505090565b82850191508151818111156127235750505050505090565b843d870101602082850101111561273d5750505050505090565b61274c60208286010187612692565b509095945050505050565b60008060233d1115612773576020600460003e50506000516001905b9091565b6001600160a01b039384168152919092166020820152604081019190915260600190565b634e487b7160e01b600052603260045260246000fd5b600080604083850312156127c457600080fd5b825191506020830151612431816122e8565b64ffffffffff8181168382160190808211156127f4576127f46125bb565b5092915050565b60006020828403121561280d57600080fd5b8151612199816122e8565b818103818111156104c2576104c26125bb565b6000806000806080858703121561284157600080fd5b845161284c816122a4565b809450506020850151925060408501519150606085015161233a8161243c565b64ffffffffff8281168282160390808211156127f4576127f46125bb56fea2646970667358221220ec64c6bfc3be52b1531d9c64ef707bb22996d4e7f366516b7e458c1d11bb2cd664736f6c63430008140033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061010b5760003560e01c80637eb81bb3116100a2578063c14a9f0511610071578063c14a9f0514610281578063e6ac5ea414610294578063e6ca1df2146102a7578063e85cde6f146102ba578063f61d52e6146102cd57600080fd5b80637eb81bb3146102055780638f1d37761461021a5780639d8ff2a614610265578063af5806b61461027857600080fd5b80632e2c6314116100de5780632e2c63141461018d5780632f09177d146101a057806335a4b349146101c7578063643745fb146101da57600080fd5b80630f2f8e861461011057806325e281241461012b5780632bf78dd81461013e5780632c4e722e1461014e575b600080fd5b610118600a81565b6040519081526020015b60405180910390f35b6101186101393660046122bc565b6102f4565b610118683635c9adc5dea0000081565b6101757f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610122565b61017561019b3660046122fb565b6104c8565b6101757f000000000000000000000000000000000000000000000000000000000000000081565b6101756101d536600461235d565b6104e0565b6101186101e8366004612403565b600160209081526000928352604080842090915290825290205481565b61021861021336600461245c565b610a41565b005b61022d61022836600461249e565b610c39565b604080516001600160a01b03958616815264ffffffffff94909416602085015291909316908201526060810191909152608001610122565b6101756102733660046124b7565b610c8b565b610118614e2081565b61011861028f366004612516565b61112f565b6101186102a236600461254b565b6114e2565b6101186102b5366004612568565b6116ef565b6102186102c8366004612403565b6117fc565b6101757f000000000000000000000000000000000000000000000000000000000000000081565b600080836001600160a01b031663d8dfeb456040518163ffffffff1660e01b8152600401602060405180830381865afa158015610335573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103599190612585565b6040516370a0823160e01b81526001600160a01b03868116600483015291909116906370a0823190602401602060405180830381865afa1580156103a1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103c591906125a2565b905060008184116103d657836103d8565b815b905060006103e5866114e2565b90506000670de0b6b3a76400006103fc84846125d1565b61040691906125e8565b60405163211d798360e01b815233600482015260248101859052604481018290529091506001600160a01b0388169063211d798390606401600060405180830381600087803b15801561045857600080fd5b505af115801561046c573d6000803e3d6000fd5b5050604080516001600160a01b038b168152602081018790529081018590527f67a660133c1fb4c0bb0480a5e4a9919216684052f13f0713e88fa2fbbc81d0829250606001905060405180910390a15090925050505b92915050565b60006104d73386868686610c8b565b95945050505050565b6000620f42408462ffffff1611156104f757600080fd5b8162ffffff16614e20111580156105165750620f42408262ffffff1611155b61051f57600080fd5b60188b6001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa15801561055f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610583919061260a565b60ff16111561059157600080fd5b60008b6001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156105d1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105f591906125a2565b61060090600161262d565b60405163a9059cbb60e01b81529091506001600160a01b038d169063a9059cbb9061063390610123908590600401612640565b6020604051808303816000875af192505050801561066e575060408051601f3d908101601f1916820190925261066b91810190612659565b60015b6106ee5761067a612676565b806308c379a00361069f575061068e6126cd565b8061069957506106b8565b50610708565b634e487b71036106b8576106b1612757565b9061069957505b3d8080156106e2576040519150601f19603f3d011682016040523d82523d6000602084013e6106e7565b606091505b5050610708565b506040516343befb6960e11b815260040160405180910390fd5b8a8a101561072957604051633a23d82560e01b815260040160405180910390fd5b700a491b7b04606cdcaf4de2aec000000000610745858d6125d1565b101561076457604051633a23d82560e01b815260040160405180910390fd5b50604051632ec127bb60e11b81523360048201526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660248301528c81166044830152606482018c9052608482018a905264ffffffffff89811660a484015288811660c4840152871660e483015262ffffff868116610104840152610124830186905284166101448301526000917f000000000000000000000000000000000000000000000000000000000000000090911690635d824f7690610164016020604051808303816000875af1158015610849573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061086d9190612585565b60405163b52c696d60e01b81526001600160a01b0380831660048301529192507f00000000000000000000000000000000000000000000000000000000000000009091169063b52c696d90602401600060405180830381600087803b1580156108d557600080fd5b505af11580156108e9573d6000803e3d6000fd5b505060405163375edc7760e11b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169250636ebdb8ee9150610944903390683635c9adc5dea0000090600401612640565b600060405180830381600087803b15801561095e57600080fd5b505af1158015610972573d6000803e3d6000fd5b50506040516323b872dd60e01b81526001600160a01b038f1692506323b872dd91506109a690339085908f90600401612777565b6020604051808303816000875af11580156109c5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109e99190612659565b50604080516001600160a01b03808416808352908f1660208301529133917fc9b570ab9d98bdf3e38a40fd71b20edafca42449f23ca51f0bdcbf40e8ffe175910160405180910390a39b9a5050505050505050505050565b6000808463ffffffff1681548110610a5b57610a5b61279b565b600091825260208083206040805160808101825260039490940290910180546001600160a01b038082168652600160a01b90910464ffffffffff169385019390935260018101549092168382018190526002909201546060840152805163194c325560e11b81528151939550849363329864aa926004808401939192918290030181865afa158015610af1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b1591906127b1565b9150915084836060015110610b2a5784610b30565b82606001515b9450808360200151610b4291906127d6565b64ffffffffff164211610baf57610b5b83878488611892565b604080840151815163ffffffff89168152602081018890526001600160a01b03909116917f1eee30d91b773ac47d7485a3acb6bcd8c7c9cd8d95301b1af361baf5f0991d2e910160405180910390a2610c31565b610bbb83878787611b5b565b600080610bca8585858a611c6e565b604080880151815163ffffffff8d16815260208101849052918201849052606082018b90529294509092506001600160a01b03909116907f7d3a26e8d43c5b70f86266bfa26c212e3c097716ff7240ccb6a9034e48754e239060800160405180910390a250505b505050505050565b60008181548110610c4957600080fd5b60009182526020909120600390910201805460018201546002909201546001600160a01b038083169450600160a01b90920464ffffffffff1692919091169084565b60405163aa5dd7f160e01b81526001600160a01b038581166004830152600091869130917f00000000000000000000000000000000000000000000000000000000000000009091169063aa5dd7f190602401602060405180830381865afa158015610cfa573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d1e9190612585565b6001600160a01b031614610d45576040516369229ba760e01b815260040160405180910390fd5b604051630167d12360e71b81526001600160a01b0387811660048301526000917f00000000000000000000000000000000000000000000000000000000000000009091169063b3e89180906024016020604051808303816000875af1158015610db2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dd69190612585565b6040516336a3a4fd60e11b81526001600160a01b03898116600483015264ffffffffff871660248301529192508291821690636d4749fa90604401600060405180830381600087803b158015610e2b57600080fd5b505af1158015610e3f573d6000803e3d6000fd5b505060405163b52c696d60e01b81526001600160a01b0385811660048301527f000000000000000000000000000000000000000000000000000000000000000016925063b52c696d9150602401600060405180830381600087803b158015610ea657600080fd5b505af1158015610eba573d6000803e3d6000fd5b505050506000816001600160a01b031663d8dfeb456040518163ffffffff1660e01b8152600401602060405180830381865afa158015610efe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f229190612585565b9050816001600160a01b031663babe7c746040518163ffffffff1660e01b8152600401602060405180830381865afa158015610f62573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f8691906125a2565b881015610fa657604051633a23d82560e01b815260040160405180910390fd5b6040516323b872dd60e01b81526001600160a01b038216906323b872dd90610fd690339087908d90600401612777565b6020604051808303816000875af1158015610ff5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110199190612659565b50604080516001600160a01b038b81168252838116602083015280861692908d16917fc9b570ab9d98bdf3e38a40fd71b20edafca42449f23ca51f0bdcbf40e8ffe175910160405180910390a36040516340c10f1960e01b81526001600160a01b038316906340c10f1990611094908d908b90600401612640565b600060405180830381600087803b1580156110ae57600080fd5b505af11580156110c2573d6000803e3d6000fd5b505060405163f2fde38b60e01b81526001600160a01b038d811660048301528516925063f2fde38b9150602401600060405180830381600087803b15801561110957600080fd5b505af115801561111d573d6000803e3d6000fd5b50949c9b505050505050505050505050565b60405163aa5dd7f160e01b81526001600160a01b038481166004830152600091859130917f00000000000000000000000000000000000000000000000000000000000000009091169063aa5dd7f190602401602060405180830381865afa15801561119e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111c29190612585565b6001600160a01b0316146111e9576040516369229ba760e01b815260040160405180910390fd5b600085905083816001600160a01b031663a035b1fe6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561122d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061125191906125a2565b101561127057604051630d57523160e11b815260040160405180910390fd5b806001600160a01b031663d8dfeb456040518163ffffffff1660e01b8152600401602060405180830381865afa1580156112ae573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112d29190612585565b6001600160a01b03166323b872dd3330886040518463ffffffff1660e01b815260040161130193929190612777565b6020604051808303816000875af1158015611320573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113449190612659565b50600080546040805160808101825233815264ffffffffff428116602083019081526001600160a01b03878116848601818152606086018e8152600189018a559880529451600388027f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563810180549551909616600160a01b026001600160c81b0319909516918416919091179390931790935592517f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e56482018054919094166001600160a01b0319919091161790925593517f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e56590910155516342d0204160e01b81529091906342d020419061146090899060040190815260200190565b600060405180830381600087803b15801561147a57600080fd5b505af115801561148e573d6000803e3d6000fd5b505060408051898152602081018590526001600160a01b03861693503392507fc4b384b2c5ca32c8e77081f4083be594a1ea9ba34f208a9f9a458f70608585f5910160405180910390a39695505050505050565b600080826001600160a01b031663a035b1fe6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611523573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061154791906125a2565b90506000836001600160a01b0316634665096d6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611589573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115ad91906127fb565b64ffffffffff1690508042116115d0576115c882600a6125d1565b949350505050565b6000846001600160a01b031663f3f480d96040518163ffffffff1660e01b8152600401602060405180830381865afa158015611610573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061163491906127fb565b64ffffffffff16905060006116498342612818565b90508181116116a257600061165e8284612818565b905080838661166f6001600a612818565b61167991906125d1565b61168391906125e8565b61168d91906125d1565b611697908661262d565b979650505050505050565b6116ad8260026125d1565b8110156116e3576000816116c28460026125d1565b6116cc9190612818565b9050806116d984876125e8565b61169791906125d1565b50600095945050505050565b60008060008363ffffffff168154811061170b5761170b61279b565b60009182526020918290206040805160808101825260039390930290910180546001600160a01b03808216808652600160a01b90920464ffffffffff169585019590955260018201549094169183019190915260020154606082015291506117765750600092915050565b60008082604001516001600160a01b031663329864aa6040518163ffffffff1660e01b81526004016040805180830381865afa1580156117ba573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117de91906127b1565b915091506104d78184602001516117f591906127d6565b8284612112565b6001600160a01b038216600081815260016020908152604080832033845290915280822080549290555163a9059cbb60e01b815290919063a9059cbb906118499085908590600401612640565b6020604051808303816000875af1158015611868573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061188c9190612659565b50505050565b836020015164ffffffffff1642036118a957600080fd5b83516001600160a01b0316331461196f5783516001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906323b872dd903390670de0b6b3a764000061190287876125d1565b61190c91906125e8565b6040518463ffffffff1660e01b815260040161192a93929190612777565b6020604051808303816000875af1158015611949573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061196d9190612659565b505b83604001516001600160a01b03166349746f10826040518263ffffffff1660e01b81526004016119a191815260200190565b600060405180830381600087803b1580156119bb57600080fd5b505af11580156119cf573d6000803e3d6000fd5b5050505083604001516001600160a01b031663d8dfeb456040518163ffffffff1660e01b8152600401602060405180830381865afa158015611a15573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a399190612585565b6001600160a01b031663a9059cbb33836040518363ffffffff1660e01b8152600401611a66929190612640565b6020604051808303816000875af1158015611a85573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611aa99190612659565b508360600151811015611af957808460600151611ac69190612818565b60008463ffffffff1681548110611adf57611adf61279b565b90600052602060002090600302016002018190555061188c565b83606001518114611b0957600080fd5b60008363ffffffff1681548110611b2257611b2261279b565b60009182526020822060039091020180546001600160c81b03191681556001810180546001600160a01b03191690556002015550505050565b611bcd84604001516001600160a01b031663d8dfeb456040518163ffffffff1660e01b8152600401602060405180830381865afa158015611ba0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bc49190612585565b855184846121a0565b81846060015103611c295760008363ffffffff1681548110611bf157611bf161279b565b60009182526020822060039091020180546001600160c81b03191681556001810180546001600160a01b03191690556002015561188c565b8160008463ffffffff1681548110611c4357611c4361279b565b90600052602060002090600302016002016000828254611c639190612818565b909155505050505050565b60008060008060008089604001516001600160a01b03166320aa9e7233896040518363ffffffff1660e01b8152600401611ca9929190612640565b6080604051808303816000875af1158015611cc8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cec919061282b565b93509350935093506000670de0b6b3a764000084611d1a8b8e60200151611d1391906127d6565b8c8e612112565b611d2491906125d1565b611d2e91906125e8565b6040516323b872dd60e01b81529091506001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906323b872dd90611d8190339030908690600401612777565b6020604051808303816000875af1158015611da0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dc49190612659565b506000620f4240611dd7614e20846125d1565b611de191906125e8565b8c5160405163a9059cbb60e01b81529192506001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169163a9059cbb91611e32918590600401612640565b6020604051808303816000875af1158015611e51573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e759190612659565b506000611e828284612818565b905084811115611fe7576000620f4240611e9c8784612818565b611eac9063ffffffff88166125d1565b611eb691906125e8565b60405163375edc7760e11b81529091506001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690636ebdb8ee90611f079030908590600401612640565b600060405180830381600087803b158015611f2157600080fd5b505af1158015611f35573d6000803e3d6000fd5b505050507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663a9059cbb89838986611f769190612818565b611f809190612818565b6040518363ffffffff1660e01b8152600401611f9d929190612640565b6020604051808303816000875af1158015611fbc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fe09190612659565b5050612079565b84811015612079576001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001663d1fa5e98306120298489612818565b6040518363ffffffff1660e01b8152600401612046929190612640565b600060405180830381600087803b15801561206057600080fd5b505af1158015612074573d6000803e3d6000fd5b505050505b6040516363b20c3360e11b81526004810186905263ffffffff851660248201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063c764186690604401600060405180830381600087803b1580156120e757600080fd5b505af11580156120fb573d6000803e3d6000fd5b50979f949e50939c50505050505050505050505050565b60004264ffffffffff8086169082161161212f5782915050612199565b61213984866127d6565b64ffffffffff168164ffffffffff1610612157576000915050612199565b6000612163868361286c565b61216d908661286c565b64ffffffffff169050808564ffffffffff168561218a91906125e8565b61219491906125d1565b925050505b9392505050565b801561222c576001600160a01b038085166000908152600160209081526040808320938716835292905290812080548492906121dd90849061262d565b92505081905550826001600160a01b03167f8ab298b78a235f73eee230f82012c0cf4db76003eaabd16a0195f112e7d625c8858460405161221f929190612640565b60405180910390a261188c565b60405163a9059cbb60e01b81526001600160a01b0385169063a9059cbb9061225a9086908690600401612640565b6020604051808303816000875af1158015612279573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061229d9190612659565b5050505050565b6001600160a01b03811681146122b957600080fd5b50565b600080604083850312156122cf57600080fd5b82356122da816122a4565b946020939093013593505050565b64ffffffffff811681146122b957600080fd5b6000806000806080858703121561231157600080fd5b843561231c816122a4565b93506020850135925060408501359150606085013561233a816122e8565b939692955090935050565b803562ffffff8116811461235857600080fd5b919050565b6000806000806000806000806000806101408b8d03121561237d57600080fd5b8a35612388816122a4565b995060208b0135985060408b0135975060608b0135965060808b01356123ad816122e8565b955060a08b01356123bd816122e8565b945060c08b01356123cd816122e8565b93506123db60e08c01612345565b92506101008b013591506123f26101208c01612345565b90509295989b9194979a5092959850565b6000806040838503121561241657600080fd5b8235612421816122a4565b91506020830135612431816122a4565b809150509250929050565b63ffffffff811681146122b957600080fd5b80151581146122b957600080fd5b60008060006060848603121561247157600080fd5b833561247c8161243c565b92506020840135915060408401356124938161244e565b809150509250925092565b6000602082840312156124b057600080fd5b5035919050565b600080600080600060a086880312156124cf57600080fd5b85356124da816122a4565b945060208601356124ea816122a4565b935060408601359250606086013591506080860135612508816122e8565b809150509295509295909350565b60008060006060848603121561252b57600080fd5b8335612536816122a4565b95602085013595506040909401359392505050565b60006020828403121561255d57600080fd5b8135612199816122a4565b60006020828403121561257a57600080fd5b81356121998161243c565b60006020828403121561259757600080fd5b8151612199816122a4565b6000602082840312156125b457600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b80820281158282048414176104c2576104c26125bb565b60008261260557634e487b7160e01b600052601260045260246000fd5b500490565b60006020828403121561261c57600080fd5b815160ff8116811461219957600080fd5b808201808211156104c2576104c26125bb565b6001600160a01b03929092168252602082015260400190565b60006020828403121561266b57600080fd5b81516121998161244e565b600060033d111561268f5760046000803e5060005160e01c5b90565b601f8201601f1916810167ffffffffffffffff811182821017156126c657634e487b7160e01b600052604160045260246000fd5b6040525050565b600060443d10156126db5790565b6040516003193d81016004833e81513d67ffffffffffffffff816024840111818411171561270b57505050505090565b82850191508151818111156127235750505050505090565b843d870101602082850101111561273d5750505050505090565b61274c60208286010187612692565b509095945050505050565b60008060233d1115612773576020600460003e50506000516001905b9091565b6001600160a01b039384168152919092166020820152604081019190915260600190565b634e487b7160e01b600052603260045260246000fd5b600080604083850312156127c457600080fd5b825191506020830151612431816122e8565b64ffffffffff8181168382160190808211156127f4576127f46125bb565b5092915050565b60006020828403121561280d57600080fd5b8151612199816122e8565b818103818111156104c2576104c26125bb565b6000806000806080858703121561284157600080fd5b845161284c816122a4565b809450506020850151925060408501519150606085015161233a8161243c565b64ffffffffff8281168282160390808211156127f4576127f46125bb56fea2646970667358221220ec64c6bfc3be52b1531d9c64ef707bb22996d4e7f366516b7e458c1d11bb2cd664736f6c63430008140033",
  "devdoc": {
    "details": "Only one instance of this contract is required, whereas every new position comes with a new position contract. Pending challenges are stored as structs in an array.",
    "kind": "dev",
    "methods": {
      "bid(uint32,uint256,bool)": {
        "details": "In case that the collateral cannot be transfered back to the challenger (i.e. because the collateral token has a blacklist and the challenger is on it), it is possible to postpone the return of the collateral.",
        "params": {
          "_challengeNumber": "index of the challenge as broadcast in the event",
          "postponeCollateralReturn": "To postpone the return of the collateral to the challenger. Usually false.",
          "size": "how much of the collateral the caller wants to bid for at most                          (automatically reduced to the available amount)"
        }
      },
      "challenge(address,uint256,uint256)": {
        "params": {
          "_collateralAmount": "amount of the collateral we want to challenge",
          "_positionAddr": "address of the position we want to challenge",
          "minimumPrice": "position.price() to guard against the minter fruntrunning with a price change"
        },
        "returns": {
          "_0": "index of the challenge in challenge-array"
        }
      },
      "clone(address,address,uint256,uint256,uint40)": {
        "details": "This needs an allowance to be set on the collateral contract such that the minting hub can get the collateral."
      },
      "openPosition(address,uint256,uint256,uint256,uint40,uint40,uint40,uint24,uint256,uint24)": {
        "details": "For a successful call, you must set an allowance for the collateral token, allowing the minting hub to transfer the initial collateral amount to the newly created position and to withdraw the fees.",
        "params": {
          "_challengeSeconds": "challenge period. Longer for less liquid collateral.",
          "_collateralAddress": "address of collateral token",
          "_expirationSeconds": "position tenor in unit of timestamp (seconds) from 'now'",
          "_initialCollateral": "amount of initial collateral to be deposited",
          "_liqPrice": "Liquidation price with (36 - token decimals) decimals,                           e.g. 18 decimals for an 18 dec collateral, 36 decs for a 0 dec collateral.",
          "_minCollateral": "minimum collateral required to prevent dust amounts",
          "_mintingMaximum": "maximal amount of OFD that can be minted by the position owner",
          "_reservePPM": "ppm of minted amount that is locked as borrower's reserve, e.g. 20%",
          "_riskPremium": "ppm of minted amount that is added to the applicible minting fee as a risk premium"
        },
        "returns": {
          "_0": "address           address of created position"
        }
      },
      "price(uint32)": {
        "details": "The price comes with (36-collateral.decimals()) digits, such that multiplying it with the raw collateral amount always yields a price with 36 digits, or 18 digits after dividing by 10**18 again."
      }
    },
    "stateVariables": {
      "pendingReturns": {
        "details": "It maps collateral => beneficiary => amount."
      }
    },
    "title": "Minting Hub",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "CHALLENGER_REWARD()": {
        "notice": "The challenger reward in parts per million (ppm) relative to the challenged amount, whereas challenged amount if defined as the challenged collateral amount times the liquidation price."
      },
      "OPENING_FEE()": {
        "notice": "Irrevocable fee in OFD when proposing a new position (but not when cloning an existing one)."
      },
      "bid(uint32,uint256,bool)": {
        "notice": "Post a bid in OFD given an open challenge."
      },
      "buyExpiredCollateral(address,uint256)": {
        "notice": "Buys up to the desired amount of the collateral asset from the given expired position using the applicable 'expiredPurchasePrice' in that instant."
      },
      "challenge(address,uint256,uint256)": {
        "notice": "Launch a challenge (Dutch auction) on a position"
      },
      "clone(address,address,uint256,uint256,uint40)": {
        "notice": "Clones an existing position and immediately tries to mint the specified amount using the given collateral."
      },
      "expiredPurchasePrice(address)": {
        "notice": "The applicable purchase price when forcing the sale of collateral of an expired position. The price starts at 10x the liquidation price at the expiration time, linearly declines to 1x liquidation price over the course of one challenge period, and then linearly declines less steeply to 0 over the course of another challenge period."
      },
      "openPosition(address,uint256,uint256,uint256,uint40,uint40,uint40,uint24,uint256,uint24)": {
        "notice": "Open a collateralized loan position. See also https://oracle-free-dollar.gitbook.io/ofd/collateralised-minting/opening-new-position ."
      },
      "pendingReturns(address,address)": {
        "notice": "Map to remember pending postponed collateral returns."
      },
      "price(uint32)": {
        "notice": "Get the price per unit of the collateral for the given challenge."
      },
      "returnPostponedCollateral(address,address)": {
        "notice": "Challengers can call this method to withdraw collateral whose return was postponed."
      }
    },
    "notice": "The central hub for creating, cloning and challenging collateralized OracleFreeDollar positions.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1371,
        "contract": "contracts/MintingHub.sol:MintingHub",
        "label": "challenges",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_struct(Challenge)1388_storage)dyn_storage"
      },
      {
        "astId": 1378,
        "contract": "contracts/MintingHub.sol:MintingHub",
        "label": "pendingReturns",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Challenge)1388_storage)dyn_storage": {
        "base": "t_struct(Challenge)1388_storage",
        "encoding": "dynamic_array",
        "label": "struct MintingHub.Challenge[]",
        "numberOfBytes": "32"
      },
      "t_contract(IPosition)6929": {
        "encoding": "inplace",
        "label": "contract IPosition",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(Challenge)1388_storage": {
        "encoding": "inplace",
        "label": "struct MintingHub.Challenge",
        "members": [
          {
            "astId": 1380,
            "contract": "contracts/MintingHub.sol:MintingHub",
            "label": "challenger",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 1382,
            "contract": "contracts/MintingHub.sol:MintingHub",
            "label": "start",
            "offset": 20,
            "slot": "0",
            "type": "t_uint40"
          },
          {
            "astId": 1385,
            "contract": "contracts/MintingHub.sol:MintingHub",
            "label": "position",
            "offset": 0,
            "slot": "1",
            "type": "t_contract(IPosition)6929"
          },
          {
            "astId": 1387,
            "contract": "contracts/MintingHub.sol:MintingHub",
            "label": "size",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint40": {
        "encoding": "inplace",
        "label": "uint40",
        "numberOfBytes": "5"
      }
    }
  }
}